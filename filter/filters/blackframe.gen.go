// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// BlackframeBuilder Detect frames that are (almost) black.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#blackframe
type BlackframeBuilder interface {
	filter.Filter
	// Amount percentage of the pixels that have to be below the threshold for the frame to be considered black (from 0 to 100) (default 98).
	Amount(amount int) BlackframeBuilder
	// Threshold threshold below which a pixel value is considered black (from 0 to 255) (default 32).
	Threshold(threshold int) BlackframeBuilder
	// Thresh threshold below which a pixel value is considered black (from 0 to 255) (default 32).
	Thresh(thresh int) BlackframeBuilder
}

// Blackframe creates a new BlackframeBuilder to configure the "blackframe" filter.
func Blackframe(opts ...filter.Option) BlackframeBuilder {
	return &implBlackframeBuilder{
		f: filter.New("blackframe", 1, opts...),
	}
}

type implBlackframeBuilder struct {
	f filter.Filter
}

func (blackframeBuilder *implBlackframeBuilder) String() string {
	return blackframeBuilder.f.String()
}

func (blackframeBuilder *implBlackframeBuilder) Outputs() int {
	return blackframeBuilder.f.Outputs()
}

func (blackframeBuilder *implBlackframeBuilder) With(key string, value expr.Expr) filter.Filter {
	return blackframeBuilder.withOption(key, value)
}

func (blackframeBuilder *implBlackframeBuilder) withOption(key string, value expr.Expr) BlackframeBuilder {
	bCopy := *blackframeBuilder
	bCopy.f = blackframeBuilder.f.With(key, value)
	return &bCopy
}

func (blackframeBuilder *implBlackframeBuilder) Amount(amount int) BlackframeBuilder {
	return blackframeBuilder.withOption("amount", expr.Int(amount))
}

func (blackframeBuilder *implBlackframeBuilder) Threshold(threshold int) BlackframeBuilder {
	return blackframeBuilder.withOption("threshold", expr.Int(threshold))
}

func (blackframeBuilder *implBlackframeBuilder) Thresh(thresh int) BlackframeBuilder {
	return blackframeBuilder.withOption("thresh", expr.Int(thresh))
}
