// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// OcrBuilder Optical Character Recognition.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#ocr
type OcrBuilder interface {
	filter.Filter
	// Datapath set datapath.
	Datapath(datapath string) OcrBuilder
	// Language set language (default "eng").
	Language(language string) OcrBuilder
	// Whitelist set character whitelist (default "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.:;,-+_!?"'[]{}()<>|/\=*&%$#@!~ ").
	Whitelist(whitelist string) OcrBuilder
	// Blacklist set character blacklist (default "").
	Blacklist(blacklist string) OcrBuilder
}

// Ocr creates a new OcrBuilder to configure the "ocr" filter.
func Ocr(opts ...filter.Option) OcrBuilder {
	return &implOcrBuilder{
		f: filter.New("ocr", 1, opts...),
	}
}

type implOcrBuilder struct {
	f filter.Filter
}

func (ocrBuilder *implOcrBuilder) String() string {
	return ocrBuilder.f.String()
}

func (ocrBuilder *implOcrBuilder) Outputs() int {
	return ocrBuilder.f.Outputs()
}

func (ocrBuilder *implOcrBuilder) With(key string, value expr.Expr) filter.Filter {
	return ocrBuilder.withOption(key, value)
}

func (ocrBuilder *implOcrBuilder) withOption(key string, value expr.Expr) OcrBuilder {
	bCopy := *ocrBuilder
	bCopy.f = ocrBuilder.f.With(key, value)
	return &bCopy
}

func (ocrBuilder *implOcrBuilder) Datapath(datapath string) OcrBuilder {
	return ocrBuilder.withOption("datapath", expr.String(datapath))
}

func (ocrBuilder *implOcrBuilder) Language(language string) OcrBuilder {
	return ocrBuilder.withOption("language", expr.String(language))
}

func (ocrBuilder *implOcrBuilder) Whitelist(whitelist string) OcrBuilder {
	return ocrBuilder.withOption("whitelist", expr.String(whitelist))
}

func (ocrBuilder *implOcrBuilder) Blacklist(blacklist string) OcrBuilder {
	return ocrBuilder.withOption("blacklist", expr.String(blacklist))
}
