// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// RubberbandBuilder Apply time-stretching and pitch-shifting.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#rubberband
type RubberbandBuilder interface {
	filter.Filter
	// Tempo set tempo scale factor (from 0.01 to 100) (default 1).
	Tempo(tempo float64) RubberbandBuilder
	// TempoExpr set tempo scale factor (from 0.01 to 100) (default 1).
	TempoExpr(tempo expr.Expr) RubberbandBuilder
	// Pitch set pitch scale factor (from 0.01 to 100) (default 1).
	Pitch(pitch float64) RubberbandBuilder
	// PitchExpr set pitch scale factor (from 0.01 to 100) (default 1).
	PitchExpr(pitch expr.Expr) RubberbandBuilder
	// Transients set transients (from 0 to INT_MAX) (default crisp).
	Transients(transients int) RubberbandBuilder
	// Detector set detector (from 0 to INT_MAX) (default compound).
	Detector(detector int) RubberbandBuilder
	// Phase set phase (from 0 to INT_MAX) (default laminar).
	Phase(phase int) RubberbandBuilder
	// Window set window (from 0 to INT_MAX) (default standard).
	Window(window int) RubberbandBuilder
	// Smoothing set smoothing (from 0 to INT_MAX) (default off).
	Smoothing(smoothing int) RubberbandBuilder
	// Formant set formant (from 0 to INT_MAX) (default shifted).
	Formant(formant int) RubberbandBuilder
	// Pitchq set pitch quality (from 0 to INT_MAX) (default speed).
	Pitchq(pitchq int) RubberbandBuilder
	// Channels set channels (from 0 to INT_MAX) (default apart).
	Channels(channels int) RubberbandBuilder
}

// Rubberband creates a new RubberbandBuilder to configure the "rubberband" filter.
func Rubberband(opts ...filter.Option) RubberbandBuilder {
	return &implRubberbandBuilder{
		f: filter.New("rubberband", 1, opts...),
	}
}

type implRubberbandBuilder struct {
	f filter.Filter
}

func (rubberbandBuilder *implRubberbandBuilder) String() string {
	return rubberbandBuilder.f.String()
}

func (rubberbandBuilder *implRubberbandBuilder) Outputs() int {
	return rubberbandBuilder.f.Outputs()
}

func (rubberbandBuilder *implRubberbandBuilder) With(key string, value expr.Expr) filter.Filter {
	return rubberbandBuilder.withOption(key, value)
}

func (rubberbandBuilder *implRubberbandBuilder) withOption(key string, value expr.Expr) RubberbandBuilder {
	bCopy := *rubberbandBuilder
	bCopy.f = rubberbandBuilder.f.With(key, value)
	return &bCopy
}

func (rubberbandBuilder *implRubberbandBuilder) Tempo(tempo float64) RubberbandBuilder {
	return rubberbandBuilder.withOption("tempo", expr.Double(tempo))
}

func (rubberbandBuilder *implRubberbandBuilder) TempoExpr(tempo expr.Expr) RubberbandBuilder {
	return rubberbandBuilder.withOption("tempo", tempo)
}

func (rubberbandBuilder *implRubberbandBuilder) Pitch(pitch float64) RubberbandBuilder {
	return rubberbandBuilder.withOption("pitch", expr.Double(pitch))
}

func (rubberbandBuilder *implRubberbandBuilder) PitchExpr(pitch expr.Expr) RubberbandBuilder {
	return rubberbandBuilder.withOption("pitch", pitch)
}

func (rubberbandBuilder *implRubberbandBuilder) Transients(transients int) RubberbandBuilder {
	return rubberbandBuilder.withOption("transients", expr.Int(transients))
}

func (rubberbandBuilder *implRubberbandBuilder) Detector(detector int) RubberbandBuilder {
	return rubberbandBuilder.withOption("detector", expr.Int(detector))
}

func (rubberbandBuilder *implRubberbandBuilder) Phase(phase int) RubberbandBuilder {
	return rubberbandBuilder.withOption("phase", expr.Int(phase))
}

func (rubberbandBuilder *implRubberbandBuilder) Window(window int) RubberbandBuilder {
	return rubberbandBuilder.withOption("window", expr.Int(window))
}

func (rubberbandBuilder *implRubberbandBuilder) Smoothing(smoothing int) RubberbandBuilder {
	return rubberbandBuilder.withOption("smoothing", expr.Int(smoothing))
}

func (rubberbandBuilder *implRubberbandBuilder) Formant(formant int) RubberbandBuilder {
	return rubberbandBuilder.withOption("formant", expr.Int(formant))
}

func (rubberbandBuilder *implRubberbandBuilder) Pitchq(pitchq int) RubberbandBuilder {
	return rubberbandBuilder.withOption("pitchq", expr.Int(pitchq))
}

func (rubberbandBuilder *implRubberbandBuilder) Channels(channels int) RubberbandBuilder {
	return rubberbandBuilder.withOption("channels", expr.Int(channels))
}
