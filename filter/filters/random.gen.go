// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// RandomBuilder Return random frames.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#random
type RandomBuilder interface {
	filter.Filter
	// Frames set number of frames in cache (from 2 to 512) (default 30).
	Frames(frames int) RandomBuilder
	// Seed set the seed (from -1 to UINT32_MAX) (default -1).
	Seed(seed int64) RandomBuilder
}

// Random creates a new RandomBuilder to configure the "random" filter.
func Random(opts ...filter.Option) RandomBuilder {
	return &implRandomBuilder{
		f: filter.New("random", 1, opts...),
	}
}

type implRandomBuilder struct {
	f filter.Filter
}

func (randomBuilder *implRandomBuilder) String() string {
	return randomBuilder.f.String()
}

func (randomBuilder *implRandomBuilder) Outputs() int {
	return randomBuilder.f.Outputs()
}

func (randomBuilder *implRandomBuilder) With(key string, value expr.Expr) filter.Filter {
	return randomBuilder.withOption(key, value)
}

func (randomBuilder *implRandomBuilder) withOption(key string, value expr.Expr) RandomBuilder {
	bCopy := *randomBuilder
	bCopy.f = randomBuilder.f.With(key, value)
	return &bCopy
}

func (randomBuilder *implRandomBuilder) Frames(frames int) RandomBuilder {
	return randomBuilder.withOption("frames", expr.Int(frames))
}

func (randomBuilder *implRandomBuilder) Seed(seed int64) RandomBuilder {
	return randomBuilder.withOption("seed", expr.Int64(seed))
}
