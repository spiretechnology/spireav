// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// DrawgraphBuilder Draw a graph using input video metadata.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#drawgraph
type DrawgraphBuilder interface {
	filter.Filter
	// M1 set 1st metadata key (default "").
	M1(m1 string) DrawgraphBuilder
	// Fg1 set 1st foreground color expression (default "0xffff0000").
	Fg1(fg1 expr.Color) DrawgraphBuilder
	// Fg1Expr set 1st foreground color expression (default "0xffff0000").
	Fg1Expr(fg1 expr.Expr) DrawgraphBuilder
	// M2 set 2nd metadata key (default "").
	M2(m2 string) DrawgraphBuilder
	// Fg2 set 2nd foreground color expression (default "0xff00ff00").
	Fg2(fg2 expr.Color) DrawgraphBuilder
	// Fg2Expr set 2nd foreground color expression (default "0xff00ff00").
	Fg2Expr(fg2 expr.Expr) DrawgraphBuilder
	// M3 set 3rd metadata key (default "").
	M3(m3 string) DrawgraphBuilder
	// Fg3 set 3rd foreground color expression (default "0xffff00ff").
	Fg3(fg3 expr.Color) DrawgraphBuilder
	// Fg3Expr set 3rd foreground color expression (default "0xffff00ff").
	Fg3Expr(fg3 expr.Expr) DrawgraphBuilder
	// M4 set 4th metadata key (default "").
	M4(m4 string) DrawgraphBuilder
	// Fg4 set 4th foreground color expression (default "0xffffff00").
	Fg4(fg4 expr.Color) DrawgraphBuilder
	// Fg4Expr set 4th foreground color expression (default "0xffffff00").
	Fg4Expr(fg4 expr.Expr) DrawgraphBuilder
	// Bg set background color (default "white").
	Bg(bg expr.Color) DrawgraphBuilder
	// Min set minimal value (from INT_MIN to INT_MAX) (default -1).
	Min(min float32) DrawgraphBuilder
	// Max set maximal value (from INT_MIN to INT_MAX) (default 1).
	Max(max float32) DrawgraphBuilder
	// Mode set graph mode (from 0 to 2) (default line).
	Mode(mode int) DrawgraphBuilder
	// Slide set slide mode (from 0 to 4) (default frame).
	Slide(slide int) DrawgraphBuilder
	// Size set graph size (default "900x256").
	Size(size expr.Size) DrawgraphBuilder
	// S set graph size (default "900x256").
	S(s expr.Size) DrawgraphBuilder
	// Rate set video rate (default "25").
	Rate(rate expr.Rational) DrawgraphBuilder
	// R set video rate (default "25").
	R(r expr.Rational) DrawgraphBuilder
}

// Drawgraph creates a new DrawgraphBuilder to configure the "drawgraph" filter.
func Drawgraph(opts ...filter.Option) DrawgraphBuilder {
	return &implDrawgraphBuilder{
		f: filter.New("drawgraph", 1, opts...),
	}
}

type implDrawgraphBuilder struct {
	f filter.Filter
}

func (drawgraphBuilder *implDrawgraphBuilder) String() string {
	return drawgraphBuilder.f.String()
}

func (drawgraphBuilder *implDrawgraphBuilder) Outputs() int {
	return drawgraphBuilder.f.Outputs()
}

func (drawgraphBuilder *implDrawgraphBuilder) With(key string, value expr.Expr) filter.Filter {
	return drawgraphBuilder.withOption(key, value)
}

func (drawgraphBuilder *implDrawgraphBuilder) withOption(key string, value expr.Expr) DrawgraphBuilder {
	bCopy := *drawgraphBuilder
	bCopy.f = drawgraphBuilder.f.With(key, value)
	return &bCopy
}

func (drawgraphBuilder *implDrawgraphBuilder) M1(m1 string) DrawgraphBuilder {
	return drawgraphBuilder.withOption("m1", expr.String(m1))
}

func (drawgraphBuilder *implDrawgraphBuilder) Fg1(fg1 expr.Color) DrawgraphBuilder {
	return drawgraphBuilder.withOption("fg1", fg1)
}

func (drawgraphBuilder *implDrawgraphBuilder) Fg1Expr(fg1 expr.Expr) DrawgraphBuilder {
	return drawgraphBuilder.withOption("fg1", fg1)
}

func (drawgraphBuilder *implDrawgraphBuilder) M2(m2 string) DrawgraphBuilder {
	return drawgraphBuilder.withOption("m2", expr.String(m2))
}

func (drawgraphBuilder *implDrawgraphBuilder) Fg2(fg2 expr.Color) DrawgraphBuilder {
	return drawgraphBuilder.withOption("fg2", fg2)
}

func (drawgraphBuilder *implDrawgraphBuilder) Fg2Expr(fg2 expr.Expr) DrawgraphBuilder {
	return drawgraphBuilder.withOption("fg2", fg2)
}

func (drawgraphBuilder *implDrawgraphBuilder) M3(m3 string) DrawgraphBuilder {
	return drawgraphBuilder.withOption("m3", expr.String(m3))
}

func (drawgraphBuilder *implDrawgraphBuilder) Fg3(fg3 expr.Color) DrawgraphBuilder {
	return drawgraphBuilder.withOption("fg3", fg3)
}

func (drawgraphBuilder *implDrawgraphBuilder) Fg3Expr(fg3 expr.Expr) DrawgraphBuilder {
	return drawgraphBuilder.withOption("fg3", fg3)
}

func (drawgraphBuilder *implDrawgraphBuilder) M4(m4 string) DrawgraphBuilder {
	return drawgraphBuilder.withOption("m4", expr.String(m4))
}

func (drawgraphBuilder *implDrawgraphBuilder) Fg4(fg4 expr.Color) DrawgraphBuilder {
	return drawgraphBuilder.withOption("fg4", fg4)
}

func (drawgraphBuilder *implDrawgraphBuilder) Fg4Expr(fg4 expr.Expr) DrawgraphBuilder {
	return drawgraphBuilder.withOption("fg4", fg4)
}

func (drawgraphBuilder *implDrawgraphBuilder) Bg(bg expr.Color) DrawgraphBuilder {
	return drawgraphBuilder.withOption("bg", bg)
}

func (drawgraphBuilder *implDrawgraphBuilder) Min(min float32) DrawgraphBuilder {
	return drawgraphBuilder.withOption("min", expr.Float(min))
}

func (drawgraphBuilder *implDrawgraphBuilder) Max(max float32) DrawgraphBuilder {
	return drawgraphBuilder.withOption("max", expr.Float(max))
}

func (drawgraphBuilder *implDrawgraphBuilder) Mode(mode int) DrawgraphBuilder {
	return drawgraphBuilder.withOption("mode", expr.Int(mode))
}

func (drawgraphBuilder *implDrawgraphBuilder) Slide(slide int) DrawgraphBuilder {
	return drawgraphBuilder.withOption("slide", expr.Int(slide))
}

func (drawgraphBuilder *implDrawgraphBuilder) Size(size expr.Size) DrawgraphBuilder {
	return drawgraphBuilder.withOption("size", size)
}

func (drawgraphBuilder *implDrawgraphBuilder) S(s expr.Size) DrawgraphBuilder {
	return drawgraphBuilder.withOption("s", s)
}

func (drawgraphBuilder *implDrawgraphBuilder) Rate(rate expr.Rational) DrawgraphBuilder {
	return drawgraphBuilder.withOption("rate", rate)
}

func (drawgraphBuilder *implDrawgraphBuilder) R(r expr.Rational) DrawgraphBuilder {
	return drawgraphBuilder.withOption("r", r)
}
