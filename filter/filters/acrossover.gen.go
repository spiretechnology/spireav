// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// AcrossoverBuilder Split audio into per-bands streams.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#acrossover
type AcrossoverBuilder interface {
	filter.Filter
	// Split set split frequencies (default "500").
	Split(split string) AcrossoverBuilder
	// Order set filter order (from 0 to 9) (default 4th).
	Order(order int) AcrossoverBuilder
	// Level set input gain (from 0 to 1) (default 1).
	Level(level float32) AcrossoverBuilder
	// Gain set output bands gain (default "1.f").
	Gain(gain string) AcrossoverBuilder
	// Precision set processing precision (from 0 to 2) (default auto).
	Precision(precision int) AcrossoverBuilder
}

// Acrossover creates a new AcrossoverBuilder to configure the "acrossover" filter.
func Acrossover(outputs int, opts ...filter.Option) AcrossoverBuilder {
	f := filter.New("acrossover", outputs, opts...)
	f = f.With("outputs", expr.Int(outputs))
	return &implAcrossoverBuilder{f: f}
}

type implAcrossoverBuilder struct {
	f filter.Filter
}

func (acrossoverBuilder *implAcrossoverBuilder) String() string {
	return acrossoverBuilder.f.String()
}

func (acrossoverBuilder *implAcrossoverBuilder) Outputs() int {
	return acrossoverBuilder.f.Outputs()
}

func (acrossoverBuilder *implAcrossoverBuilder) With(key string, value expr.Expr) filter.Filter {
	return acrossoverBuilder.withOption(key, value)
}

func (acrossoverBuilder *implAcrossoverBuilder) withOption(key string, value expr.Expr) AcrossoverBuilder {
	bCopy := *acrossoverBuilder
	bCopy.f = acrossoverBuilder.f.With(key, value)
	return &bCopy
}

func (acrossoverBuilder *implAcrossoverBuilder) Split(split string) AcrossoverBuilder {
	return acrossoverBuilder.withOption("split", expr.String(split))
}

func (acrossoverBuilder *implAcrossoverBuilder) Order(order int) AcrossoverBuilder {
	return acrossoverBuilder.withOption("order", expr.Int(order))
}

func (acrossoverBuilder *implAcrossoverBuilder) Level(level float32) AcrossoverBuilder {
	return acrossoverBuilder.withOption("level", expr.Float(level))
}

func (acrossoverBuilder *implAcrossoverBuilder) Gain(gain string) AcrossoverBuilder {
	return acrossoverBuilder.withOption("gain", expr.String(gain))
}

func (acrossoverBuilder *implAcrossoverBuilder) Precision(precision int) AcrossoverBuilder {
	return acrossoverBuilder.withOption("precision", expr.Int(precision))
}
