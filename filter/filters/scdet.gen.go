// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// ScdetBuilder Detect video scene change.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#scdet
type ScdetBuilder interface {
	filter.Filter
	// Threshold set scene change detect threshold (from 0 to 100) (default 10).
	Threshold(threshold float64) ScdetBuilder
	// T set scene change detect threshold (from 0 to 100) (default 10).
	T(t float64) ScdetBuilder
	// ScPass Set the flag to pass scene change frames (default false).
	ScPass(scPass bool) ScdetBuilder
	// S Set the flag to pass scene change frames (default false).
	S(s bool) ScdetBuilder
}

// Scdet creates a new ScdetBuilder to configure the "scdet" filter.
func Scdet(opts ...filter.Option) ScdetBuilder {
	return &implScdetBuilder{
		f: filter.New("scdet", 1, opts...),
	}
}

type implScdetBuilder struct {
	f filter.Filter
}

func (scdetBuilder *implScdetBuilder) String() string {
	return scdetBuilder.f.String()
}

func (scdetBuilder *implScdetBuilder) Outputs() int {
	return scdetBuilder.f.Outputs()
}

func (scdetBuilder *implScdetBuilder) With(key string, value expr.Expr) filter.Filter {
	return scdetBuilder.withOption(key, value)
}

func (scdetBuilder *implScdetBuilder) withOption(key string, value expr.Expr) ScdetBuilder {
	bCopy := *scdetBuilder
	bCopy.f = scdetBuilder.f.With(key, value)
	return &bCopy
}

func (scdetBuilder *implScdetBuilder) Threshold(threshold float64) ScdetBuilder {
	return scdetBuilder.withOption("threshold", expr.Double(threshold))
}

func (scdetBuilder *implScdetBuilder) T(t float64) ScdetBuilder {
	return scdetBuilder.withOption("t", expr.Double(t))
}

func (scdetBuilder *implScdetBuilder) ScPass(scPass bool) ScdetBuilder {
	return scdetBuilder.withOption("sc_pass", expr.Bool(scPass))
}

func (scdetBuilder *implScdetBuilder) S(s bool) ScdetBuilder {
	return scdetBuilder.withOption("s", expr.Bool(s))
}
