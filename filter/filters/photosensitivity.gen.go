// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// PhotosensitivityBuilder Filter out photosensitive epilepsy seizure-inducing flashes.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#photosensitivity
type PhotosensitivityBuilder interface {
	filter.Filter
	// Frames set how many frames to use (from 2 to 240) (default 30).
	Frames(frames int) PhotosensitivityBuilder
	// F set how many frames to use (from 2 to 240) (default 30).
	F(f int) PhotosensitivityBuilder
	// Threshold set detection threshold factor (lower is stricter) (from 0.1 to FLT_MAX) (default 1).
	Threshold(threshold float32) PhotosensitivityBuilder
	// T set detection threshold factor (lower is stricter) (from 0.1 to FLT_MAX) (default 1).
	T(t float32) PhotosensitivityBuilder
	// Skip set pixels to skip when sampling frames (from 1 to 1024) (default 1).
	Skip(skip int) PhotosensitivityBuilder
	// Bypass leave frames unchanged (default false).
	Bypass(bypass bool) PhotosensitivityBuilder
}

// Photosensitivity creates a new PhotosensitivityBuilder to configure the "photosensitivity" filter.
func Photosensitivity(opts ...filter.Option) PhotosensitivityBuilder {
	return &implPhotosensitivityBuilder{
		f: filter.New("photosensitivity", 1, opts...),
	}
}

type implPhotosensitivityBuilder struct {
	f filter.Filter
}

func (photosensitivityBuilder *implPhotosensitivityBuilder) String() string {
	return photosensitivityBuilder.f.String()
}

func (photosensitivityBuilder *implPhotosensitivityBuilder) Outputs() int {
	return photosensitivityBuilder.f.Outputs()
}

func (photosensitivityBuilder *implPhotosensitivityBuilder) With(key string, value expr.Expr) filter.Filter {
	return photosensitivityBuilder.withOption(key, value)
}

func (photosensitivityBuilder *implPhotosensitivityBuilder) withOption(key string, value expr.Expr) PhotosensitivityBuilder {
	bCopy := *photosensitivityBuilder
	bCopy.f = photosensitivityBuilder.f.With(key, value)
	return &bCopy
}

func (photosensitivityBuilder *implPhotosensitivityBuilder) Frames(frames int) PhotosensitivityBuilder {
	return photosensitivityBuilder.withOption("frames", expr.Int(frames))
}

func (photosensitivityBuilder *implPhotosensitivityBuilder) F(f int) PhotosensitivityBuilder {
	return photosensitivityBuilder.withOption("f", expr.Int(f))
}

func (photosensitivityBuilder *implPhotosensitivityBuilder) Threshold(threshold float32) PhotosensitivityBuilder {
	return photosensitivityBuilder.withOption("threshold", expr.Float(threshold))
}

func (photosensitivityBuilder *implPhotosensitivityBuilder) T(t float32) PhotosensitivityBuilder {
	return photosensitivityBuilder.withOption("t", expr.Float(t))
}

func (photosensitivityBuilder *implPhotosensitivityBuilder) Skip(skip int) PhotosensitivityBuilder {
	return photosensitivityBuilder.withOption("skip", expr.Int(skip))
}

func (photosensitivityBuilder *implPhotosensitivityBuilder) Bypass(bypass bool) PhotosensitivityBuilder {
	return photosensitivityBuilder.withOption("bypass", expr.Bool(bypass))
}
