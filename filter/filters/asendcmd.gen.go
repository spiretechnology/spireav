// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// AsendcmdBuilder Send commands to filters.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#asendcmd
type AsendcmdBuilder interface {
	filter.Filter
	// Commands set commands.
	Commands(commands string) AsendcmdBuilder
	// C set commands.
	C(c string) AsendcmdBuilder
	// Filename set commands file.
	Filename(filename string) AsendcmdBuilder
	// F set commands file.
	F(f string) AsendcmdBuilder
}

// Asendcmd creates a new AsendcmdBuilder to configure the "asendcmd" filter.
func Asendcmd(opts ...filter.Option) AsendcmdBuilder {
	return &implAsendcmdBuilder{
		f: filter.New("asendcmd", 1, opts...),
	}
}

type implAsendcmdBuilder struct {
	f filter.Filter
}

func (asendcmdBuilder *implAsendcmdBuilder) String() string {
	return asendcmdBuilder.f.String()
}

func (asendcmdBuilder *implAsendcmdBuilder) Outputs() int {
	return asendcmdBuilder.f.Outputs()
}

func (asendcmdBuilder *implAsendcmdBuilder) With(key string, value expr.Expr) filter.Filter {
	return asendcmdBuilder.withOption(key, value)
}

func (asendcmdBuilder *implAsendcmdBuilder) withOption(key string, value expr.Expr) AsendcmdBuilder {
	bCopy := *asendcmdBuilder
	bCopy.f = asendcmdBuilder.f.With(key, value)
	return &bCopy
}

func (asendcmdBuilder *implAsendcmdBuilder) Commands(commands string) AsendcmdBuilder {
	return asendcmdBuilder.withOption("commands", expr.String(commands))
}

func (asendcmdBuilder *implAsendcmdBuilder) C(c string) AsendcmdBuilder {
	return asendcmdBuilder.withOption("c", expr.String(c))
}

func (asendcmdBuilder *implAsendcmdBuilder) Filename(filename string) AsendcmdBuilder {
	return asendcmdBuilder.withOption("filename", expr.String(filename))
}

func (asendcmdBuilder *implAsendcmdBuilder) F(f string) AsendcmdBuilder {
	return asendcmdBuilder.withOption("f", expr.String(f))
}
