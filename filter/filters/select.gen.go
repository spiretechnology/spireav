// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// SelectBuilder Select video frames to pass in output.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#select
type SelectBuilder interface {
	filter.Filter
	// Expr set an expression to use for selecting frames (default "1").
	Expr(expression string) SelectBuilder
	// E set an expression to use for selecting frames (default "1").
	E(e string) SelectBuilder
	// N set the number of outputs (from 1 to INT_MAX) (default 1).
	N(n int) SelectBuilder
}

// Select creates a new SelectBuilder to configure the "select" filter.
func Select(outputs int, opts ...filter.Option) SelectBuilder {
	f := filter.New("select", outputs, opts...)
	f = f.With("outputs", expr.Int(outputs))
	return &implSelectBuilder{f: f}
}

type implSelectBuilder struct {
	f filter.Filter
}

func (selectBuilder *implSelectBuilder) String() string {
	return selectBuilder.f.String()
}

func (selectBuilder *implSelectBuilder) Outputs() int {
	return selectBuilder.f.Outputs()
}

func (selectBuilder *implSelectBuilder) With(key string, value expr.Expr) filter.Filter {
	return selectBuilder.withOption(key, value)
}

func (selectBuilder *implSelectBuilder) withOption(key string, value expr.Expr) SelectBuilder {
	bCopy := *selectBuilder
	bCopy.f = selectBuilder.f.With(key, value)
	return &bCopy
}

func (selectBuilder *implSelectBuilder) Expr(expression string) SelectBuilder {
	return selectBuilder.withOption("expr", expr.String(expression))
}

func (selectBuilder *implSelectBuilder) E(e string) SelectBuilder {
	return selectBuilder.withOption("e", expr.String(e))
}

func (selectBuilder *implSelectBuilder) N(n int) SelectBuilder {
	return selectBuilder.withOption("n", expr.Int(n))
}
