// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// HsvholdBuilder Turns a certain HSV range into gray.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#hsvhold
type HsvholdBuilder interface {
	filter.Filter
	// Hue set the hue value (from -360 to 360) (default 0).
	Hue(hue float32) HsvholdBuilder
	// HueExpr set the hue value (from -360 to 360) (default 0).
	HueExpr(hue expr.Expr) HsvholdBuilder
	// Sat set the saturation value (from -1 to 1) (default 0).
	Sat(sat float32) HsvholdBuilder
	// SatExpr set the saturation value (from -1 to 1) (default 0).
	SatExpr(sat expr.Expr) HsvholdBuilder
	// Val set the value value (from -1 to 1) (default 0).
	Val(val float32) HsvholdBuilder
	// ValExpr set the value value (from -1 to 1) (default 0).
	ValExpr(val expr.Expr) HsvholdBuilder
	// Similarity set the hsvhold similarity value (from 1e-05 to 1) (default 0.01).
	Similarity(similarity float32) HsvholdBuilder
	// SimilarityExpr set the hsvhold similarity value (from 1e-05 to 1) (default 0.01).
	SimilarityExpr(similarity expr.Expr) HsvholdBuilder
	// Blend set the hsvhold blend value (from 0 to 1) (default 0).
	Blend(blend float32) HsvholdBuilder
	// BlendExpr set the hsvhold blend value (from 0 to 1) (default 0).
	BlendExpr(blend expr.Expr) HsvholdBuilder
}

// Hsvhold creates a new HsvholdBuilder to configure the "hsvhold" filter.
func Hsvhold(opts ...filter.Option) HsvholdBuilder {
	return &implHsvholdBuilder{
		f: filter.New("hsvhold", 1, opts...),
	}
}

type implHsvholdBuilder struct {
	f filter.Filter
}

func (hsvholdBuilder *implHsvholdBuilder) String() string {
	return hsvholdBuilder.f.String()
}

func (hsvholdBuilder *implHsvholdBuilder) Outputs() int {
	return hsvholdBuilder.f.Outputs()
}

func (hsvholdBuilder *implHsvholdBuilder) With(key string, value expr.Expr) filter.Filter {
	return hsvholdBuilder.withOption(key, value)
}

func (hsvholdBuilder *implHsvholdBuilder) withOption(key string, value expr.Expr) HsvholdBuilder {
	bCopy := *hsvholdBuilder
	bCopy.f = hsvholdBuilder.f.With(key, value)
	return &bCopy
}

func (hsvholdBuilder *implHsvholdBuilder) Hue(hue float32) HsvholdBuilder {
	return hsvholdBuilder.withOption("hue", expr.Float(hue))
}

func (hsvholdBuilder *implHsvholdBuilder) HueExpr(hue expr.Expr) HsvholdBuilder {
	return hsvholdBuilder.withOption("hue", hue)
}

func (hsvholdBuilder *implHsvholdBuilder) Sat(sat float32) HsvholdBuilder {
	return hsvholdBuilder.withOption("sat", expr.Float(sat))
}

func (hsvholdBuilder *implHsvholdBuilder) SatExpr(sat expr.Expr) HsvholdBuilder {
	return hsvholdBuilder.withOption("sat", sat)
}

func (hsvholdBuilder *implHsvholdBuilder) Val(val float32) HsvholdBuilder {
	return hsvholdBuilder.withOption("val", expr.Float(val))
}

func (hsvholdBuilder *implHsvholdBuilder) ValExpr(val expr.Expr) HsvholdBuilder {
	return hsvholdBuilder.withOption("val", val)
}

func (hsvholdBuilder *implHsvholdBuilder) Similarity(similarity float32) HsvholdBuilder {
	return hsvholdBuilder.withOption("similarity", expr.Float(similarity))
}

func (hsvholdBuilder *implHsvholdBuilder) SimilarityExpr(similarity expr.Expr) HsvholdBuilder {
	return hsvholdBuilder.withOption("similarity", similarity)
}

func (hsvholdBuilder *implHsvholdBuilder) Blend(blend float32) HsvholdBuilder {
	return hsvholdBuilder.withOption("blend", expr.Float(blend))
}

func (hsvholdBuilder *implHsvholdBuilder) BlendExpr(blend expr.Expr) HsvholdBuilder {
	return hsvholdBuilder.withOption("blend", blend)
}
