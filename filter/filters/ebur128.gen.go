// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// Ebur128Builder EBU R128 scanner.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#ebur128
type Ebur128Builder interface {
	filter.Filter
	// Video set video output (default false).
	Video(video bool) Ebur128Builder
	// Size set video size (default "640x480").
	Size(size expr.Size) Ebur128Builder
	// Meter set scale meter (+9 to +18) (from 9 to 18) (default 9).
	Meter(meter int) Ebur128Builder
	// Framelog force frame logging level (from INT_MIN to INT_MAX) (default -1).
	Framelog(framelog int) Ebur128Builder
	// Metadata inject metadata in the filtergraph (default false).
	Metadata(metadata bool) Ebur128Builder
	// Peak set peak mode (default 0).
	Peak(peak string) Ebur128Builder
	// Dualmono treat mono input files as dual-mono (default false).
	Dualmono(dualmono bool) Ebur128Builder
	// Panlaw set a specific pan law for dual-mono files (from -10 to 0) (default -3.0103).
	Panlaw(panlaw float64) Ebur128Builder
	// Target set a specific target level in LUFS (-23 to 0) (from -23 to 0) (default -23).
	Target(target int) Ebur128Builder
	// Gauge set gauge display type (from 0 to 1) (default momentary).
	Gauge(gauge int) Ebur128Builder
	// Scale sets display method for the stats (from 0 to 1) (default absolute).
	Scale(scale int) Ebur128Builder
	// Integrated integrated loudness (LUFS) (from -DBL_MAX to DBL_MAX) (default 0).
	Integrated(integrated float64) Ebur128Builder
	// Range loudness range (LU) (from -DBL_MAX to DBL_MAX) (default 0).
	Range(rng float64) Ebur128Builder
	// LraLow LRA low (LUFS) (from -DBL_MAX to DBL_MAX) (default 0).
	LraLow(lraLow float64) Ebur128Builder
	// LraHigh LRA high (LUFS) (from -DBL_MAX to DBL_MAX) (default 0).
	LraHigh(lraHigh float64) Ebur128Builder
	// SamplePeak sample peak (dBFS) (from -DBL_MAX to DBL_MAX) (default 0).
	SamplePeak(samplePeak float64) Ebur128Builder
	// TruePeak true peak (dBFS) (from -DBL_MAX to DBL_MAX) (default 0).
	TruePeak(truePeak float64) Ebur128Builder
}

// Ebur128 creates a new Ebur128Builder to configure the "ebur128" filter.
func Ebur128(outputs int, opts ...filter.Option) Ebur128Builder {
	f := filter.New("ebur128", outputs, opts...)
	f = f.With("outputs", expr.Int(outputs))
	return &implEbur128Builder{f: f}
}

type implEbur128Builder struct {
	f filter.Filter
}

func (ebur128Builder *implEbur128Builder) String() string {
	return ebur128Builder.f.String()
}

func (ebur128Builder *implEbur128Builder) Outputs() int {
	return ebur128Builder.f.Outputs()
}

func (ebur128Builder *implEbur128Builder) With(key string, value expr.Expr) filter.Filter {
	return ebur128Builder.withOption(key, value)
}

func (ebur128Builder *implEbur128Builder) withOption(key string, value expr.Expr) Ebur128Builder {
	bCopy := *ebur128Builder
	bCopy.f = ebur128Builder.f.With(key, value)
	return &bCopy
}

func (ebur128Builder *implEbur128Builder) Video(video bool) Ebur128Builder {
	return ebur128Builder.withOption("video", expr.Bool(video))
}

func (ebur128Builder *implEbur128Builder) Size(size expr.Size) Ebur128Builder {
	return ebur128Builder.withOption("size", size)
}

func (ebur128Builder *implEbur128Builder) Meter(meter int) Ebur128Builder {
	return ebur128Builder.withOption("meter", expr.Int(meter))
}

func (ebur128Builder *implEbur128Builder) Framelog(framelog int) Ebur128Builder {
	return ebur128Builder.withOption("framelog", expr.Int(framelog))
}

func (ebur128Builder *implEbur128Builder) Metadata(metadata bool) Ebur128Builder {
	return ebur128Builder.withOption("metadata", expr.Bool(metadata))
}

func (ebur128Builder *implEbur128Builder) Peak(peak string) Ebur128Builder {
	return ebur128Builder.withOption("peak", expr.String(peak))
}

func (ebur128Builder *implEbur128Builder) Dualmono(dualmono bool) Ebur128Builder {
	return ebur128Builder.withOption("dualmono", expr.Bool(dualmono))
}

func (ebur128Builder *implEbur128Builder) Panlaw(panlaw float64) Ebur128Builder {
	return ebur128Builder.withOption("panlaw", expr.Double(panlaw))
}

func (ebur128Builder *implEbur128Builder) Target(target int) Ebur128Builder {
	return ebur128Builder.withOption("target", expr.Int(target))
}

func (ebur128Builder *implEbur128Builder) Gauge(gauge int) Ebur128Builder {
	return ebur128Builder.withOption("gauge", expr.Int(gauge))
}

func (ebur128Builder *implEbur128Builder) Scale(scale int) Ebur128Builder {
	return ebur128Builder.withOption("scale", expr.Int(scale))
}

func (ebur128Builder *implEbur128Builder) Integrated(integrated float64) Ebur128Builder {
	return ebur128Builder.withOption("integrated", expr.Double(integrated))
}

func (ebur128Builder *implEbur128Builder) Range(rng float64) Ebur128Builder {
	return ebur128Builder.withOption("range", expr.Double(rng))
}

func (ebur128Builder *implEbur128Builder) LraLow(lraLow float64) Ebur128Builder {
	return ebur128Builder.withOption("lra_low", expr.Double(lraLow))
}

func (ebur128Builder *implEbur128Builder) LraHigh(lraHigh float64) Ebur128Builder {
	return ebur128Builder.withOption("lra_high", expr.Double(lraHigh))
}

func (ebur128Builder *implEbur128Builder) SamplePeak(samplePeak float64) Ebur128Builder {
	return ebur128Builder.withOption("sample_peak", expr.Double(samplePeak))
}

func (ebur128Builder *implEbur128Builder) TruePeak(truePeak float64) Ebur128Builder {
	return ebur128Builder.withOption("true_peak", expr.Double(truePeak))
}
