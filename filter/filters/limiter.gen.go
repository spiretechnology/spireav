// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// LimiterBuilder Limit pixels components to the specified range.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#limiter
type LimiterBuilder interface {
	filter.Filter
	// Min set min value (from 0 to 65535) (default 0).
	Min(min int) LimiterBuilder
	// MinExpr set min value (from 0 to 65535) (default 0).
	MinExpr(min expr.Expr) LimiterBuilder
	// Max set max value (from 0 to 65535) (default 65535).
	Max(max int) LimiterBuilder
	// MaxExpr set max value (from 0 to 65535) (default 65535).
	MaxExpr(max expr.Expr) LimiterBuilder
	// Planes set planes (from 0 to 15) (default 15).
	Planes(planes int) LimiterBuilder
	// PlanesExpr set planes (from 0 to 15) (default 15).
	PlanesExpr(planes expr.Expr) LimiterBuilder
}

// Limiter creates a new LimiterBuilder to configure the "limiter" filter.
func Limiter(opts ...filter.Option) LimiterBuilder {
	return &implLimiterBuilder{
		f: filter.New("limiter", 1, opts...),
	}
}

type implLimiterBuilder struct {
	f filter.Filter
}

func (limiterBuilder *implLimiterBuilder) String() string {
	return limiterBuilder.f.String()
}

func (limiterBuilder *implLimiterBuilder) Outputs() int {
	return limiterBuilder.f.Outputs()
}

func (limiterBuilder *implLimiterBuilder) With(key string, value expr.Expr) filter.Filter {
	return limiterBuilder.withOption(key, value)
}

func (limiterBuilder *implLimiterBuilder) withOption(key string, value expr.Expr) LimiterBuilder {
	bCopy := *limiterBuilder
	bCopy.f = limiterBuilder.f.With(key, value)
	return &bCopy
}

func (limiterBuilder *implLimiterBuilder) Min(min int) LimiterBuilder {
	return limiterBuilder.withOption("min", expr.Int(min))
}

func (limiterBuilder *implLimiterBuilder) MinExpr(min expr.Expr) LimiterBuilder {
	return limiterBuilder.withOption("min", min)
}

func (limiterBuilder *implLimiterBuilder) Max(max int) LimiterBuilder {
	return limiterBuilder.withOption("max", expr.Int(max))
}

func (limiterBuilder *implLimiterBuilder) MaxExpr(max expr.Expr) LimiterBuilder {
	return limiterBuilder.withOption("max", max)
}

func (limiterBuilder *implLimiterBuilder) Planes(planes int) LimiterBuilder {
	return limiterBuilder.withOption("planes", expr.Int(planes))
}

func (limiterBuilder *implLimiterBuilder) PlanesExpr(planes expr.Expr) LimiterBuilder {
	return limiterBuilder.withOption("planes", planes)
}
