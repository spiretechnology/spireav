// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// ApulsatorBuilder Audio pulsator.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#apulsator
type ApulsatorBuilder interface {
	filter.Filter
	// LevelIn set input gain (from 0.015625 to 64) (default 1).
	LevelIn(levelIn float64) ApulsatorBuilder
	// LevelOut set output gain (from 0.015625 to 64) (default 1).
	LevelOut(levelOut float64) ApulsatorBuilder
	// Mode set mode (from 0 to 4) (default sine).
	Mode(mode int) ApulsatorBuilder
	// Amount set modulation (from 0 to 1) (default 1).
	Amount(amount float64) ApulsatorBuilder
	// OffsetL set offset L (from 0 to 1) (default 0).
	OffsetL(offsetL float64) ApulsatorBuilder
	// OffsetR set offset R (from 0 to 1) (default 0.5).
	OffsetR(offsetR float64) ApulsatorBuilder
	// Width set pulse width (from 0 to 2) (default 1).
	Width(width float64) ApulsatorBuilder
	// Timing set timing (from 0 to 2) (default hz).
	Timing(timing int) ApulsatorBuilder
	// Bpm set BPM (from 30 to 300) (default 120).
	Bpm(bpm float64) ApulsatorBuilder
	// Ms set ms (from 10 to 2000) (default 500).
	Ms(ms int) ApulsatorBuilder
	// Hz set frequency (from 0.01 to 100) (default 2).
	Hz(hz float64) ApulsatorBuilder
}

// Apulsator creates a new ApulsatorBuilder to configure the "apulsator" filter.
func Apulsator(opts ...filter.Option) ApulsatorBuilder {
	return &implApulsatorBuilder{
		f: filter.New("apulsator", 1, opts...),
	}
}

type implApulsatorBuilder struct {
	f filter.Filter
}

func (apulsatorBuilder *implApulsatorBuilder) String() string {
	return apulsatorBuilder.f.String()
}

func (apulsatorBuilder *implApulsatorBuilder) Outputs() int {
	return apulsatorBuilder.f.Outputs()
}

func (apulsatorBuilder *implApulsatorBuilder) With(key string, value expr.Expr) filter.Filter {
	return apulsatorBuilder.withOption(key, value)
}

func (apulsatorBuilder *implApulsatorBuilder) withOption(key string, value expr.Expr) ApulsatorBuilder {
	bCopy := *apulsatorBuilder
	bCopy.f = apulsatorBuilder.f.With(key, value)
	return &bCopy
}

func (apulsatorBuilder *implApulsatorBuilder) LevelIn(levelIn float64) ApulsatorBuilder {
	return apulsatorBuilder.withOption("level_in", expr.Double(levelIn))
}

func (apulsatorBuilder *implApulsatorBuilder) LevelOut(levelOut float64) ApulsatorBuilder {
	return apulsatorBuilder.withOption("level_out", expr.Double(levelOut))
}

func (apulsatorBuilder *implApulsatorBuilder) Mode(mode int) ApulsatorBuilder {
	return apulsatorBuilder.withOption("mode", expr.Int(mode))
}

func (apulsatorBuilder *implApulsatorBuilder) Amount(amount float64) ApulsatorBuilder {
	return apulsatorBuilder.withOption("amount", expr.Double(amount))
}

func (apulsatorBuilder *implApulsatorBuilder) OffsetL(offsetL float64) ApulsatorBuilder {
	return apulsatorBuilder.withOption("offset_l", expr.Double(offsetL))
}

func (apulsatorBuilder *implApulsatorBuilder) OffsetR(offsetR float64) ApulsatorBuilder {
	return apulsatorBuilder.withOption("offset_r", expr.Double(offsetR))
}

func (apulsatorBuilder *implApulsatorBuilder) Width(width float64) ApulsatorBuilder {
	return apulsatorBuilder.withOption("width", expr.Double(width))
}

func (apulsatorBuilder *implApulsatorBuilder) Timing(timing int) ApulsatorBuilder {
	return apulsatorBuilder.withOption("timing", expr.Int(timing))
}

func (apulsatorBuilder *implApulsatorBuilder) Bpm(bpm float64) ApulsatorBuilder {
	return apulsatorBuilder.withOption("bpm", expr.Double(bpm))
}

func (apulsatorBuilder *implApulsatorBuilder) Ms(ms int) ApulsatorBuilder {
	return apulsatorBuilder.withOption("ms", expr.Int(ms))
}

func (apulsatorBuilder *implApulsatorBuilder) Hz(hz float64) ApulsatorBuilder {
	return apulsatorBuilder.withOption("hz", expr.Double(hz))
}
