// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// TelecineBuilder Apply a telecine pattern.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#telecine
type TelecineBuilder interface {
	filter.Filter
	// FirstField select first field (from 0 to 1) (default top).
	FirstField(firstField int) TelecineBuilder
	// Pattern pattern that describe for how many fields a frame is to be displayed (default "23").
	Pattern(pattern string) TelecineBuilder
}

// Telecine creates a new TelecineBuilder to configure the "telecine" filter.
func Telecine(opts ...filter.Option) TelecineBuilder {
	return &implTelecineBuilder{
		f: filter.New("telecine", 1, opts...),
	}
}

type implTelecineBuilder struct {
	f filter.Filter
}

func (telecineBuilder *implTelecineBuilder) String() string {
	return telecineBuilder.f.String()
}

func (telecineBuilder *implTelecineBuilder) Outputs() int {
	return telecineBuilder.f.Outputs()
}

func (telecineBuilder *implTelecineBuilder) With(key string, value expr.Expr) filter.Filter {
	return telecineBuilder.withOption(key, value)
}

func (telecineBuilder *implTelecineBuilder) withOption(key string, value expr.Expr) TelecineBuilder {
	bCopy := *telecineBuilder
	bCopy.f = telecineBuilder.f.With(key, value)
	return &bCopy
}

func (telecineBuilder *implTelecineBuilder) FirstField(firstField int) TelecineBuilder {
	return telecineBuilder.withOption("first_field", expr.Int(firstField))
}

func (telecineBuilder *implTelecineBuilder) Pattern(pattern string) TelecineBuilder {
	return telecineBuilder.withOption("pattern", expr.String(pattern))
}
