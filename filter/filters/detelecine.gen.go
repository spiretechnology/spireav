// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// DetelecineBuilder Apply an inverse telecine pattern.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#detelecine
type DetelecineBuilder interface {
	filter.Filter
	// FirstField select first field (from 0 to 1) (default top).
	FirstField(firstField int) DetelecineBuilder
	// Pattern pattern that describe for how many fields a frame is to be displayed (default "23").
	Pattern(pattern string) DetelecineBuilder
	// StartFrame position of first frame with respect to the pattern if stream is cut (from 0 to 13) (default 0).
	StartFrame(startFrame int) DetelecineBuilder
}

// Detelecine creates a new DetelecineBuilder to configure the "detelecine" filter.
func Detelecine(opts ...filter.Option) DetelecineBuilder {
	return &implDetelecineBuilder{
		f: filter.New("detelecine", 1, opts...),
	}
}

type implDetelecineBuilder struct {
	f filter.Filter
}

func (detelecineBuilder *implDetelecineBuilder) String() string {
	return detelecineBuilder.f.String()
}

func (detelecineBuilder *implDetelecineBuilder) Outputs() int {
	return detelecineBuilder.f.Outputs()
}

func (detelecineBuilder *implDetelecineBuilder) With(key string, value expr.Expr) filter.Filter {
	return detelecineBuilder.withOption(key, value)
}

func (detelecineBuilder *implDetelecineBuilder) withOption(key string, value expr.Expr) DetelecineBuilder {
	bCopy := *detelecineBuilder
	bCopy.f = detelecineBuilder.f.With(key, value)
	return &bCopy
}

func (detelecineBuilder *implDetelecineBuilder) FirstField(firstField int) DetelecineBuilder {
	return detelecineBuilder.withOption("first_field", expr.Int(firstField))
}

func (detelecineBuilder *implDetelecineBuilder) Pattern(pattern string) DetelecineBuilder {
	return detelecineBuilder.withOption("pattern", expr.String(pattern))
}

func (detelecineBuilder *implDetelecineBuilder) StartFrame(startFrame int) DetelecineBuilder {
	return detelecineBuilder.withOption("start_frame", expr.Int(startFrame))
}
