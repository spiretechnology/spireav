// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"time"

	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// AllyuvBuilder Generate all yuv colors.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#allyuv
type AllyuvBuilder interface {
	filter.Filter
	// Rate set video rate (default "25").
	Rate(rate expr.Rational) AllyuvBuilder
	// R set video rate (default "25").
	R(r expr.Rational) AllyuvBuilder
	// Duration set video duration (default -0.000001).
	Duration(duration time.Duration) AllyuvBuilder
	// D set video duration (default -0.000001).
	D(d time.Duration) AllyuvBuilder
	// Sar set video sample aspect ratio (from 0 to INT_MAX) (default 1/1).
	Sar(sar expr.Rational) AllyuvBuilder
}

// Allyuv creates a new AllyuvBuilder to configure the "allyuv" filter.
func Allyuv(opts ...filter.Option) AllyuvBuilder {
	return &implAllyuvBuilder{
		f: filter.New("allyuv", 1, opts...),
	}
}

type implAllyuvBuilder struct {
	f filter.Filter
}

func (allyuvBuilder *implAllyuvBuilder) String() string {
	return allyuvBuilder.f.String()
}

func (allyuvBuilder *implAllyuvBuilder) Outputs() int {
	return allyuvBuilder.f.Outputs()
}

func (allyuvBuilder *implAllyuvBuilder) With(key string, value expr.Expr) filter.Filter {
	return allyuvBuilder.withOption(key, value)
}

func (allyuvBuilder *implAllyuvBuilder) withOption(key string, value expr.Expr) AllyuvBuilder {
	bCopy := *allyuvBuilder
	bCopy.f = allyuvBuilder.f.With(key, value)
	return &bCopy
}

func (allyuvBuilder *implAllyuvBuilder) Rate(rate expr.Rational) AllyuvBuilder {
	return allyuvBuilder.withOption("rate", rate)
}

func (allyuvBuilder *implAllyuvBuilder) R(r expr.Rational) AllyuvBuilder {
	return allyuvBuilder.withOption("r", r)
}

func (allyuvBuilder *implAllyuvBuilder) Duration(duration time.Duration) AllyuvBuilder {
	return allyuvBuilder.withOption("duration", expr.Duration(duration))
}

func (allyuvBuilder *implAllyuvBuilder) D(d time.Duration) AllyuvBuilder {
	return allyuvBuilder.withOption("d", expr.Duration(d))
}

func (allyuvBuilder *implAllyuvBuilder) Sar(sar expr.Rational) AllyuvBuilder {
	return allyuvBuilder.withOption("sar", sar)
}
