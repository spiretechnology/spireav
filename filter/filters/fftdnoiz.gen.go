// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// FftdnoizBuilder Denoise frames using 3D FFT.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#fftdnoiz
type FftdnoizBuilder interface {
	filter.Filter
	// Sigma set denoise strength (from 0 to 100) (default 1).
	Sigma(sigma float32) FftdnoizBuilder
	// SigmaExpr set denoise strength (from 0 to 100) (default 1).
	SigmaExpr(sigma expr.Expr) FftdnoizBuilder
	// Amount set amount of denoising (from 0.01 to 1) (default 1).
	Amount(amount float32) FftdnoizBuilder
	// AmountExpr set amount of denoising (from 0.01 to 1) (default 1).
	AmountExpr(amount expr.Expr) FftdnoizBuilder
	// Block set block size (from 8 to 256) (default 32).
	Block(block int) FftdnoizBuilder
	// Overlap set block overlap (from 0.2 to 0.8) (default 0.5).
	Overlap(overlap float32) FftdnoizBuilder
	// Method set method of denoising (from 0 to 1) (default wiener).
	Method(method int) FftdnoizBuilder
	// MethodExpr set method of denoising (from 0 to 1) (default wiener).
	MethodExpr(method expr.Expr) FftdnoizBuilder
	// Prev set number of previous frames for temporal denoising (from 0 to 1) (default 0).
	Prev(prev int) FftdnoizBuilder
	// Next set number of next frames for temporal denoising (from 0 to 1) (default 0).
	Next(next int) FftdnoizBuilder
	// Planes set planes to filter (from 0 to 15) (default 7).
	Planes(planes int) FftdnoizBuilder
	// PlanesExpr set planes to filter (from 0 to 15) (default 7).
	PlanesExpr(planes expr.Expr) FftdnoizBuilder
	// Window set window function (from 0 to 20) (default hann).
	Window(window int) FftdnoizBuilder
	// Enable expression to enable or disable the filter.
	Enable(enable expr.Expr) FftdnoizBuilder
}

// Fftdnoiz creates a new FftdnoizBuilder to configure the "fftdnoiz" filter.
func Fftdnoiz(opts ...filter.Option) FftdnoizBuilder {
	return &implFftdnoizBuilder{
		f: filter.New("fftdnoiz", 1, opts...),
	}
}

type implFftdnoizBuilder struct {
	f filter.Filter
}

func (fftdnoizBuilder *implFftdnoizBuilder) String() string {
	return fftdnoizBuilder.f.String()
}

func (fftdnoizBuilder *implFftdnoizBuilder) Outputs() int {
	return fftdnoizBuilder.f.Outputs()
}

func (fftdnoizBuilder *implFftdnoizBuilder) With(key string, value expr.Expr) filter.Filter {
	return fftdnoizBuilder.withOption(key, value)
}

func (fftdnoizBuilder *implFftdnoizBuilder) withOption(key string, value expr.Expr) FftdnoizBuilder {
	bCopy := *fftdnoizBuilder
	bCopy.f = fftdnoizBuilder.f.With(key, value)
	return &bCopy
}

func (fftdnoizBuilder *implFftdnoizBuilder) Sigma(sigma float32) FftdnoizBuilder {
	return fftdnoizBuilder.withOption("sigma", expr.Float(sigma))
}

func (fftdnoizBuilder *implFftdnoizBuilder) SigmaExpr(sigma expr.Expr) FftdnoizBuilder {
	return fftdnoizBuilder.withOption("sigma", sigma)
}

func (fftdnoizBuilder *implFftdnoizBuilder) Amount(amount float32) FftdnoizBuilder {
	return fftdnoizBuilder.withOption("amount", expr.Float(amount))
}

func (fftdnoizBuilder *implFftdnoizBuilder) AmountExpr(amount expr.Expr) FftdnoizBuilder {
	return fftdnoizBuilder.withOption("amount", amount)
}

func (fftdnoizBuilder *implFftdnoizBuilder) Block(block int) FftdnoizBuilder {
	return fftdnoizBuilder.withOption("block", expr.Int(block))
}

func (fftdnoizBuilder *implFftdnoizBuilder) Overlap(overlap float32) FftdnoizBuilder {
	return fftdnoizBuilder.withOption("overlap", expr.Float(overlap))
}

func (fftdnoizBuilder *implFftdnoizBuilder) Method(method int) FftdnoizBuilder {
	return fftdnoizBuilder.withOption("method", expr.Int(method))
}

func (fftdnoizBuilder *implFftdnoizBuilder) MethodExpr(method expr.Expr) FftdnoizBuilder {
	return fftdnoizBuilder.withOption("method", method)
}

func (fftdnoizBuilder *implFftdnoizBuilder) Prev(prev int) FftdnoizBuilder {
	return fftdnoizBuilder.withOption("prev", expr.Int(prev))
}

func (fftdnoizBuilder *implFftdnoizBuilder) Next(next int) FftdnoizBuilder {
	return fftdnoizBuilder.withOption("next", expr.Int(next))
}

func (fftdnoizBuilder *implFftdnoizBuilder) Planes(planes int) FftdnoizBuilder {
	return fftdnoizBuilder.withOption("planes", expr.Int(planes))
}

func (fftdnoizBuilder *implFftdnoizBuilder) PlanesExpr(planes expr.Expr) FftdnoizBuilder {
	return fftdnoizBuilder.withOption("planes", planes)
}

func (fftdnoizBuilder *implFftdnoizBuilder) Window(window int) FftdnoizBuilder {
	return fftdnoizBuilder.withOption("window", expr.Int(window))
}

func (fftdnoizBuilder *implFftdnoizBuilder) Enable(enable expr.Expr) FftdnoizBuilder {
	return fftdnoizBuilder.withOption("enable", enable)
}
