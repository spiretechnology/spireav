// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// RgbashiftBuilder Shift RGBA.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#rgbashift
type RgbashiftBuilder interface {
	filter.Filter
	// Rh shift red horizontally (from -255 to 255) (default 0).
	Rh(rh int) RgbashiftBuilder
	// RhExpr shift red horizontally (from -255 to 255) (default 0).
	RhExpr(rh expr.Expr) RgbashiftBuilder
	// Rv shift red vertically (from -255 to 255) (default 0).
	Rv(rv int) RgbashiftBuilder
	// RvExpr shift red vertically (from -255 to 255) (default 0).
	RvExpr(rv expr.Expr) RgbashiftBuilder
	// Gh shift green horizontally (from -255 to 255) (default 0).
	Gh(gh int) RgbashiftBuilder
	// GhExpr shift green horizontally (from -255 to 255) (default 0).
	GhExpr(gh expr.Expr) RgbashiftBuilder
	// Gv shift green vertically (from -255 to 255) (default 0).
	Gv(gv int) RgbashiftBuilder
	// GvExpr shift green vertically (from -255 to 255) (default 0).
	GvExpr(gv expr.Expr) RgbashiftBuilder
	// Bh shift blue horizontally (from -255 to 255) (default 0).
	Bh(bh int) RgbashiftBuilder
	// BhExpr shift blue horizontally (from -255 to 255) (default 0).
	BhExpr(bh expr.Expr) RgbashiftBuilder
	// Bv shift blue vertically (from -255 to 255) (default 0).
	Bv(bv int) RgbashiftBuilder
	// BvExpr shift blue vertically (from -255 to 255) (default 0).
	BvExpr(bv expr.Expr) RgbashiftBuilder
	// Ah shift alpha horizontally (from -255 to 255) (default 0).
	Ah(ah int) RgbashiftBuilder
	// AhExpr shift alpha horizontally (from -255 to 255) (default 0).
	AhExpr(ah expr.Expr) RgbashiftBuilder
	// Av shift alpha vertically (from -255 to 255) (default 0).
	Av(av int) RgbashiftBuilder
	// AvExpr shift alpha vertically (from -255 to 255) (default 0).
	AvExpr(av expr.Expr) RgbashiftBuilder
	// Edge set edge operation (from 0 to 1) (default smear).
	Edge(edge int) RgbashiftBuilder
	// EdgeExpr set edge operation (from 0 to 1) (default smear).
	EdgeExpr(edge expr.Expr) RgbashiftBuilder
}

// Rgbashift creates a new RgbashiftBuilder to configure the "rgbashift" filter.
func Rgbashift(opts ...filter.Option) RgbashiftBuilder {
	return &implRgbashiftBuilder{
		f: filter.New("rgbashift", 1, opts...),
	}
}

type implRgbashiftBuilder struct {
	f filter.Filter
}

func (rgbashiftBuilder *implRgbashiftBuilder) String() string {
	return rgbashiftBuilder.f.String()
}

func (rgbashiftBuilder *implRgbashiftBuilder) Outputs() int {
	return rgbashiftBuilder.f.Outputs()
}

func (rgbashiftBuilder *implRgbashiftBuilder) With(key string, value expr.Expr) filter.Filter {
	return rgbashiftBuilder.withOption(key, value)
}

func (rgbashiftBuilder *implRgbashiftBuilder) withOption(key string, value expr.Expr) RgbashiftBuilder {
	bCopy := *rgbashiftBuilder
	bCopy.f = rgbashiftBuilder.f.With(key, value)
	return &bCopy
}

func (rgbashiftBuilder *implRgbashiftBuilder) Rh(rh int) RgbashiftBuilder {
	return rgbashiftBuilder.withOption("rh", expr.Int(rh))
}

func (rgbashiftBuilder *implRgbashiftBuilder) RhExpr(rh expr.Expr) RgbashiftBuilder {
	return rgbashiftBuilder.withOption("rh", rh)
}

func (rgbashiftBuilder *implRgbashiftBuilder) Rv(rv int) RgbashiftBuilder {
	return rgbashiftBuilder.withOption("rv", expr.Int(rv))
}

func (rgbashiftBuilder *implRgbashiftBuilder) RvExpr(rv expr.Expr) RgbashiftBuilder {
	return rgbashiftBuilder.withOption("rv", rv)
}

func (rgbashiftBuilder *implRgbashiftBuilder) Gh(gh int) RgbashiftBuilder {
	return rgbashiftBuilder.withOption("gh", expr.Int(gh))
}

func (rgbashiftBuilder *implRgbashiftBuilder) GhExpr(gh expr.Expr) RgbashiftBuilder {
	return rgbashiftBuilder.withOption("gh", gh)
}

func (rgbashiftBuilder *implRgbashiftBuilder) Gv(gv int) RgbashiftBuilder {
	return rgbashiftBuilder.withOption("gv", expr.Int(gv))
}

func (rgbashiftBuilder *implRgbashiftBuilder) GvExpr(gv expr.Expr) RgbashiftBuilder {
	return rgbashiftBuilder.withOption("gv", gv)
}

func (rgbashiftBuilder *implRgbashiftBuilder) Bh(bh int) RgbashiftBuilder {
	return rgbashiftBuilder.withOption("bh", expr.Int(bh))
}

func (rgbashiftBuilder *implRgbashiftBuilder) BhExpr(bh expr.Expr) RgbashiftBuilder {
	return rgbashiftBuilder.withOption("bh", bh)
}

func (rgbashiftBuilder *implRgbashiftBuilder) Bv(bv int) RgbashiftBuilder {
	return rgbashiftBuilder.withOption("bv", expr.Int(bv))
}

func (rgbashiftBuilder *implRgbashiftBuilder) BvExpr(bv expr.Expr) RgbashiftBuilder {
	return rgbashiftBuilder.withOption("bv", bv)
}

func (rgbashiftBuilder *implRgbashiftBuilder) Ah(ah int) RgbashiftBuilder {
	return rgbashiftBuilder.withOption("ah", expr.Int(ah))
}

func (rgbashiftBuilder *implRgbashiftBuilder) AhExpr(ah expr.Expr) RgbashiftBuilder {
	return rgbashiftBuilder.withOption("ah", ah)
}

func (rgbashiftBuilder *implRgbashiftBuilder) Av(av int) RgbashiftBuilder {
	return rgbashiftBuilder.withOption("av", expr.Int(av))
}

func (rgbashiftBuilder *implRgbashiftBuilder) AvExpr(av expr.Expr) RgbashiftBuilder {
	return rgbashiftBuilder.withOption("av", av)
}

func (rgbashiftBuilder *implRgbashiftBuilder) Edge(edge int) RgbashiftBuilder {
	return rgbashiftBuilder.withOption("edge", expr.Int(edge))
}

func (rgbashiftBuilder *implRgbashiftBuilder) EdgeExpr(edge expr.Expr) RgbashiftBuilder {
	return rgbashiftBuilder.withOption("edge", edge)
}
