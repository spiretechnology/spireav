// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// ScaleBuilder Scale the input video size and/or convert the image format.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#scale
type ScaleBuilder interface {
	filter.Filter
	// W Output video width.
	W(w string) ScaleBuilder
	// WExpr Output video width.
	WExpr(w expr.Expr) ScaleBuilder
	// Width Output video width.
	Width(width string) ScaleBuilder
	// WidthExpr Output video width.
	WidthExpr(width expr.Expr) ScaleBuilder
	// H Output video height.
	H(h string) ScaleBuilder
	// HExpr Output video height.
	HExpr(h expr.Expr) ScaleBuilder
	// Height Output video height.
	Height(height string) ScaleBuilder
	// HeightExpr Output video height.
	HeightExpr(height expr.Expr) ScaleBuilder
	// Flags Flags to pass to libswscale (default "").
	Flags(flags string) ScaleBuilder
	// Interl set interlacing (default false).
	Interl(interl bool) ScaleBuilder
	// InColorMatrix set input YCbCr type (from -1 to 14) (default auto).
	InColorMatrix(inColorMatrix int) ScaleBuilder
	// OutColorMatrix set output YCbCr type (from 0 to 14) (default 2).
	OutColorMatrix(outColorMatrix int) ScaleBuilder
	// InRange set input color range (from 0 to 2) (default auto).
	InRange(inRange int) ScaleBuilder
	// OutRange set output color range (from 0 to 2) (default auto).
	OutRange(outRange int) ScaleBuilder
	// InVChrPos input vertical chroma position in luma grid/256 (from -513 to 512) (default -513).
	InVChrPos(inVChrPos int) ScaleBuilder
	// InHChrPos input horizontal chroma position in luma grid/256 (from -513 to 512) (default -513).
	InHChrPos(inHChrPos int) ScaleBuilder
	// OutVChrPos output vertical chroma position in luma grid/256 (from -513 to 512) (default -513).
	OutVChrPos(outVChrPos int) ScaleBuilder
	// OutHChrPos output horizontal chroma position in luma grid/256 (from -513 to 512) (default -513).
	OutHChrPos(outHChrPos int) ScaleBuilder
	// ForceOriginalAspectRatio decrease or increase w/h if necessary to keep the original AR (from 0 to 2) (default disable).
	ForceOriginalAspectRatio(forceOriginalAspectRatio int) ScaleBuilder
	// ForceDivisibleBy enforce that the output resolution is divisible by a defined integer when force_original_aspect_ratio is used (from 1 to 256) (default 1).
	ForceDivisibleBy(forceDivisibleBy int) ScaleBuilder
	// Param0 Scaler param 0 (from -DBL_MAX to DBL_MAX) (default DBL_MAX).
	Param0(param0 float64) ScaleBuilder
	// Param1 Scaler param 1 (from -DBL_MAX to DBL_MAX) (default DBL_MAX).
	Param1(param1 float64) ScaleBuilder
	// Eval specify when to evaluate expressions (from 0 to 1) (default init).
	Eval(eval int) ScaleBuilder
}

// Scale creates a new ScaleBuilder to configure the "scale" filter.
func Scale(opts ...filter.Option) ScaleBuilder {
	return &implScaleBuilder{
		f: filter.New("scale", 1, opts...),
	}
}

type implScaleBuilder struct {
	f filter.Filter
}

func (scaleBuilder *implScaleBuilder) String() string {
	return scaleBuilder.f.String()
}

func (scaleBuilder *implScaleBuilder) Outputs() int {
	return scaleBuilder.f.Outputs()
}

func (scaleBuilder *implScaleBuilder) With(key string, value expr.Expr) filter.Filter {
	return scaleBuilder.withOption(key, value)
}

func (scaleBuilder *implScaleBuilder) withOption(key string, value expr.Expr) ScaleBuilder {
	bCopy := *scaleBuilder
	bCopy.f = scaleBuilder.f.With(key, value)
	return &bCopy
}

func (scaleBuilder *implScaleBuilder) W(w string) ScaleBuilder {
	return scaleBuilder.withOption("w", expr.String(w))
}

func (scaleBuilder *implScaleBuilder) WExpr(w expr.Expr) ScaleBuilder {
	return scaleBuilder.withOption("w", w)
}

func (scaleBuilder *implScaleBuilder) Width(width string) ScaleBuilder {
	return scaleBuilder.withOption("width", expr.String(width))
}

func (scaleBuilder *implScaleBuilder) WidthExpr(width expr.Expr) ScaleBuilder {
	return scaleBuilder.withOption("width", width)
}

func (scaleBuilder *implScaleBuilder) H(h string) ScaleBuilder {
	return scaleBuilder.withOption("h", expr.String(h))
}

func (scaleBuilder *implScaleBuilder) HExpr(h expr.Expr) ScaleBuilder {
	return scaleBuilder.withOption("h", h)
}

func (scaleBuilder *implScaleBuilder) Height(height string) ScaleBuilder {
	return scaleBuilder.withOption("height", expr.String(height))
}

func (scaleBuilder *implScaleBuilder) HeightExpr(height expr.Expr) ScaleBuilder {
	return scaleBuilder.withOption("height", height)
}

func (scaleBuilder *implScaleBuilder) Flags(flags string) ScaleBuilder {
	return scaleBuilder.withOption("flags", expr.String(flags))
}

func (scaleBuilder *implScaleBuilder) Interl(interl bool) ScaleBuilder {
	return scaleBuilder.withOption("interl", expr.Bool(interl))
}

func (scaleBuilder *implScaleBuilder) InColorMatrix(inColorMatrix int) ScaleBuilder {
	return scaleBuilder.withOption("in_color_matrix", expr.Int(inColorMatrix))
}

func (scaleBuilder *implScaleBuilder) OutColorMatrix(outColorMatrix int) ScaleBuilder {
	return scaleBuilder.withOption("out_color_matrix", expr.Int(outColorMatrix))
}

func (scaleBuilder *implScaleBuilder) InRange(inRange int) ScaleBuilder {
	return scaleBuilder.withOption("in_range", expr.Int(inRange))
}

func (scaleBuilder *implScaleBuilder) OutRange(outRange int) ScaleBuilder {
	return scaleBuilder.withOption("out_range", expr.Int(outRange))
}

func (scaleBuilder *implScaleBuilder) InVChrPos(inVChrPos int) ScaleBuilder {
	return scaleBuilder.withOption("in_v_chr_pos", expr.Int(inVChrPos))
}

func (scaleBuilder *implScaleBuilder) InHChrPos(inHChrPos int) ScaleBuilder {
	return scaleBuilder.withOption("in_h_chr_pos", expr.Int(inHChrPos))
}

func (scaleBuilder *implScaleBuilder) OutVChrPos(outVChrPos int) ScaleBuilder {
	return scaleBuilder.withOption("out_v_chr_pos", expr.Int(outVChrPos))
}

func (scaleBuilder *implScaleBuilder) OutHChrPos(outHChrPos int) ScaleBuilder {
	return scaleBuilder.withOption("out_h_chr_pos", expr.Int(outHChrPos))
}

func (scaleBuilder *implScaleBuilder) ForceOriginalAspectRatio(forceOriginalAspectRatio int) ScaleBuilder {
	return scaleBuilder.withOption("force_original_aspect_ratio", expr.Int(forceOriginalAspectRatio))
}

func (scaleBuilder *implScaleBuilder) ForceDivisibleBy(forceDivisibleBy int) ScaleBuilder {
	return scaleBuilder.withOption("force_divisible_by", expr.Int(forceDivisibleBy))
}

func (scaleBuilder *implScaleBuilder) Param0(param0 float64) ScaleBuilder {
	return scaleBuilder.withOption("param0", expr.Double(param0))
}

func (scaleBuilder *implScaleBuilder) Param1(param1 float64) ScaleBuilder {
	return scaleBuilder.withOption("param1", expr.Double(param1))
}

func (scaleBuilder *implScaleBuilder) Eval(eval int) ScaleBuilder {
	return scaleBuilder.withOption("eval", expr.Int(eval))
}
