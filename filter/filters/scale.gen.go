// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// ScaleBuilder corresponds to the "scale" FFmpeg filter.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#scale
type ScaleBuilder interface {
	filter.Filter
	// Width sets the "w" option on the filter.
	Width(width expr.Expr) ScaleBuilder
	// WidthInt sets the "w" option on the filter.
	WidthInt(width int) ScaleBuilder
	// Height sets the "h" option on the filter.
	Height(height expr.Expr) ScaleBuilder
	// HeightInt sets the "h" option on the filter.
	HeightInt(height int) ScaleBuilder
	// EvalOn sets the "eval" option on the filter.
	EvalOn(evalOn string) ScaleBuilder
	// EvalOnInit sets the "eval" option on the filter.
	EvalOnInit() ScaleBuilder
	// EvalOnFrame sets the "eval" option on the filter.
	EvalOnFrame() ScaleBuilder
	// Interlace sets the "interl" option on the filter.
	Interlace() ScaleBuilder
	// IncreaseToPreserveAspectRatio sets the "force_original_aspect_ratio" option on the filter.
	IncreaseToPreserveAspectRatio() ScaleBuilder
	// DecreaseToPreserveAspectRatio sets the "force_original_aspect_ratio" option on the filter.
	DecreaseToPreserveAspectRatio() ScaleBuilder
	// IgnoreAspectRatio sets the "force_original_aspect_ratio" option on the filter.
	IgnoreAspectRatio() ScaleBuilder
	// ForceDivisibleBy sets the "force_divisible_by" option on the filter.
	ForceDivisibleBy(forceDivisibleBy int) ScaleBuilder
}

// Scale creates a new ScaleBuilder to configure the "scale" filter.
func Scale(opts ...filter.Option) ScaleBuilder {
	return &implScaleBuilder{
		f: filter.New("scale", 1, opts...),
	}
}

type implScaleBuilder struct {
	f filter.Filter
}

func (b *implScaleBuilder) String() string {
	return b.f.String()
}

func (b *implScaleBuilder) Outputs() int {
	return b.f.Outputs()
}

func (b *implScaleBuilder) With(key string, value expr.Expr) filter.Filter {
	return b.withOption(key, value)
}

func (b *implScaleBuilder) withOption(key string, value expr.Expr) ScaleBuilder {
	bCopy := *b
	bCopy.f = b.f.With(key, value)
	return &bCopy
}

func (b *implScaleBuilder) Width(width expr.Expr) ScaleBuilder {
	return b.withOption("w", width)
}

func (b *implScaleBuilder) WidthInt(width int) ScaleBuilder {
	return b.withOption("w", expr.Int(width))
}

func (b *implScaleBuilder) Height(height expr.Expr) ScaleBuilder {
	return b.withOption("h", height)
}

func (b *implScaleBuilder) HeightInt(height int) ScaleBuilder {
	return b.withOption("h", expr.Int(height))
}

func (b *implScaleBuilder) EvalOn(evalOn string) ScaleBuilder {
	return b.withOption("eval", expr.String(evalOn))
}

func (b *implScaleBuilder) EvalOnInit() ScaleBuilder {
	return b.withOption("eval", "init")
}

func (b *implScaleBuilder) EvalOnFrame() ScaleBuilder {
	return b.withOption("eval", "frame")
}

func (b *implScaleBuilder) Interlace() ScaleBuilder {
	return b.withOption("interl", "1")
}

func (b *implScaleBuilder) IncreaseToPreserveAspectRatio() ScaleBuilder {
	return b.withOption("force_original_aspect_ratio", "increase")
}

func (b *implScaleBuilder) DecreaseToPreserveAspectRatio() ScaleBuilder {
	return b.withOption("force_original_aspect_ratio", "decrease")
}

func (b *implScaleBuilder) IgnoreAspectRatio() ScaleBuilder {
	return b.withOption("force_original_aspect_ratio", "disable")
}

func (b *implScaleBuilder) ForceDivisibleBy(forceDivisibleBy int) ScaleBuilder {
	return b.withOption("force_divisible_by", expr.Int(forceDivisibleBy))
}
