// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// DedotBuilder Reduce cross-luminance and cross-color.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#dedot
type DedotBuilder interface {
	filter.Filter
	// M set filtering mode (default dotcrawl+rainbows).
	M(m ...string) DedotBuilder
	// Lt set spatial luma threshold (from 0 to 1) (default 0.079).
	Lt(lt float32) DedotBuilder
	// Tl set tolerance for temporal luma (from 0 to 1) (default 0.079).
	Tl(tl float32) DedotBuilder
	// Tc set tolerance for chroma temporal variation (from 0 to 1) (default 0.058).
	Tc(tc float32) DedotBuilder
	// Ct set temporal chroma threshold (from 0 to 1) (default 0.019).
	Ct(ct float32) DedotBuilder
	// Enable expression to enable or disable the filter.
	Enable(enable expr.Expr) DedotBuilder
}

// Dedot creates a new DedotBuilder to configure the "dedot" filter.
func Dedot(opts ...filter.Option) DedotBuilder {
	return &implDedotBuilder{
		f: filter.New("dedot", 1, opts...),
	}
}

type implDedotBuilder struct {
	f filter.Filter
}

func (dedotBuilder *implDedotBuilder) String() string {
	return dedotBuilder.f.String()
}

func (dedotBuilder *implDedotBuilder) Outputs() int {
	return dedotBuilder.f.Outputs()
}

func (dedotBuilder *implDedotBuilder) With(key string, value expr.Expr) filter.Filter {
	return dedotBuilder.withOption(key, value)
}

func (dedotBuilder *implDedotBuilder) withOption(key string, value expr.Expr) DedotBuilder {
	bCopy := *dedotBuilder
	bCopy.f = dedotBuilder.f.With(key, value)
	return &bCopy
}

func (dedotBuilder *implDedotBuilder) M(m ...string) DedotBuilder {
	return dedotBuilder.withOption("m", expr.Flags(m))
}

func (dedotBuilder *implDedotBuilder) Lt(lt float32) DedotBuilder {
	return dedotBuilder.withOption("lt", expr.Float(lt))
}

func (dedotBuilder *implDedotBuilder) Tl(tl float32) DedotBuilder {
	return dedotBuilder.withOption("tl", expr.Float(tl))
}

func (dedotBuilder *implDedotBuilder) Tc(tc float32) DedotBuilder {
	return dedotBuilder.withOption("tc", expr.Float(tc))
}

func (dedotBuilder *implDedotBuilder) Ct(ct float32) DedotBuilder {
	return dedotBuilder.withOption("ct", expr.Float(ct))
}

func (dedotBuilder *implDedotBuilder) Enable(enable expr.Expr) DedotBuilder {
	return dedotBuilder.withOption("enable", enable)
}
