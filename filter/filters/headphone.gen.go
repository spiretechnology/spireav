// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// HeadphoneBuilder Apply headphone binaural spatialization with HRTFs in additional streams.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#headphone
type HeadphoneBuilder interface {
	filter.Filter
	// Map set channels convolution mappings.
	Map(mapVal string) HeadphoneBuilder
	// Gain set gain in dB (from -20 to 40) (default 0).
	Gain(gain float32) HeadphoneBuilder
	// Lfe set lfe gain in dB (from -20 to 40) (default 0).
	Lfe(lfe float32) HeadphoneBuilder
	// Type set processing (from 0 to 1) (default freq).
	Type(typ int) HeadphoneBuilder
	// Size set frame size (from 1024 to 96000) (default 1024).
	Size(size int) HeadphoneBuilder
	// Hrir set hrir format (from 0 to 1) (default stereo).
	Hrir(hrir int) HeadphoneBuilder
}

// Headphone creates a new HeadphoneBuilder to configure the "headphone" filter.
func Headphone(opts ...filter.Option) HeadphoneBuilder {
	return &implHeadphoneBuilder{
		f: filter.New("headphone", 1, opts...),
	}
}

type implHeadphoneBuilder struct {
	f filter.Filter
}

func (headphoneBuilder *implHeadphoneBuilder) String() string {
	return headphoneBuilder.f.String()
}

func (headphoneBuilder *implHeadphoneBuilder) Outputs() int {
	return headphoneBuilder.f.Outputs()
}

func (headphoneBuilder *implHeadphoneBuilder) With(key string, value expr.Expr) filter.Filter {
	return headphoneBuilder.withOption(key, value)
}

func (headphoneBuilder *implHeadphoneBuilder) withOption(key string, value expr.Expr) HeadphoneBuilder {
	bCopy := *headphoneBuilder
	bCopy.f = headphoneBuilder.f.With(key, value)
	return &bCopy
}

func (headphoneBuilder *implHeadphoneBuilder) Map(mapVal string) HeadphoneBuilder {
	return headphoneBuilder.withOption("map", expr.String(mapVal))
}

func (headphoneBuilder *implHeadphoneBuilder) Gain(gain float32) HeadphoneBuilder {
	return headphoneBuilder.withOption("gain", expr.Float(gain))
}

func (headphoneBuilder *implHeadphoneBuilder) Lfe(lfe float32) HeadphoneBuilder {
	return headphoneBuilder.withOption("lfe", expr.Float(lfe))
}

func (headphoneBuilder *implHeadphoneBuilder) Type(typ int) HeadphoneBuilder {
	return headphoneBuilder.withOption("type", expr.Int(typ))
}

func (headphoneBuilder *implHeadphoneBuilder) Size(size int) HeadphoneBuilder {
	return headphoneBuilder.withOption("size", expr.Int(size))
}

func (headphoneBuilder *implHeadphoneBuilder) Hrir(hrir int) HeadphoneBuilder {
	return headphoneBuilder.withOption("hrir", expr.Int(hrir))
}
