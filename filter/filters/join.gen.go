// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// JoinBuilder Join multiple audio streams into multi-channel output.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#join
type JoinBuilder interface {
	filter.Filter
	// Inputs Number of input streams. (from 1 to INT_MAX) (default 2).
	Inputs(inputs int) JoinBuilder
	// ChannelLayout Channel layout of the output stream. (default "stereo").
	ChannelLayout(channelLayout expr.ChannelLayout) JoinBuilder
	// Map A comma-separated list of channels maps in the format 'input_stream.input_channel-output_channel..
	Map(mapVal string) JoinBuilder
}

// Join creates a new JoinBuilder to configure the "join" filter.
func Join(opts ...filter.Option) JoinBuilder {
	return &implJoinBuilder{
		f: filter.New("join", 1, opts...),
	}
}

type implJoinBuilder struct {
	f filter.Filter
}

func (joinBuilder *implJoinBuilder) String() string {
	return joinBuilder.f.String()
}

func (joinBuilder *implJoinBuilder) Outputs() int {
	return joinBuilder.f.Outputs()
}

func (joinBuilder *implJoinBuilder) With(key string, value expr.Expr) filter.Filter {
	return joinBuilder.withOption(key, value)
}

func (joinBuilder *implJoinBuilder) withOption(key string, value expr.Expr) JoinBuilder {
	bCopy := *joinBuilder
	bCopy.f = joinBuilder.f.With(key, value)
	return &bCopy
}

func (joinBuilder *implJoinBuilder) Inputs(inputs int) JoinBuilder {
	return joinBuilder.withOption("inputs", expr.Int(inputs))
}

func (joinBuilder *implJoinBuilder) ChannelLayout(channelLayout expr.ChannelLayout) JoinBuilder {
	return joinBuilder.withOption("channel_layout", channelLayout)
}

func (joinBuilder *implJoinBuilder) Map(mapVal string) JoinBuilder {
	return joinBuilder.withOption("map", expr.String(mapVal))
}
