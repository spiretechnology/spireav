// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// SignatureBuilder Calculate the MPEG-7 video signature.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#signature
type SignatureBuilder interface {
	filter.Filter
	// Detectmode set the detectmode (from 0 to 2) (default off).
	Detectmode(detectmode int) SignatureBuilder
	// NbInputs number of inputs (from 1 to INT_MAX) (default 1).
	NbInputs(nbInputs int) SignatureBuilder
	// Filename filename for output files (default "").
	Filename(filename string) SignatureBuilder
	// Format set output format (from 0 to 1) (default binary).
	Format(format int) SignatureBuilder
	// ThD threshold to detect one word as similar (from 1 to INT_MAX) (default 9000).
	ThD(thD int) SignatureBuilder
	// ThDc threshold to detect all words as similar (from 1 to INT_MAX) (default 60000).
	ThDc(thDc int) SignatureBuilder
	// ThXh threshold to detect frames as similar (from 1 to INT_MAX) (default 116).
	ThXh(thXh int) SignatureBuilder
	// ThDi minimum length of matching sequence in frames (from 0 to INT_MAX) (default 0).
	ThDi(thDi int) SignatureBuilder
	// ThIt threshold for relation of good to all frames (from 0 to 1) (default 0.5).
	ThIt(thIt float64) SignatureBuilder
}

// Signature creates a new SignatureBuilder to configure the "signature" filter.
func Signature(opts ...filter.Option) SignatureBuilder {
	return &implSignatureBuilder{
		f: filter.New("signature", 1, opts...),
	}
}

type implSignatureBuilder struct {
	f filter.Filter
}

func (signatureBuilder *implSignatureBuilder) String() string {
	return signatureBuilder.f.String()
}

func (signatureBuilder *implSignatureBuilder) Outputs() int {
	return signatureBuilder.f.Outputs()
}

func (signatureBuilder *implSignatureBuilder) With(key string, value expr.Expr) filter.Filter {
	return signatureBuilder.withOption(key, value)
}

func (signatureBuilder *implSignatureBuilder) withOption(key string, value expr.Expr) SignatureBuilder {
	bCopy := *signatureBuilder
	bCopy.f = signatureBuilder.f.With(key, value)
	return &bCopy
}

func (signatureBuilder *implSignatureBuilder) Detectmode(detectmode int) SignatureBuilder {
	return signatureBuilder.withOption("detectmode", expr.Int(detectmode))
}

func (signatureBuilder *implSignatureBuilder) NbInputs(nbInputs int) SignatureBuilder {
	return signatureBuilder.withOption("nb_inputs", expr.Int(nbInputs))
}

func (signatureBuilder *implSignatureBuilder) Filename(filename string) SignatureBuilder {
	return signatureBuilder.withOption("filename", expr.String(filename))
}

func (signatureBuilder *implSignatureBuilder) Format(format int) SignatureBuilder {
	return signatureBuilder.withOption("format", expr.Int(format))
}

func (signatureBuilder *implSignatureBuilder) ThD(thD int) SignatureBuilder {
	return signatureBuilder.withOption("th_d", expr.Int(thD))
}

func (signatureBuilder *implSignatureBuilder) ThDc(thDc int) SignatureBuilder {
	return signatureBuilder.withOption("th_dc", expr.Int(thDc))
}

func (signatureBuilder *implSignatureBuilder) ThXh(thXh int) SignatureBuilder {
	return signatureBuilder.withOption("th_xh", expr.Int(thXh))
}

func (signatureBuilder *implSignatureBuilder) ThDi(thDi int) SignatureBuilder {
	return signatureBuilder.withOption("th_di", expr.Int(thDi))
}

func (signatureBuilder *implSignatureBuilder) ThIt(thIt float64) SignatureBuilder {
	return signatureBuilder.withOption("th_it", expr.Double(thIt))
}
