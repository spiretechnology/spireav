// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// FftfiltBuilder Apply arbitrary expressions to pixels in frequency domain.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#fftfilt
type FftfiltBuilder interface {
	filter.Filter
	// DcY adjust gain in Y plane (from 0 to 1000) (default 0).
	DcY(dcY int) FftfiltBuilder
	// DcU adjust gain in U plane (from 0 to 1000) (default 0).
	DcU(dcU int) FftfiltBuilder
	// DcV adjust gain in V plane (from 0 to 1000) (default 0).
	DcV(dcV int) FftfiltBuilder
	// WeightY set luminance expression in Y plane (default "1").
	WeightY(weightY string) FftfiltBuilder
	// WeightU set chrominance expression in U plane.
	WeightU(weightU string) FftfiltBuilder
	// WeightV set chrominance expression in V plane.
	WeightV(weightV string) FftfiltBuilder
	// Eval specify when to evaluate expressions (from 0 to 1) (default init).
	Eval(eval int) FftfiltBuilder
}

// Fftfilt creates a new FftfiltBuilder to configure the "fftfilt" filter.
func Fftfilt(opts ...filter.Option) FftfiltBuilder {
	return &implFftfiltBuilder{
		f: filter.New("fftfilt", 1, opts...),
	}
}

type implFftfiltBuilder struct {
	f filter.Filter
}

func (fftfiltBuilder *implFftfiltBuilder) String() string {
	return fftfiltBuilder.f.String()
}

func (fftfiltBuilder *implFftfiltBuilder) Outputs() int {
	return fftfiltBuilder.f.Outputs()
}

func (fftfiltBuilder *implFftfiltBuilder) With(key string, value expr.Expr) filter.Filter {
	return fftfiltBuilder.withOption(key, value)
}

func (fftfiltBuilder *implFftfiltBuilder) withOption(key string, value expr.Expr) FftfiltBuilder {
	bCopy := *fftfiltBuilder
	bCopy.f = fftfiltBuilder.f.With(key, value)
	return &bCopy
}

func (fftfiltBuilder *implFftfiltBuilder) DcY(dcY int) FftfiltBuilder {
	return fftfiltBuilder.withOption("dc_Y", expr.Int(dcY))
}

func (fftfiltBuilder *implFftfiltBuilder) DcU(dcU int) FftfiltBuilder {
	return fftfiltBuilder.withOption("dc_U", expr.Int(dcU))
}

func (fftfiltBuilder *implFftfiltBuilder) DcV(dcV int) FftfiltBuilder {
	return fftfiltBuilder.withOption("dc_V", expr.Int(dcV))
}

func (fftfiltBuilder *implFftfiltBuilder) WeightY(weightY string) FftfiltBuilder {
	return fftfiltBuilder.withOption("weight_Y", expr.String(weightY))
}

func (fftfiltBuilder *implFftfiltBuilder) WeightU(weightU string) FftfiltBuilder {
	return fftfiltBuilder.withOption("weight_U", expr.String(weightU))
}

func (fftfiltBuilder *implFftfiltBuilder) WeightV(weightV string) FftfiltBuilder {
	return fftfiltBuilder.withOption("weight_V", expr.String(weightV))
}

func (fftfiltBuilder *implFftfiltBuilder) Eval(eval int) FftfiltBuilder {
	return fftfiltBuilder.withOption("eval", expr.Int(eval))
}
