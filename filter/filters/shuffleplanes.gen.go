// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// ShuffleplanesBuilder Shuffle video planes.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#shuffleplanes
type ShuffleplanesBuilder interface {
	filter.Filter
	// Map0 Index of the input plane to be used as the first output plane  (from 0 to 3) (default 0).
	Map0(map0 int) ShuffleplanesBuilder
	// Map1 Index of the input plane to be used as the second output plane  (from 0 to 3) (default 1).
	Map1(map1 int) ShuffleplanesBuilder
	// Map2 Index of the input plane to be used as the third output plane  (from 0 to 3) (default 2).
	Map2(map2 int) ShuffleplanesBuilder
	// Map3 Index of the input plane to be used as the fourth output plane  (from 0 to 3) (default 3).
	Map3(map3 int) ShuffleplanesBuilder
	// Enable expression to enable or disable the filter.
	Enable(enable expr.Expr) ShuffleplanesBuilder
}

// Shuffleplanes creates a new ShuffleplanesBuilder to configure the "shuffleplanes" filter.
func Shuffleplanes(opts ...filter.Option) ShuffleplanesBuilder {
	return &implShuffleplanesBuilder{
		f: filter.New("shuffleplanes", 1, opts...),
	}
}

type implShuffleplanesBuilder struct {
	f filter.Filter
}

func (shuffleplanesBuilder *implShuffleplanesBuilder) String() string {
	return shuffleplanesBuilder.f.String()
}

func (shuffleplanesBuilder *implShuffleplanesBuilder) Outputs() int {
	return shuffleplanesBuilder.f.Outputs()
}

func (shuffleplanesBuilder *implShuffleplanesBuilder) With(key string, value expr.Expr) filter.Filter {
	return shuffleplanesBuilder.withOption(key, value)
}

func (shuffleplanesBuilder *implShuffleplanesBuilder) withOption(key string, value expr.Expr) ShuffleplanesBuilder {
	bCopy := *shuffleplanesBuilder
	bCopy.f = shuffleplanesBuilder.f.With(key, value)
	return &bCopy
}

func (shuffleplanesBuilder *implShuffleplanesBuilder) Map0(map0 int) ShuffleplanesBuilder {
	return shuffleplanesBuilder.withOption("map0", expr.Int(map0))
}

func (shuffleplanesBuilder *implShuffleplanesBuilder) Map1(map1 int) ShuffleplanesBuilder {
	return shuffleplanesBuilder.withOption("map1", expr.Int(map1))
}

func (shuffleplanesBuilder *implShuffleplanesBuilder) Map2(map2 int) ShuffleplanesBuilder {
	return shuffleplanesBuilder.withOption("map2", expr.Int(map2))
}

func (shuffleplanesBuilder *implShuffleplanesBuilder) Map3(map3 int) ShuffleplanesBuilder {
	return shuffleplanesBuilder.withOption("map3", expr.Int(map3))
}

func (shuffleplanesBuilder *implShuffleplanesBuilder) Enable(enable expr.Expr) ShuffleplanesBuilder {
	return shuffleplanesBuilder.withOption("enable", enable)
}
