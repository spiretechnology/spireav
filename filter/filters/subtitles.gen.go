// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// SubtitlesBuilder Render text subtitles onto input video using the libass library.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#subtitles
type SubtitlesBuilder interface {
	filter.Filter
	// Filename set the filename of file to read.
	Filename(filename string) SubtitlesBuilder
	// F set the filename of file to read.
	F(f string) SubtitlesBuilder
	// OriginalSize set the size of the original video (used to scale fonts).
	OriginalSize(originalSize expr.Size) SubtitlesBuilder
	// Fontsdir set the directory containing the fonts to read.
	Fontsdir(fontsdir string) SubtitlesBuilder
	// Alpha enable processing of alpha channel (default false).
	Alpha(alpha bool) SubtitlesBuilder
	// Charenc set input character encoding.
	Charenc(charenc string) SubtitlesBuilder
	// StreamIndex set stream index (from -1 to INT_MAX) (default -1).
	StreamIndex(streamIndex int) SubtitlesBuilder
	// Si set stream index (from -1 to INT_MAX) (default -1).
	Si(si int) SubtitlesBuilder
	// ForceStyle force subtitle style.
	ForceStyle(forceStyle string) SubtitlesBuilder
	// WrapUnicode break lines according to the Unicode Line Breaking Algorithm (default auto).
	WrapUnicode(wrapUnicode bool) SubtitlesBuilder
}

// Subtitles creates a new SubtitlesBuilder to configure the "subtitles" filter.
func Subtitles(opts ...filter.Option) SubtitlesBuilder {
	return &implSubtitlesBuilder{
		f: filter.New("subtitles", 1, opts...),
	}
}

type implSubtitlesBuilder struct {
	f filter.Filter
}

func (subtitlesBuilder *implSubtitlesBuilder) String() string {
	return subtitlesBuilder.f.String()
}

func (subtitlesBuilder *implSubtitlesBuilder) Outputs() int {
	return subtitlesBuilder.f.Outputs()
}

func (subtitlesBuilder *implSubtitlesBuilder) With(key string, value expr.Expr) filter.Filter {
	return subtitlesBuilder.withOption(key, value)
}

func (subtitlesBuilder *implSubtitlesBuilder) withOption(key string, value expr.Expr) SubtitlesBuilder {
	bCopy := *subtitlesBuilder
	bCopy.f = subtitlesBuilder.f.With(key, value)
	return &bCopy
}

func (subtitlesBuilder *implSubtitlesBuilder) Filename(filename string) SubtitlesBuilder {
	return subtitlesBuilder.withOption("filename", expr.String(filename))
}

func (subtitlesBuilder *implSubtitlesBuilder) F(f string) SubtitlesBuilder {
	return subtitlesBuilder.withOption("f", expr.String(f))
}

func (subtitlesBuilder *implSubtitlesBuilder) OriginalSize(originalSize expr.Size) SubtitlesBuilder {
	return subtitlesBuilder.withOption("original_size", originalSize)
}

func (subtitlesBuilder *implSubtitlesBuilder) Fontsdir(fontsdir string) SubtitlesBuilder {
	return subtitlesBuilder.withOption("fontsdir", expr.String(fontsdir))
}

func (subtitlesBuilder *implSubtitlesBuilder) Alpha(alpha bool) SubtitlesBuilder {
	return subtitlesBuilder.withOption("alpha", expr.Bool(alpha))
}

func (subtitlesBuilder *implSubtitlesBuilder) Charenc(charenc string) SubtitlesBuilder {
	return subtitlesBuilder.withOption("charenc", expr.String(charenc))
}

func (subtitlesBuilder *implSubtitlesBuilder) StreamIndex(streamIndex int) SubtitlesBuilder {
	return subtitlesBuilder.withOption("stream_index", expr.Int(streamIndex))
}

func (subtitlesBuilder *implSubtitlesBuilder) Si(si int) SubtitlesBuilder {
	return subtitlesBuilder.withOption("si", expr.Int(si))
}

func (subtitlesBuilder *implSubtitlesBuilder) ForceStyle(forceStyle string) SubtitlesBuilder {
	return subtitlesBuilder.withOption("force_style", expr.String(forceStyle))
}

func (subtitlesBuilder *implSubtitlesBuilder) WrapUnicode(wrapUnicode bool) SubtitlesBuilder {
	return subtitlesBuilder.withOption("wrap_unicode", expr.Bool(wrapUnicode))
}
