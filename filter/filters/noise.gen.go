// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// NoiseBuilder Add noise.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#noise
type NoiseBuilder interface {
	filter.Filter
	// AllSeed set component #0 noise seed (from -1 to INT_MAX) (default -1).
	AllSeed(allSeed int) NoiseBuilder
	// AllStrength set component #0 strength (from 0 to 100) (default 0).
	AllStrength(allStrength int) NoiseBuilder
	// Alls set component #0 strength (from 0 to 100) (default 0).
	Alls(alls int) NoiseBuilder
	// AllFlags set component #0 flags (default 0).
	AllFlags(allFlags string) NoiseBuilder
	// Allf set component #0 flags (default 0).
	Allf(allf string) NoiseBuilder
	// C0Seed set component #0 noise seed (from -1 to INT_MAX) (default -1).
	C0Seed(c0Seed int) NoiseBuilder
	// C0Strength set component #0 strength (from 0 to 100) (default 0).
	C0Strength(c0Strength int) NoiseBuilder
	// C0s set component #0 strength (from 0 to 100) (default 0).
	C0s(c0s int) NoiseBuilder
	// C0Flags set component #0 flags (default 0).
	C0Flags(c0Flags string) NoiseBuilder
	// C0f set component #0 flags (default 0).
	C0f(c0f string) NoiseBuilder
	// C1Seed set component #1 noise seed (from -1 to INT_MAX) (default -1).
	C1Seed(c1Seed int) NoiseBuilder
	// C1Strength set component #1 strength (from 0 to 100) (default 0).
	C1Strength(c1Strength int) NoiseBuilder
	// C1s set component #1 strength (from 0 to 100) (default 0).
	C1s(c1s int) NoiseBuilder
	// C1Flags set component #1 flags (default 0).
	C1Flags(c1Flags string) NoiseBuilder
	// C1f set component #1 flags (default 0).
	C1f(c1f string) NoiseBuilder
	// C2Seed set component #2 noise seed (from -1 to INT_MAX) (default -1).
	C2Seed(c2Seed int) NoiseBuilder
	// C2Strength set component #2 strength (from 0 to 100) (default 0).
	C2Strength(c2Strength int) NoiseBuilder
	// C2s set component #2 strength (from 0 to 100) (default 0).
	C2s(c2s int) NoiseBuilder
	// C2Flags set component #2 flags (default 0).
	C2Flags(c2Flags string) NoiseBuilder
	// C2f set component #2 flags (default 0).
	C2f(c2f string) NoiseBuilder
	// C3Seed set component #3 noise seed (from -1 to INT_MAX) (default -1).
	C3Seed(c3Seed int) NoiseBuilder
	// C3Strength set component #3 strength (from 0 to 100) (default 0).
	C3Strength(c3Strength int) NoiseBuilder
	// C3s set component #3 strength (from 0 to 100) (default 0).
	C3s(c3s int) NoiseBuilder
	// C3Flags set component #3 flags (default 0).
	C3Flags(c3Flags string) NoiseBuilder
	// C3f set component #3 flags (default 0).
	C3f(c3f string) NoiseBuilder
}

// Noise creates a new NoiseBuilder to configure the "noise" filter.
func Noise(opts ...filter.Option) NoiseBuilder {
	return &implNoiseBuilder{
		f: filter.New("noise", 1, opts...),
	}
}

type implNoiseBuilder struct {
	f filter.Filter
}

func (noiseBuilder *implNoiseBuilder) String() string {
	return noiseBuilder.f.String()
}

func (noiseBuilder *implNoiseBuilder) Outputs() int {
	return noiseBuilder.f.Outputs()
}

func (noiseBuilder *implNoiseBuilder) With(key string, value expr.Expr) filter.Filter {
	return noiseBuilder.withOption(key, value)
}

func (noiseBuilder *implNoiseBuilder) withOption(key string, value expr.Expr) NoiseBuilder {
	bCopy := *noiseBuilder
	bCopy.f = noiseBuilder.f.With(key, value)
	return &bCopy
}

func (noiseBuilder *implNoiseBuilder) AllSeed(allSeed int) NoiseBuilder {
	return noiseBuilder.withOption("all_seed", expr.Int(allSeed))
}

func (noiseBuilder *implNoiseBuilder) AllStrength(allStrength int) NoiseBuilder {
	return noiseBuilder.withOption("all_strength", expr.Int(allStrength))
}

func (noiseBuilder *implNoiseBuilder) Alls(alls int) NoiseBuilder {
	return noiseBuilder.withOption("alls", expr.Int(alls))
}

func (noiseBuilder *implNoiseBuilder) AllFlags(allFlags string) NoiseBuilder {
	return noiseBuilder.withOption("all_flags", expr.String(allFlags))
}

func (noiseBuilder *implNoiseBuilder) Allf(allf string) NoiseBuilder {
	return noiseBuilder.withOption("allf", expr.String(allf))
}

func (noiseBuilder *implNoiseBuilder) C0Seed(c0Seed int) NoiseBuilder {
	return noiseBuilder.withOption("c0_seed", expr.Int(c0Seed))
}

func (noiseBuilder *implNoiseBuilder) C0Strength(c0Strength int) NoiseBuilder {
	return noiseBuilder.withOption("c0_strength", expr.Int(c0Strength))
}

func (noiseBuilder *implNoiseBuilder) C0s(c0s int) NoiseBuilder {
	return noiseBuilder.withOption("c0s", expr.Int(c0s))
}

func (noiseBuilder *implNoiseBuilder) C0Flags(c0Flags string) NoiseBuilder {
	return noiseBuilder.withOption("c0_flags", expr.String(c0Flags))
}

func (noiseBuilder *implNoiseBuilder) C0f(c0f string) NoiseBuilder {
	return noiseBuilder.withOption("c0f", expr.String(c0f))
}

func (noiseBuilder *implNoiseBuilder) C1Seed(c1Seed int) NoiseBuilder {
	return noiseBuilder.withOption("c1_seed", expr.Int(c1Seed))
}

func (noiseBuilder *implNoiseBuilder) C1Strength(c1Strength int) NoiseBuilder {
	return noiseBuilder.withOption("c1_strength", expr.Int(c1Strength))
}

func (noiseBuilder *implNoiseBuilder) C1s(c1s int) NoiseBuilder {
	return noiseBuilder.withOption("c1s", expr.Int(c1s))
}

func (noiseBuilder *implNoiseBuilder) C1Flags(c1Flags string) NoiseBuilder {
	return noiseBuilder.withOption("c1_flags", expr.String(c1Flags))
}

func (noiseBuilder *implNoiseBuilder) C1f(c1f string) NoiseBuilder {
	return noiseBuilder.withOption("c1f", expr.String(c1f))
}

func (noiseBuilder *implNoiseBuilder) C2Seed(c2Seed int) NoiseBuilder {
	return noiseBuilder.withOption("c2_seed", expr.Int(c2Seed))
}

func (noiseBuilder *implNoiseBuilder) C2Strength(c2Strength int) NoiseBuilder {
	return noiseBuilder.withOption("c2_strength", expr.Int(c2Strength))
}

func (noiseBuilder *implNoiseBuilder) C2s(c2s int) NoiseBuilder {
	return noiseBuilder.withOption("c2s", expr.Int(c2s))
}

func (noiseBuilder *implNoiseBuilder) C2Flags(c2Flags string) NoiseBuilder {
	return noiseBuilder.withOption("c2_flags", expr.String(c2Flags))
}

func (noiseBuilder *implNoiseBuilder) C2f(c2f string) NoiseBuilder {
	return noiseBuilder.withOption("c2f", expr.String(c2f))
}

func (noiseBuilder *implNoiseBuilder) C3Seed(c3Seed int) NoiseBuilder {
	return noiseBuilder.withOption("c3_seed", expr.Int(c3Seed))
}

func (noiseBuilder *implNoiseBuilder) C3Strength(c3Strength int) NoiseBuilder {
	return noiseBuilder.withOption("c3_strength", expr.Int(c3Strength))
}

func (noiseBuilder *implNoiseBuilder) C3s(c3s int) NoiseBuilder {
	return noiseBuilder.withOption("c3s", expr.Int(c3s))
}

func (noiseBuilder *implNoiseBuilder) C3Flags(c3Flags string) NoiseBuilder {
	return noiseBuilder.withOption("c3_flags", expr.String(c3Flags))
}

func (noiseBuilder *implNoiseBuilder) C3f(c3f string) NoiseBuilder {
	return noiseBuilder.withOption("c3f", expr.String(c3f))
}
