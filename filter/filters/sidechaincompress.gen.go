// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// SidechaincompressBuilder Sidechain compressor.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#sidechaincompress
type SidechaincompressBuilder interface {
	filter.Filter
	// LevelIn set input gain (from 0.015625 to 64) (default 1).
	LevelIn(levelIn float64) SidechaincompressBuilder
	// LevelInExpr set input gain (from 0.015625 to 64) (default 1).
	LevelInExpr(levelIn expr.Expr) SidechaincompressBuilder
	// Mode set mode (from 0 to 1) (default downward).
	Mode(mode int) SidechaincompressBuilder
	// ModeExpr set mode (from 0 to 1) (default downward).
	ModeExpr(mode expr.Expr) SidechaincompressBuilder
	// Threshold set threshold (from 0.000976563 to 1) (default 0.125).
	Threshold(threshold float64) SidechaincompressBuilder
	// ThresholdExpr set threshold (from 0.000976563 to 1) (default 0.125).
	ThresholdExpr(threshold expr.Expr) SidechaincompressBuilder
	// Ratio set ratio (from 1 to 20) (default 2).
	Ratio(ratio float64) SidechaincompressBuilder
	// RatioExpr set ratio (from 1 to 20) (default 2).
	RatioExpr(ratio expr.Expr) SidechaincompressBuilder
	// Attack set attack (from 0.01 to 2000) (default 20).
	Attack(attack float64) SidechaincompressBuilder
	// AttackExpr set attack (from 0.01 to 2000) (default 20).
	AttackExpr(attack expr.Expr) SidechaincompressBuilder
	// Release set release (from 0.01 to 9000) (default 250).
	Release(release float64) SidechaincompressBuilder
	// ReleaseExpr set release (from 0.01 to 9000) (default 250).
	ReleaseExpr(release expr.Expr) SidechaincompressBuilder
	// Makeup set make up gain (from 1 to 64) (default 1).
	Makeup(makeup float64) SidechaincompressBuilder
	// MakeupExpr set make up gain (from 1 to 64) (default 1).
	MakeupExpr(makeup expr.Expr) SidechaincompressBuilder
	// Knee set knee (from 1 to 8) (default 2.82843).
	Knee(knee float64) SidechaincompressBuilder
	// KneeExpr set knee (from 1 to 8) (default 2.82843).
	KneeExpr(knee expr.Expr) SidechaincompressBuilder
	// Link set link type (from 0 to 1) (default average).
	Link(link int) SidechaincompressBuilder
	// LinkExpr set link type (from 0 to 1) (default average).
	LinkExpr(link expr.Expr) SidechaincompressBuilder
	// Detection set detection (from 0 to 1) (default rms).
	Detection(detection int) SidechaincompressBuilder
	// DetectionExpr set detection (from 0 to 1) (default rms).
	DetectionExpr(detection expr.Expr) SidechaincompressBuilder
	// LevelSc set sidechain gain (from 0.015625 to 64) (default 1).
	LevelSc(levelSc float64) SidechaincompressBuilder
	// LevelScExpr set sidechain gain (from 0.015625 to 64) (default 1).
	LevelScExpr(levelSc expr.Expr) SidechaincompressBuilder
	// Mix set mix (from 0 to 1) (default 1).
	Mix(mix float64) SidechaincompressBuilder
	// MixExpr set mix (from 0 to 1) (default 1).
	MixExpr(mix expr.Expr) SidechaincompressBuilder
}

// Sidechaincompress creates a new SidechaincompressBuilder to configure the "sidechaincompress" filter.
func Sidechaincompress(opts ...filter.Option) SidechaincompressBuilder {
	return &implSidechaincompressBuilder{
		f: filter.New("sidechaincompress", 1, opts...),
	}
}

type implSidechaincompressBuilder struct {
	f filter.Filter
}

func (sidechaincompressBuilder *implSidechaincompressBuilder) String() string {
	return sidechaincompressBuilder.f.String()
}

func (sidechaincompressBuilder *implSidechaincompressBuilder) Outputs() int {
	return sidechaincompressBuilder.f.Outputs()
}

func (sidechaincompressBuilder *implSidechaincompressBuilder) With(key string, value expr.Expr) filter.Filter {
	return sidechaincompressBuilder.withOption(key, value)
}

func (sidechaincompressBuilder *implSidechaincompressBuilder) withOption(key string, value expr.Expr) SidechaincompressBuilder {
	bCopy := *sidechaincompressBuilder
	bCopy.f = sidechaincompressBuilder.f.With(key, value)
	return &bCopy
}

func (sidechaincompressBuilder *implSidechaincompressBuilder) LevelIn(levelIn float64) SidechaincompressBuilder {
	return sidechaincompressBuilder.withOption("level_in", expr.Double(levelIn))
}

func (sidechaincompressBuilder *implSidechaincompressBuilder) LevelInExpr(levelIn expr.Expr) SidechaincompressBuilder {
	return sidechaincompressBuilder.withOption("level_in", levelIn)
}

func (sidechaincompressBuilder *implSidechaincompressBuilder) Mode(mode int) SidechaincompressBuilder {
	return sidechaincompressBuilder.withOption("mode", expr.Int(mode))
}

func (sidechaincompressBuilder *implSidechaincompressBuilder) ModeExpr(mode expr.Expr) SidechaincompressBuilder {
	return sidechaincompressBuilder.withOption("mode", mode)
}

func (sidechaincompressBuilder *implSidechaincompressBuilder) Threshold(threshold float64) SidechaincompressBuilder {
	return sidechaincompressBuilder.withOption("threshold", expr.Double(threshold))
}

func (sidechaincompressBuilder *implSidechaincompressBuilder) ThresholdExpr(threshold expr.Expr) SidechaincompressBuilder {
	return sidechaincompressBuilder.withOption("threshold", threshold)
}

func (sidechaincompressBuilder *implSidechaincompressBuilder) Ratio(ratio float64) SidechaincompressBuilder {
	return sidechaincompressBuilder.withOption("ratio", expr.Double(ratio))
}

func (sidechaincompressBuilder *implSidechaincompressBuilder) RatioExpr(ratio expr.Expr) SidechaincompressBuilder {
	return sidechaincompressBuilder.withOption("ratio", ratio)
}

func (sidechaincompressBuilder *implSidechaincompressBuilder) Attack(attack float64) SidechaincompressBuilder {
	return sidechaincompressBuilder.withOption("attack", expr.Double(attack))
}

func (sidechaincompressBuilder *implSidechaincompressBuilder) AttackExpr(attack expr.Expr) SidechaincompressBuilder {
	return sidechaincompressBuilder.withOption("attack", attack)
}

func (sidechaincompressBuilder *implSidechaincompressBuilder) Release(release float64) SidechaincompressBuilder {
	return sidechaincompressBuilder.withOption("release", expr.Double(release))
}

func (sidechaincompressBuilder *implSidechaincompressBuilder) ReleaseExpr(release expr.Expr) SidechaincompressBuilder {
	return sidechaincompressBuilder.withOption("release", release)
}

func (sidechaincompressBuilder *implSidechaincompressBuilder) Makeup(makeup float64) SidechaincompressBuilder {
	return sidechaincompressBuilder.withOption("makeup", expr.Double(makeup))
}

func (sidechaincompressBuilder *implSidechaincompressBuilder) MakeupExpr(makeup expr.Expr) SidechaincompressBuilder {
	return sidechaincompressBuilder.withOption("makeup", makeup)
}

func (sidechaincompressBuilder *implSidechaincompressBuilder) Knee(knee float64) SidechaincompressBuilder {
	return sidechaincompressBuilder.withOption("knee", expr.Double(knee))
}

func (sidechaincompressBuilder *implSidechaincompressBuilder) KneeExpr(knee expr.Expr) SidechaincompressBuilder {
	return sidechaincompressBuilder.withOption("knee", knee)
}

func (sidechaincompressBuilder *implSidechaincompressBuilder) Link(link int) SidechaincompressBuilder {
	return sidechaincompressBuilder.withOption("link", expr.Int(link))
}

func (sidechaincompressBuilder *implSidechaincompressBuilder) LinkExpr(link expr.Expr) SidechaincompressBuilder {
	return sidechaincompressBuilder.withOption("link", link)
}

func (sidechaincompressBuilder *implSidechaincompressBuilder) Detection(detection int) SidechaincompressBuilder {
	return sidechaincompressBuilder.withOption("detection", expr.Int(detection))
}

func (sidechaincompressBuilder *implSidechaincompressBuilder) DetectionExpr(detection expr.Expr) SidechaincompressBuilder {
	return sidechaincompressBuilder.withOption("detection", detection)
}

func (sidechaincompressBuilder *implSidechaincompressBuilder) LevelSc(levelSc float64) SidechaincompressBuilder {
	return sidechaincompressBuilder.withOption("level_sc", expr.Double(levelSc))
}

func (sidechaincompressBuilder *implSidechaincompressBuilder) LevelScExpr(levelSc expr.Expr) SidechaincompressBuilder {
	return sidechaincompressBuilder.withOption("level_sc", levelSc)
}

func (sidechaincompressBuilder *implSidechaincompressBuilder) Mix(mix float64) SidechaincompressBuilder {
	return sidechaincompressBuilder.withOption("mix", expr.Double(mix))
}

func (sidechaincompressBuilder *implSidechaincompressBuilder) MixExpr(mix expr.Expr) SidechaincompressBuilder {
	return sidechaincompressBuilder.withOption("mix", mix)
}
