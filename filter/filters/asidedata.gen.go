// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// AsidedataBuilder Manipulate audio frame side data.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#asidedata
type AsidedataBuilder interface {
	filter.Filter
	// Mode set a mode of operation (from 0 to 1) (default select).
	Mode(mode int) AsidedataBuilder
	// Type set side data type (from -1 to INT_MAX) (default -1).
	Type(typ int) AsidedataBuilder
	// Enable expression to enable or disable the filter.
	Enable(enable expr.Expr) AsidedataBuilder
}

// Asidedata creates a new AsidedataBuilder to configure the "asidedata" filter.
func Asidedata(opts ...filter.Option) AsidedataBuilder {
	return &implAsidedataBuilder{
		f: filter.New("asidedata", 1, opts...),
	}
}

type implAsidedataBuilder struct {
	f filter.Filter
}

func (asidedataBuilder *implAsidedataBuilder) String() string {
	return asidedataBuilder.f.String()
}

func (asidedataBuilder *implAsidedataBuilder) Outputs() int {
	return asidedataBuilder.f.Outputs()
}

func (asidedataBuilder *implAsidedataBuilder) With(key string, value expr.Expr) filter.Filter {
	return asidedataBuilder.withOption(key, value)
}

func (asidedataBuilder *implAsidedataBuilder) withOption(key string, value expr.Expr) AsidedataBuilder {
	bCopy := *asidedataBuilder
	bCopy.f = asidedataBuilder.f.With(key, value)
	return &bCopy
}

func (asidedataBuilder *implAsidedataBuilder) Mode(mode int) AsidedataBuilder {
	return asidedataBuilder.withOption("mode", expr.Int(mode))
}

func (asidedataBuilder *implAsidedataBuilder) Type(typ int) AsidedataBuilder {
	return asidedataBuilder.withOption("type", expr.Int(typ))
}

func (asidedataBuilder *implAsidedataBuilder) Enable(enable expr.Expr) AsidedataBuilder {
	return asidedataBuilder.withOption("enable", enable)
}
