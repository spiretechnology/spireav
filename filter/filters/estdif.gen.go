// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// EstdifBuilder Apply Edge Slope Tracing deinterlace.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#estdif
type EstdifBuilder interface {
	filter.Filter
	// Mode specify the mode (from 0 to 1) (default field).
	Mode(mode int) EstdifBuilder
	// ModeExpr specify the mode (from 0 to 1) (default field).
	ModeExpr(mode expr.Expr) EstdifBuilder
	// Parity specify the assumed picture field parity (from -1 to 1) (default auto).
	Parity(parity int) EstdifBuilder
	// ParityExpr specify the assumed picture field parity (from -1 to 1) (default auto).
	ParityExpr(parity expr.Expr) EstdifBuilder
	// Deint specify which frames to deinterlace (from 0 to 1) (default all).
	Deint(deint int) EstdifBuilder
	// DeintExpr specify which frames to deinterlace (from 0 to 1) (default all).
	DeintExpr(deint expr.Expr) EstdifBuilder
	// Rslope specify the search radius for edge slope tracing (from 1 to 15) (default 1).
	Rslope(rslope int) EstdifBuilder
	// RslopeExpr specify the search radius for edge slope tracing (from 1 to 15) (default 1).
	RslopeExpr(rslope expr.Expr) EstdifBuilder
	// Redge specify the search radius for best edge matching (from 0 to 15) (default 2).
	Redge(redge int) EstdifBuilder
	// RedgeExpr specify the search radius for best edge matching (from 0 to 15) (default 2).
	RedgeExpr(redge expr.Expr) EstdifBuilder
	// Ecost specify the edge cost for edge matching (from 0 to 50) (default 2).
	Ecost(ecost int) EstdifBuilder
	// EcostExpr specify the edge cost for edge matching (from 0 to 50) (default 2).
	EcostExpr(ecost expr.Expr) EstdifBuilder
	// Mcost specify the middle cost for edge matching (from 0 to 50) (default 1).
	Mcost(mcost int) EstdifBuilder
	// McostExpr specify the middle cost for edge matching (from 0 to 50) (default 1).
	McostExpr(mcost expr.Expr) EstdifBuilder
	// Dcost specify the distance cost for edge matching (from 0 to 50) (default 1).
	Dcost(dcost int) EstdifBuilder
	// DcostExpr specify the distance cost for edge matching (from 0 to 50) (default 1).
	DcostExpr(dcost expr.Expr) EstdifBuilder
	// Interp specify the type of interpolation (from 0 to 2) (default 4p).
	Interp(interp int) EstdifBuilder
	// InterpExpr specify the type of interpolation (from 0 to 2) (default 4p).
	InterpExpr(interp expr.Expr) EstdifBuilder
}

// Estdif creates a new EstdifBuilder to configure the "estdif" filter.
func Estdif(opts ...filter.Option) EstdifBuilder {
	return &implEstdifBuilder{
		f: filter.New("estdif", 1, opts...),
	}
}

type implEstdifBuilder struct {
	f filter.Filter
}

func (estdifBuilder *implEstdifBuilder) String() string {
	return estdifBuilder.f.String()
}

func (estdifBuilder *implEstdifBuilder) Outputs() int {
	return estdifBuilder.f.Outputs()
}

func (estdifBuilder *implEstdifBuilder) With(key string, value expr.Expr) filter.Filter {
	return estdifBuilder.withOption(key, value)
}

func (estdifBuilder *implEstdifBuilder) withOption(key string, value expr.Expr) EstdifBuilder {
	bCopy := *estdifBuilder
	bCopy.f = estdifBuilder.f.With(key, value)
	return &bCopy
}

func (estdifBuilder *implEstdifBuilder) Mode(mode int) EstdifBuilder {
	return estdifBuilder.withOption("mode", expr.Int(mode))
}

func (estdifBuilder *implEstdifBuilder) ModeExpr(mode expr.Expr) EstdifBuilder {
	return estdifBuilder.withOption("mode", mode)
}

func (estdifBuilder *implEstdifBuilder) Parity(parity int) EstdifBuilder {
	return estdifBuilder.withOption("parity", expr.Int(parity))
}

func (estdifBuilder *implEstdifBuilder) ParityExpr(parity expr.Expr) EstdifBuilder {
	return estdifBuilder.withOption("parity", parity)
}

func (estdifBuilder *implEstdifBuilder) Deint(deint int) EstdifBuilder {
	return estdifBuilder.withOption("deint", expr.Int(deint))
}

func (estdifBuilder *implEstdifBuilder) DeintExpr(deint expr.Expr) EstdifBuilder {
	return estdifBuilder.withOption("deint", deint)
}

func (estdifBuilder *implEstdifBuilder) Rslope(rslope int) EstdifBuilder {
	return estdifBuilder.withOption("rslope", expr.Int(rslope))
}

func (estdifBuilder *implEstdifBuilder) RslopeExpr(rslope expr.Expr) EstdifBuilder {
	return estdifBuilder.withOption("rslope", rslope)
}

func (estdifBuilder *implEstdifBuilder) Redge(redge int) EstdifBuilder {
	return estdifBuilder.withOption("redge", expr.Int(redge))
}

func (estdifBuilder *implEstdifBuilder) RedgeExpr(redge expr.Expr) EstdifBuilder {
	return estdifBuilder.withOption("redge", redge)
}

func (estdifBuilder *implEstdifBuilder) Ecost(ecost int) EstdifBuilder {
	return estdifBuilder.withOption("ecost", expr.Int(ecost))
}

func (estdifBuilder *implEstdifBuilder) EcostExpr(ecost expr.Expr) EstdifBuilder {
	return estdifBuilder.withOption("ecost", ecost)
}

func (estdifBuilder *implEstdifBuilder) Mcost(mcost int) EstdifBuilder {
	return estdifBuilder.withOption("mcost", expr.Int(mcost))
}

func (estdifBuilder *implEstdifBuilder) McostExpr(mcost expr.Expr) EstdifBuilder {
	return estdifBuilder.withOption("mcost", mcost)
}

func (estdifBuilder *implEstdifBuilder) Dcost(dcost int) EstdifBuilder {
	return estdifBuilder.withOption("dcost", expr.Int(dcost))
}

func (estdifBuilder *implEstdifBuilder) DcostExpr(dcost expr.Expr) EstdifBuilder {
	return estdifBuilder.withOption("dcost", dcost)
}

func (estdifBuilder *implEstdifBuilder) Interp(interp int) EstdifBuilder {
	return estdifBuilder.withOption("interp", expr.Int(interp))
}

func (estdifBuilder *implEstdifBuilder) InterpExpr(interp expr.Expr) EstdifBuilder {
	return estdifBuilder.withOption("interp", interp)
}
