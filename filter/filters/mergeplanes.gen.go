// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// MergeplanesBuilder Merge planes.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#mergeplanes
type MergeplanesBuilder interface {
	filter.Filter
	// Mapping set input to output plane mapping (from -1 to 8.58993e+08) (default -1).
	Mapping(mapping int) MergeplanesBuilder
	// Format set output pixel format (default yuva444p).
	Format(format expr.PixFmt) MergeplanesBuilder
	// Map0s set 1st input to output stream mapping (from 0 to 3) (default 0).
	Map0s(map0s int) MergeplanesBuilder
	// Map0p set 1st input to output plane mapping (from 0 to 3) (default 0).
	Map0p(map0p int) MergeplanesBuilder
	// Map1s set 2nd input to output stream mapping (from 0 to 3) (default 0).
	Map1s(map1s int) MergeplanesBuilder
	// Map1p set 2nd input to output plane mapping (from 0 to 3) (default 0).
	Map1p(map1p int) MergeplanesBuilder
	// Map2s set 3rd input to output stream mapping (from 0 to 3) (default 0).
	Map2s(map2s int) MergeplanesBuilder
	// Map2p set 3rd input to output plane mapping (from 0 to 3) (default 0).
	Map2p(map2p int) MergeplanesBuilder
	// Map3s set 4th input to output stream mapping (from 0 to 3) (default 0).
	Map3s(map3s int) MergeplanesBuilder
	// Map3p set 4th input to output plane mapping (from 0 to 3) (default 0).
	Map3p(map3p int) MergeplanesBuilder
}

// Mergeplanes creates a new MergeplanesBuilder to configure the "mergeplanes" filter.
func Mergeplanes(opts ...filter.Option) MergeplanesBuilder {
	return &implMergeplanesBuilder{
		f: filter.New("mergeplanes", 1, opts...),
	}
}

type implMergeplanesBuilder struct {
	f filter.Filter
}

func (mergeplanesBuilder *implMergeplanesBuilder) String() string {
	return mergeplanesBuilder.f.String()
}

func (mergeplanesBuilder *implMergeplanesBuilder) Outputs() int {
	return mergeplanesBuilder.f.Outputs()
}

func (mergeplanesBuilder *implMergeplanesBuilder) With(key string, value expr.Expr) filter.Filter {
	return mergeplanesBuilder.withOption(key, value)
}

func (mergeplanesBuilder *implMergeplanesBuilder) withOption(key string, value expr.Expr) MergeplanesBuilder {
	bCopy := *mergeplanesBuilder
	bCopy.f = mergeplanesBuilder.f.With(key, value)
	return &bCopy
}

func (mergeplanesBuilder *implMergeplanesBuilder) Mapping(mapping int) MergeplanesBuilder {
	return mergeplanesBuilder.withOption("mapping", expr.Int(mapping))
}

func (mergeplanesBuilder *implMergeplanesBuilder) Format(format expr.PixFmt) MergeplanesBuilder {
	return mergeplanesBuilder.withOption("format", format)
}

func (mergeplanesBuilder *implMergeplanesBuilder) Map0s(map0s int) MergeplanesBuilder {
	return mergeplanesBuilder.withOption("map0s", expr.Int(map0s))
}

func (mergeplanesBuilder *implMergeplanesBuilder) Map0p(map0p int) MergeplanesBuilder {
	return mergeplanesBuilder.withOption("map0p", expr.Int(map0p))
}

func (mergeplanesBuilder *implMergeplanesBuilder) Map1s(map1s int) MergeplanesBuilder {
	return mergeplanesBuilder.withOption("map1s", expr.Int(map1s))
}

func (mergeplanesBuilder *implMergeplanesBuilder) Map1p(map1p int) MergeplanesBuilder {
	return mergeplanesBuilder.withOption("map1p", expr.Int(map1p))
}

func (mergeplanesBuilder *implMergeplanesBuilder) Map2s(map2s int) MergeplanesBuilder {
	return mergeplanesBuilder.withOption("map2s", expr.Int(map2s))
}

func (mergeplanesBuilder *implMergeplanesBuilder) Map2p(map2p int) MergeplanesBuilder {
	return mergeplanesBuilder.withOption("map2p", expr.Int(map2p))
}

func (mergeplanesBuilder *implMergeplanesBuilder) Map3s(map3s int) MergeplanesBuilder {
	return mergeplanesBuilder.withOption("map3s", expr.Int(map3s))
}

func (mergeplanesBuilder *implMergeplanesBuilder) Map3p(map3p int) MergeplanesBuilder {
	return mergeplanesBuilder.withOption("map3p", expr.Int(map3p))
}
