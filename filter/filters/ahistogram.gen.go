// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// AhistogramBuilder Convert input audio to histogram video output.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#ahistogram
type AhistogramBuilder interface {
	filter.Filter
	// Dmode set method to display channels (from 0 to 1) (default single).
	Dmode(dmode int) AhistogramBuilder
	// Rate set video rate (default "25").
	Rate(rate expr.Rational) AhistogramBuilder
	// R set video rate (default "25").
	R(r expr.Rational) AhistogramBuilder
	// Size set video size (default "hd720").
	Size(size expr.Size) AhistogramBuilder
	// S set video size (default "hd720").
	S(s expr.Size) AhistogramBuilder
	// Scale set display scale (from 0 to 4) (default log).
	Scale(scale int) AhistogramBuilder
	// Ascale set amplitude scale (from 0 to 1) (default log).
	Ascale(ascale int) AhistogramBuilder
	// Acount how much frames to accumulate (from -1 to 100) (default 1).
	Acount(acount int) AhistogramBuilder
	// Rheight set histogram ratio of window height (from 0 to 1) (default 0.1).
	Rheight(rheight float32) AhistogramBuilder
	// Slide set sonogram sliding (from 0 to 1) (default replace).
	Slide(slide int) AhistogramBuilder
	// Hmode set histograms mode (from 0 to 1) (default abs).
	Hmode(hmode int) AhistogramBuilder
}

// Ahistogram creates a new AhistogramBuilder to configure the "ahistogram" filter.
func Ahistogram(opts ...filter.Option) AhistogramBuilder {
	return &implAhistogramBuilder{
		f: filter.New("ahistogram", 1, opts...),
	}
}

type implAhistogramBuilder struct {
	f filter.Filter
}

func (ahistogramBuilder *implAhistogramBuilder) String() string {
	return ahistogramBuilder.f.String()
}

func (ahistogramBuilder *implAhistogramBuilder) Outputs() int {
	return ahistogramBuilder.f.Outputs()
}

func (ahistogramBuilder *implAhistogramBuilder) With(key string, value expr.Expr) filter.Filter {
	return ahistogramBuilder.withOption(key, value)
}

func (ahistogramBuilder *implAhistogramBuilder) withOption(key string, value expr.Expr) AhistogramBuilder {
	bCopy := *ahistogramBuilder
	bCopy.f = ahistogramBuilder.f.With(key, value)
	return &bCopy
}

func (ahistogramBuilder *implAhistogramBuilder) Dmode(dmode int) AhistogramBuilder {
	return ahistogramBuilder.withOption("dmode", expr.Int(dmode))
}

func (ahistogramBuilder *implAhistogramBuilder) Rate(rate expr.Rational) AhistogramBuilder {
	return ahistogramBuilder.withOption("rate", rate)
}

func (ahistogramBuilder *implAhistogramBuilder) R(r expr.Rational) AhistogramBuilder {
	return ahistogramBuilder.withOption("r", r)
}

func (ahistogramBuilder *implAhistogramBuilder) Size(size expr.Size) AhistogramBuilder {
	return ahistogramBuilder.withOption("size", size)
}

func (ahistogramBuilder *implAhistogramBuilder) S(s expr.Size) AhistogramBuilder {
	return ahistogramBuilder.withOption("s", s)
}

func (ahistogramBuilder *implAhistogramBuilder) Scale(scale int) AhistogramBuilder {
	return ahistogramBuilder.withOption("scale", expr.Int(scale))
}

func (ahistogramBuilder *implAhistogramBuilder) Ascale(ascale int) AhistogramBuilder {
	return ahistogramBuilder.withOption("ascale", expr.Int(ascale))
}

func (ahistogramBuilder *implAhistogramBuilder) Acount(acount int) AhistogramBuilder {
	return ahistogramBuilder.withOption("acount", expr.Int(acount))
}

func (ahistogramBuilder *implAhistogramBuilder) Rheight(rheight float32) AhistogramBuilder {
	return ahistogramBuilder.withOption("rheight", expr.Float(rheight))
}

func (ahistogramBuilder *implAhistogramBuilder) Slide(slide int) AhistogramBuilder {
	return ahistogramBuilder.withOption("slide", expr.Int(slide))
}

func (ahistogramBuilder *implAhistogramBuilder) Hmode(hmode int) AhistogramBuilder {
	return ahistogramBuilder.withOption("hmode", expr.Int(hmode))
}
