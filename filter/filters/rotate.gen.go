// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// RotateBuilder Rotate the input image.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#rotate
type RotateBuilder interface {
	filter.Filter
	// Angle set angle (in radians) (default "0").
	Angle(angle string) RotateBuilder
	// AngleExpr set angle (in radians) (default "0").
	AngleExpr(angle expr.Expr) RotateBuilder
	// A set angle (in radians) (default "0").
	A(a string) RotateBuilder
	// AExpr set angle (in radians) (default "0").
	AExpr(a expr.Expr) RotateBuilder
	// OutW set output width expression (default "iw").
	OutW(outW int) RotateBuilder
	// OutWExpr set output width expression (default "iw").
	OutWExpr(outW expr.Expr) RotateBuilder
	// Ow set output width expression (default "iw").
	Ow(ow int) RotateBuilder
	// OwExpr set output width expression (default "iw").
	OwExpr(ow expr.Expr) RotateBuilder
	// OutH set output height expression (default "ih").
	OutH(outH int) RotateBuilder
	// OutHExpr set output height expression (default "ih").
	OutHExpr(outH expr.Expr) RotateBuilder
	// Oh set output height expression (default "ih").
	Oh(oh int) RotateBuilder
	// OhExpr set output height expression (default "ih").
	OhExpr(oh expr.Expr) RotateBuilder
	// Fillcolor set background fill color (default "black").
	Fillcolor(fillcolor string) RotateBuilder
	// C set background fill color (default "black").
	C(c string) RotateBuilder
	// Bilinear use bilinear interpolation (default true).
	Bilinear(bilinear bool) RotateBuilder
	// Enable expression to enable or disable the filter.
	Enable(enable expr.Expr) RotateBuilder
}

// Rotate creates a new RotateBuilder to configure the "rotate" filter.
func Rotate(opts ...filter.Option) RotateBuilder {
	return &implRotateBuilder{
		f: filter.New("rotate", 1, opts...),
	}
}

type implRotateBuilder struct {
	f filter.Filter
}

func (rotateBuilder *implRotateBuilder) String() string {
	return rotateBuilder.f.String()
}

func (rotateBuilder *implRotateBuilder) Outputs() int {
	return rotateBuilder.f.Outputs()
}

func (rotateBuilder *implRotateBuilder) With(key string, value expr.Expr) filter.Filter {
	return rotateBuilder.withOption(key, value)
}

func (rotateBuilder *implRotateBuilder) withOption(key string, value expr.Expr) RotateBuilder {
	bCopy := *rotateBuilder
	bCopy.f = rotateBuilder.f.With(key, value)
	return &bCopy
}

func (rotateBuilder *implRotateBuilder) Angle(angle string) RotateBuilder {
	return rotateBuilder.withOption("angle", expr.String(angle))
}

func (rotateBuilder *implRotateBuilder) AngleExpr(angle expr.Expr) RotateBuilder {
	return rotateBuilder.withOption("angle", angle)
}

func (rotateBuilder *implRotateBuilder) A(a string) RotateBuilder {
	return rotateBuilder.withOption("a", expr.String(a))
}

func (rotateBuilder *implRotateBuilder) AExpr(a expr.Expr) RotateBuilder {
	return rotateBuilder.withOption("a", a)
}

func (rotateBuilder *implRotateBuilder) OutW(outW int) RotateBuilder {
	return rotateBuilder.withOption("out_w", expr.Int(outW))
}

func (rotateBuilder *implRotateBuilder) OutWExpr(outW expr.Expr) RotateBuilder {
	return rotateBuilder.withOption("out_w", outW)
}

func (rotateBuilder *implRotateBuilder) Ow(ow int) RotateBuilder {
	return rotateBuilder.withOption("ow", expr.Int(ow))
}

func (rotateBuilder *implRotateBuilder) OwExpr(ow expr.Expr) RotateBuilder {
	return rotateBuilder.withOption("ow", ow)
}

func (rotateBuilder *implRotateBuilder) OutH(outH int) RotateBuilder {
	return rotateBuilder.withOption("out_h", expr.Int(outH))
}

func (rotateBuilder *implRotateBuilder) OutHExpr(outH expr.Expr) RotateBuilder {
	return rotateBuilder.withOption("out_h", outH)
}

func (rotateBuilder *implRotateBuilder) Oh(oh int) RotateBuilder {
	return rotateBuilder.withOption("oh", expr.Int(oh))
}

func (rotateBuilder *implRotateBuilder) OhExpr(oh expr.Expr) RotateBuilder {
	return rotateBuilder.withOption("oh", oh)
}

func (rotateBuilder *implRotateBuilder) Fillcolor(fillcolor string) RotateBuilder {
	return rotateBuilder.withOption("fillcolor", expr.String(fillcolor))
}

func (rotateBuilder *implRotateBuilder) C(c string) RotateBuilder {
	return rotateBuilder.withOption("c", expr.String(c))
}

func (rotateBuilder *implRotateBuilder) Bilinear(bilinear bool) RotateBuilder {
	return rotateBuilder.withOption("bilinear", expr.Bool(bilinear))
}

func (rotateBuilder *implRotateBuilder) Enable(enable expr.Expr) RotateBuilder {
	return rotateBuilder.withOption("enable", enable)
}
