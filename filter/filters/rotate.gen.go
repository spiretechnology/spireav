// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// RotateBuilder corresponds to the "rotate" FFmpeg filter.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#rotate
type RotateBuilder interface {
	filter.Filter
	// Angle sets the "a" option on the filter.
	Angle(angle expr.Expr) RotateBuilder
	// FillColor sets the "c" option on the filter.
	FillColor(fillColor string) RotateBuilder
	// OutputWidth sets the "out_w" option on the filter.
	OutputWidth(outputWidth expr.Expr) RotateBuilder
	// OutputWidthInt sets the "out_w" option on the filter.
	OutputWidthInt(outputWidth int) RotateBuilder
	// OutputHeight sets the "out_h" option on the filter.
	OutputHeight(outputHeight expr.Expr) RotateBuilder
	// OutputHeightInt sets the "out_h" option on the filter.
	OutputHeightInt(outputHeight int) RotateBuilder
}

// Rotate creates a new RotateBuilder to configure the "rotate" filter.
func Rotate(opts ...filter.Option) RotateBuilder {
	return &implRotateBuilder{
		f: filter.New("rotate", 1, opts...),
	}
}

type implRotateBuilder struct {
	f filter.Filter
}

func (b *implRotateBuilder) String() string {
	return b.f.String()
}

func (b *implRotateBuilder) Outputs() int {
	return b.f.Outputs()
}

func (b *implRotateBuilder) With(key string, value expr.Expr) filter.Filter {
	return b.withOption(key, value)
}

func (b *implRotateBuilder) withOption(key string, value expr.Expr) RotateBuilder {
	bCopy := *b
	bCopy.f = b.f.With(key, value)
	return &bCopy
}

func (b *implRotateBuilder) Angle(angle expr.Expr) RotateBuilder {
	return b.withOption("a", angle)
}

func (b *implRotateBuilder) FillColor(fillColor string) RotateBuilder {
	return b.withOption("c", expr.String(fillColor))
}

func (b *implRotateBuilder) OutputWidth(outputWidth expr.Expr) RotateBuilder {
	return b.withOption("out_w", outputWidth)
}

func (b *implRotateBuilder) OutputWidthInt(outputWidth int) RotateBuilder {
	return b.withOption("out_w", expr.Int(outputWidth))
}

func (b *implRotateBuilder) OutputHeight(outputHeight expr.Expr) RotateBuilder {
	return b.withOption("out_h", outputHeight)
}

func (b *implRotateBuilder) OutputHeightInt(outputHeight int) RotateBuilder {
	return b.withOption("out_h", expr.Int(outputHeight))
}
