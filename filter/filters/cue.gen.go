// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"time"

	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// CueBuilder Delay filtering to match a cue.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#cue
type CueBuilder interface {
	filter.Filter
	// Cue cue unix timestamp in microseconds (from 0 to I64_MAX) (default 0).
	Cue(cue int64) CueBuilder
	// Preroll preroll duration in seconds (default 0).
	Preroll(preroll time.Duration) CueBuilder
	// Buffer buffer duration in seconds (default 0).
	Buffer(buffer time.Duration) CueBuilder
}

// Cue creates a new CueBuilder to configure the "cue" filter.
func Cue(opts ...filter.Option) CueBuilder {
	return &implCueBuilder{
		f: filter.New("cue", 1, opts...),
	}
}

type implCueBuilder struct {
	f filter.Filter
}

func (cueBuilder *implCueBuilder) String() string {
	return cueBuilder.f.String()
}

func (cueBuilder *implCueBuilder) Outputs() int {
	return cueBuilder.f.Outputs()
}

func (cueBuilder *implCueBuilder) With(key string, value expr.Expr) filter.Filter {
	return cueBuilder.withOption(key, value)
}

func (cueBuilder *implCueBuilder) withOption(key string, value expr.Expr) CueBuilder {
	bCopy := *cueBuilder
	bCopy.f = cueBuilder.f.With(key, value)
	return &bCopy
}

func (cueBuilder *implCueBuilder) Cue(cue int64) CueBuilder {
	return cueBuilder.withOption("cue", expr.Int64(cue))
}

func (cueBuilder *implCueBuilder) Preroll(preroll time.Duration) CueBuilder {
	return cueBuilder.withOption("preroll", expr.Duration(preroll))
}

func (cueBuilder *implCueBuilder) Buffer(buffer time.Duration) CueBuilder {
	return cueBuilder.withOption("buffer", expr.Duration(buffer))
}
