// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"time"

	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// FreezedetectBuilder Detects frozen video input.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#freezedetect
type FreezedetectBuilder interface {
	filter.Filter
	// N set noise tolerance (from 0 to 1) (default 0.001).
	N(n float64) FreezedetectBuilder
	// Noise set noise tolerance (from 0 to 1) (default 0.001).
	Noise(noise float64) FreezedetectBuilder
	// D set minimum duration in seconds (default 2).
	D(d time.Duration) FreezedetectBuilder
	// Duration set minimum duration in seconds (default 2).
	Duration(duration time.Duration) FreezedetectBuilder
}

// Freezedetect creates a new FreezedetectBuilder to configure the "freezedetect" filter.
func Freezedetect(opts ...filter.Option) FreezedetectBuilder {
	return &implFreezedetectBuilder{
		f: filter.New("freezedetect", 1, opts...),
	}
}

type implFreezedetectBuilder struct {
	f filter.Filter
}

func (freezedetectBuilder *implFreezedetectBuilder) String() string {
	return freezedetectBuilder.f.String()
}

func (freezedetectBuilder *implFreezedetectBuilder) Outputs() int {
	return freezedetectBuilder.f.Outputs()
}

func (freezedetectBuilder *implFreezedetectBuilder) With(key string, value expr.Expr) filter.Filter {
	return freezedetectBuilder.withOption(key, value)
}

func (freezedetectBuilder *implFreezedetectBuilder) withOption(key string, value expr.Expr) FreezedetectBuilder {
	bCopy := *freezedetectBuilder
	bCopy.f = freezedetectBuilder.f.With(key, value)
	return &bCopy
}

func (freezedetectBuilder *implFreezedetectBuilder) N(n float64) FreezedetectBuilder {
	return freezedetectBuilder.withOption("n", expr.Double(n))
}

func (freezedetectBuilder *implFreezedetectBuilder) Noise(noise float64) FreezedetectBuilder {
	return freezedetectBuilder.withOption("noise", expr.Double(noise))
}

func (freezedetectBuilder *implFreezedetectBuilder) D(d time.Duration) FreezedetectBuilder {
	return freezedetectBuilder.withOption("d", expr.Duration(d))
}

func (freezedetectBuilder *implFreezedetectBuilder) Duration(duration time.Duration) FreezedetectBuilder {
	return freezedetectBuilder.withOption("duration", expr.Duration(duration))
}
