// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// DcshiftBuilder Apply a DC shift to the audio.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#dcshift
type DcshiftBuilder interface {
	filter.Filter
	// Shift set DC shift (from -1 to 1) (default 0).
	Shift(shift float64) DcshiftBuilder
	// Limitergain set limiter gain (from 0 to 1) (default 0).
	Limitergain(limitergain float64) DcshiftBuilder
	// Enable expression to enable or disable the filter.
	Enable(enable expr.Expr) DcshiftBuilder
}

// Dcshift creates a new DcshiftBuilder to configure the "dcshift" filter.
func Dcshift(opts ...filter.Option) DcshiftBuilder {
	return &implDcshiftBuilder{
		f: filter.New("dcshift", 1, opts...),
	}
}

type implDcshiftBuilder struct {
	f filter.Filter
}

func (dcshiftBuilder *implDcshiftBuilder) String() string {
	return dcshiftBuilder.f.String()
}

func (dcshiftBuilder *implDcshiftBuilder) Outputs() int {
	return dcshiftBuilder.f.Outputs()
}

func (dcshiftBuilder *implDcshiftBuilder) With(key string, value expr.Expr) filter.Filter {
	return dcshiftBuilder.withOption(key, value)
}

func (dcshiftBuilder *implDcshiftBuilder) withOption(key string, value expr.Expr) DcshiftBuilder {
	bCopy := *dcshiftBuilder
	bCopy.f = dcshiftBuilder.f.With(key, value)
	return &bCopy
}

func (dcshiftBuilder *implDcshiftBuilder) Shift(shift float64) DcshiftBuilder {
	return dcshiftBuilder.withOption("shift", expr.Double(shift))
}

func (dcshiftBuilder *implDcshiftBuilder) Limitergain(limitergain float64) DcshiftBuilder {
	return dcshiftBuilder.withOption("limitergain", expr.Double(limitergain))
}

func (dcshiftBuilder *implDcshiftBuilder) Enable(enable expr.Expr) DcshiftBuilder {
	return dcshiftBuilder.withOption("enable", enable)
}
