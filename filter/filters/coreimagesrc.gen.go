// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"time"

	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// CoreimagesrcBuilder Video source using image generators of CoreImage API.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#coreimagesrc
type CoreimagesrcBuilder interface {
	filter.Filter
	// Size set video size (default "320x240").
	Size(size expr.Size) CoreimagesrcBuilder
	// S set video size (default "320x240").
	S(s expr.Size) CoreimagesrcBuilder
	// Rate set video rate (default "25").
	Rate(rate expr.Rational) CoreimagesrcBuilder
	// R set video rate (default "25").
	R(r expr.Rational) CoreimagesrcBuilder
	// Duration set video duration (default -0.000001).
	Duration(duration time.Duration) CoreimagesrcBuilder
	// D set video duration (default -0.000001).
	D(d time.Duration) CoreimagesrcBuilder
	// Sar set video sample aspect ratio (from 0 to INT_MAX) (default 1/1).
	Sar(sar expr.Rational) CoreimagesrcBuilder
	// ListFilters list available filters (default false).
	ListFilters(listFilters bool) CoreimagesrcBuilder
	// ListGenerators list available generators (default false).
	ListGenerators(listGenerators bool) CoreimagesrcBuilder
	// Filter names and options of filters to apply.
	Filter(filter string) CoreimagesrcBuilder
	// OutputRect output rectangle within output image.
	OutputRect(outputRect string) CoreimagesrcBuilder
}

// Coreimagesrc creates a new CoreimagesrcBuilder to configure the "coreimagesrc" filter.
func Coreimagesrc(opts ...filter.Option) CoreimagesrcBuilder {
	return &implCoreimagesrcBuilder{
		f: filter.New("coreimagesrc", 1, opts...),
	}
}

type implCoreimagesrcBuilder struct {
	f filter.Filter
}

func (coreimagesrcBuilder *implCoreimagesrcBuilder) String() string {
	return coreimagesrcBuilder.f.String()
}

func (coreimagesrcBuilder *implCoreimagesrcBuilder) Outputs() int {
	return coreimagesrcBuilder.f.Outputs()
}

func (coreimagesrcBuilder *implCoreimagesrcBuilder) With(key string, value expr.Expr) filter.Filter {
	return coreimagesrcBuilder.withOption(key, value)
}

func (coreimagesrcBuilder *implCoreimagesrcBuilder) withOption(key string, value expr.Expr) CoreimagesrcBuilder {
	bCopy := *coreimagesrcBuilder
	bCopy.f = coreimagesrcBuilder.f.With(key, value)
	return &bCopy
}

func (coreimagesrcBuilder *implCoreimagesrcBuilder) Size(size expr.Size) CoreimagesrcBuilder {
	return coreimagesrcBuilder.withOption("size", size)
}

func (coreimagesrcBuilder *implCoreimagesrcBuilder) S(s expr.Size) CoreimagesrcBuilder {
	return coreimagesrcBuilder.withOption("s", s)
}

func (coreimagesrcBuilder *implCoreimagesrcBuilder) Rate(rate expr.Rational) CoreimagesrcBuilder {
	return coreimagesrcBuilder.withOption("rate", rate)
}

func (coreimagesrcBuilder *implCoreimagesrcBuilder) R(r expr.Rational) CoreimagesrcBuilder {
	return coreimagesrcBuilder.withOption("r", r)
}

func (coreimagesrcBuilder *implCoreimagesrcBuilder) Duration(duration time.Duration) CoreimagesrcBuilder {
	return coreimagesrcBuilder.withOption("duration", expr.Duration(duration))
}

func (coreimagesrcBuilder *implCoreimagesrcBuilder) D(d time.Duration) CoreimagesrcBuilder {
	return coreimagesrcBuilder.withOption("d", expr.Duration(d))
}

func (coreimagesrcBuilder *implCoreimagesrcBuilder) Sar(sar expr.Rational) CoreimagesrcBuilder {
	return coreimagesrcBuilder.withOption("sar", sar)
}

func (coreimagesrcBuilder *implCoreimagesrcBuilder) ListFilters(listFilters bool) CoreimagesrcBuilder {
	return coreimagesrcBuilder.withOption("list_filters", expr.Bool(listFilters))
}

func (coreimagesrcBuilder *implCoreimagesrcBuilder) ListGenerators(listGenerators bool) CoreimagesrcBuilder {
	return coreimagesrcBuilder.withOption("list_generators", expr.Bool(listGenerators))
}

func (coreimagesrcBuilder *implCoreimagesrcBuilder) Filter(filter string) CoreimagesrcBuilder {
	return coreimagesrcBuilder.withOption("filter", expr.String(filter))
}

func (coreimagesrcBuilder *implCoreimagesrcBuilder) OutputRect(outputRect string) CoreimagesrcBuilder {
	return coreimagesrcBuilder.withOption("output_rect", expr.String(outputRect))
}
