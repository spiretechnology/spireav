// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// FieldhintBuilder Field matching using hints.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#fieldhint
type FieldhintBuilder interface {
	filter.Filter
	// Hint set hint file.
	Hint(hint string) FieldhintBuilder
	// Mode set hint mode (from 0 to 2) (default absolute).
	Mode(mode int) FieldhintBuilder
}

// Fieldhint creates a new FieldhintBuilder to configure the "fieldhint" filter.
func Fieldhint(opts ...filter.Option) FieldhintBuilder {
	return &implFieldhintBuilder{
		f: filter.New("fieldhint", 1, opts...),
	}
}

type implFieldhintBuilder struct {
	f filter.Filter
}

func (fieldhintBuilder *implFieldhintBuilder) String() string {
	return fieldhintBuilder.f.String()
}

func (fieldhintBuilder *implFieldhintBuilder) Outputs() int {
	return fieldhintBuilder.f.Outputs()
}

func (fieldhintBuilder *implFieldhintBuilder) With(key string, value expr.Expr) filter.Filter {
	return fieldhintBuilder.withOption(key, value)
}

func (fieldhintBuilder *implFieldhintBuilder) withOption(key string, value expr.Expr) FieldhintBuilder {
	bCopy := *fieldhintBuilder
	bCopy.f = fieldhintBuilder.f.With(key, value)
	return &bCopy
}

func (fieldhintBuilder *implFieldhintBuilder) Hint(hint string) FieldhintBuilder {
	return fieldhintBuilder.withOption("hint", expr.String(hint))
}

func (fieldhintBuilder *implFieldhintBuilder) Mode(mode int) FieldhintBuilder {
	return fieldhintBuilder.withOption("mode", expr.Int(mode))
}
