// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// BlendBuilder Blend two video frames into each other.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#blend
type BlendBuilder interface {
	filter.Filter
	// C0Mode set component #0 blend mode (from 0 to 39) (default normal).
	C0Mode(c0Mode int) BlendBuilder
	// C0ModeExpr set component #0 blend mode (from 0 to 39) (default normal).
	C0ModeExpr(c0Mode expr.Expr) BlendBuilder
	// C1Mode set component #1 blend mode (from 0 to 39) (default normal).
	C1Mode(c1Mode int) BlendBuilder
	// C1ModeExpr set component #1 blend mode (from 0 to 39) (default normal).
	C1ModeExpr(c1Mode expr.Expr) BlendBuilder
	// C2Mode set component #2 blend mode (from 0 to 39) (default normal).
	C2Mode(c2Mode int) BlendBuilder
	// C2ModeExpr set component #2 blend mode (from 0 to 39) (default normal).
	C2ModeExpr(c2Mode expr.Expr) BlendBuilder
	// C3Mode set component #3 blend mode (from 0 to 39) (default normal).
	C3Mode(c3Mode int) BlendBuilder
	// C3ModeExpr set component #3 blend mode (from 0 to 39) (default normal).
	C3ModeExpr(c3Mode expr.Expr) BlendBuilder
	// AllMode set blend mode for all components (from -1 to 39) (default -1).
	AllMode(allMode int) BlendBuilder
	// AllModeExpr set blend mode for all components (from -1 to 39) (default -1).
	AllModeExpr(allMode expr.Expr) BlendBuilder
	// C0Expr set color component #0 expression.
	C0Expr(c0Expr string) BlendBuilder
	// C0ExprExpr set color component #0 expression.
	C0ExprExpr(c0Expr expr.Expr) BlendBuilder
	// C1Expr set color component #1 expression.
	C1Expr(c1Expr string) BlendBuilder
	// C1ExprExpr set color component #1 expression.
	C1ExprExpr(c1Expr expr.Expr) BlendBuilder
	// C2Expr set color component #2 expression.
	C2Expr(c2Expr string) BlendBuilder
	// C2ExprExpr set color component #2 expression.
	C2ExprExpr(c2Expr expr.Expr) BlendBuilder
	// C3Expr set color component #3 expression.
	C3Expr(c3Expr string) BlendBuilder
	// C3ExprExpr set color component #3 expression.
	C3ExprExpr(c3Expr expr.Expr) BlendBuilder
	// AllExpr set expression for all color components.
	AllExpr(allExpr string) BlendBuilder
	// AllExprExpr set expression for all color components.
	AllExprExpr(allExpr expr.Expr) BlendBuilder
	// C0Opacity set color component #0 opacity (from 0 to 1) (default 1).
	C0Opacity(c0Opacity float64) BlendBuilder
	// C0OpacityExpr set color component #0 opacity (from 0 to 1) (default 1).
	C0OpacityExpr(c0Opacity expr.Expr) BlendBuilder
	// C1Opacity set color component #1 opacity (from 0 to 1) (default 1).
	C1Opacity(c1Opacity float64) BlendBuilder
	// C1OpacityExpr set color component #1 opacity (from 0 to 1) (default 1).
	C1OpacityExpr(c1Opacity expr.Expr) BlendBuilder
	// C2Opacity set color component #2 opacity (from 0 to 1) (default 1).
	C2Opacity(c2Opacity float64) BlendBuilder
	// C2OpacityExpr set color component #2 opacity (from 0 to 1) (default 1).
	C2OpacityExpr(c2Opacity expr.Expr) BlendBuilder
	// C3Opacity set color component #3 opacity (from 0 to 1) (default 1).
	C3Opacity(c3Opacity float64) BlendBuilder
	// C3OpacityExpr set color component #3 opacity (from 0 to 1) (default 1).
	C3OpacityExpr(c3Opacity expr.Expr) BlendBuilder
	// AllOpacity set opacity for all color components (from 0 to 1) (default 1).
	AllOpacity(allOpacity float64) BlendBuilder
	// AllOpacityExpr set opacity for all color components (from 0 to 1) (default 1).
	AllOpacityExpr(allOpacity expr.Expr) BlendBuilder
	// EofAction Action to take when encountering EOF from secondary input  (from 0 to 2) (default repeat).
	EofAction(eofAction int) BlendBuilder
	// Shortest force termination when the shortest input terminates (default false).
	Shortest(shortest bool) BlendBuilder
	// Repeatlast extend last frame of secondary streams beyond EOF (default true).
	Repeatlast(repeatlast bool) BlendBuilder
	// TsSyncMode How strictly to sync streams based on secondary input timestamps (from 0 to 1) (default default).
	TsSyncMode(tsSyncMode int) BlendBuilder
}

// Blend creates a new BlendBuilder to configure the "blend" filter.
func Blend(opts ...filter.Option) BlendBuilder {
	return &implBlendBuilder{
		f: filter.New("blend", 1, opts...),
	}
}

type implBlendBuilder struct {
	f filter.Filter
}

func (blendBuilder *implBlendBuilder) String() string {
	return blendBuilder.f.String()
}

func (blendBuilder *implBlendBuilder) Outputs() int {
	return blendBuilder.f.Outputs()
}

func (blendBuilder *implBlendBuilder) With(key string, value expr.Expr) filter.Filter {
	return blendBuilder.withOption(key, value)
}

func (blendBuilder *implBlendBuilder) withOption(key string, value expr.Expr) BlendBuilder {
	bCopy := *blendBuilder
	bCopy.f = blendBuilder.f.With(key, value)
	return &bCopy
}

func (blendBuilder *implBlendBuilder) C0Mode(c0Mode int) BlendBuilder {
	return blendBuilder.withOption("c0_mode", expr.Int(c0Mode))
}

func (blendBuilder *implBlendBuilder) C0ModeExpr(c0Mode expr.Expr) BlendBuilder {
	return blendBuilder.withOption("c0_mode", c0Mode)
}

func (blendBuilder *implBlendBuilder) C1Mode(c1Mode int) BlendBuilder {
	return blendBuilder.withOption("c1_mode", expr.Int(c1Mode))
}

func (blendBuilder *implBlendBuilder) C1ModeExpr(c1Mode expr.Expr) BlendBuilder {
	return blendBuilder.withOption("c1_mode", c1Mode)
}

func (blendBuilder *implBlendBuilder) C2Mode(c2Mode int) BlendBuilder {
	return blendBuilder.withOption("c2_mode", expr.Int(c2Mode))
}

func (blendBuilder *implBlendBuilder) C2ModeExpr(c2Mode expr.Expr) BlendBuilder {
	return blendBuilder.withOption("c2_mode", c2Mode)
}

func (blendBuilder *implBlendBuilder) C3Mode(c3Mode int) BlendBuilder {
	return blendBuilder.withOption("c3_mode", expr.Int(c3Mode))
}

func (blendBuilder *implBlendBuilder) C3ModeExpr(c3Mode expr.Expr) BlendBuilder {
	return blendBuilder.withOption("c3_mode", c3Mode)
}

func (blendBuilder *implBlendBuilder) AllMode(allMode int) BlendBuilder {
	return blendBuilder.withOption("all_mode", expr.Int(allMode))
}

func (blendBuilder *implBlendBuilder) AllModeExpr(allMode expr.Expr) BlendBuilder {
	return blendBuilder.withOption("all_mode", allMode)
}

func (blendBuilder *implBlendBuilder) C0Expr(c0Expr string) BlendBuilder {
	return blendBuilder.withOption("c0_expr", expr.String(c0Expr))
}

func (blendBuilder *implBlendBuilder) C0ExprExpr(c0Expr expr.Expr) BlendBuilder {
	return blendBuilder.withOption("c0_expr", c0Expr)
}

func (blendBuilder *implBlendBuilder) C1Expr(c1Expr string) BlendBuilder {
	return blendBuilder.withOption("c1_expr", expr.String(c1Expr))
}

func (blendBuilder *implBlendBuilder) C1ExprExpr(c1Expr expr.Expr) BlendBuilder {
	return blendBuilder.withOption("c1_expr", c1Expr)
}

func (blendBuilder *implBlendBuilder) C2Expr(c2Expr string) BlendBuilder {
	return blendBuilder.withOption("c2_expr", expr.String(c2Expr))
}

func (blendBuilder *implBlendBuilder) C2ExprExpr(c2Expr expr.Expr) BlendBuilder {
	return blendBuilder.withOption("c2_expr", c2Expr)
}

func (blendBuilder *implBlendBuilder) C3Expr(c3Expr string) BlendBuilder {
	return blendBuilder.withOption("c3_expr", expr.String(c3Expr))
}

func (blendBuilder *implBlendBuilder) C3ExprExpr(c3Expr expr.Expr) BlendBuilder {
	return blendBuilder.withOption("c3_expr", c3Expr)
}

func (blendBuilder *implBlendBuilder) AllExpr(allExpr string) BlendBuilder {
	return blendBuilder.withOption("all_expr", expr.String(allExpr))
}

func (blendBuilder *implBlendBuilder) AllExprExpr(allExpr expr.Expr) BlendBuilder {
	return blendBuilder.withOption("all_expr", allExpr)
}

func (blendBuilder *implBlendBuilder) C0Opacity(c0Opacity float64) BlendBuilder {
	return blendBuilder.withOption("c0_opacity", expr.Double(c0Opacity))
}

func (blendBuilder *implBlendBuilder) C0OpacityExpr(c0Opacity expr.Expr) BlendBuilder {
	return blendBuilder.withOption("c0_opacity", c0Opacity)
}

func (blendBuilder *implBlendBuilder) C1Opacity(c1Opacity float64) BlendBuilder {
	return blendBuilder.withOption("c1_opacity", expr.Double(c1Opacity))
}

func (blendBuilder *implBlendBuilder) C1OpacityExpr(c1Opacity expr.Expr) BlendBuilder {
	return blendBuilder.withOption("c1_opacity", c1Opacity)
}

func (blendBuilder *implBlendBuilder) C2Opacity(c2Opacity float64) BlendBuilder {
	return blendBuilder.withOption("c2_opacity", expr.Double(c2Opacity))
}

func (blendBuilder *implBlendBuilder) C2OpacityExpr(c2Opacity expr.Expr) BlendBuilder {
	return blendBuilder.withOption("c2_opacity", c2Opacity)
}

func (blendBuilder *implBlendBuilder) C3Opacity(c3Opacity float64) BlendBuilder {
	return blendBuilder.withOption("c3_opacity", expr.Double(c3Opacity))
}

func (blendBuilder *implBlendBuilder) C3OpacityExpr(c3Opacity expr.Expr) BlendBuilder {
	return blendBuilder.withOption("c3_opacity", c3Opacity)
}

func (blendBuilder *implBlendBuilder) AllOpacity(allOpacity float64) BlendBuilder {
	return blendBuilder.withOption("all_opacity", expr.Double(allOpacity))
}

func (blendBuilder *implBlendBuilder) AllOpacityExpr(allOpacity expr.Expr) BlendBuilder {
	return blendBuilder.withOption("all_opacity", allOpacity)
}

func (blendBuilder *implBlendBuilder) EofAction(eofAction int) BlendBuilder {
	return blendBuilder.withOption("eof_action", expr.Int(eofAction))
}

func (blendBuilder *implBlendBuilder) Shortest(shortest bool) BlendBuilder {
	return blendBuilder.withOption("shortest", expr.Bool(shortest))
}

func (blendBuilder *implBlendBuilder) Repeatlast(repeatlast bool) BlendBuilder {
	return blendBuilder.withOption("repeatlast", expr.Bool(repeatlast))
}

func (blendBuilder *implBlendBuilder) TsSyncMode(tsSyncMode int) BlendBuilder {
	return blendBuilder.withOption("ts_sync_mode", expr.Int(tsSyncMode))
}
