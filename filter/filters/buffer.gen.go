// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// BufferBuilder Buffer video frames, and make them accessible to the filterchain.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#buffer
type BufferBuilder interface {
	filter.Filter
	// Width (from 0 to INT_MAX) (default 0).
	Width(width int) BufferBuilder
	// Height (from 0 to INT_MAX) (default 0).
	Height(height int) BufferBuilder
	// PixFmt (default none).
	PixFmt(pixFmt expr.PixFmt) BufferBuilder
	// Sar sample aspect ratio (from 0 to DBL_MAX) (default 0/1).
	Sar(sar expr.Rational) BufferBuilder
	// PixelAspect sample aspect ratio (from 0 to DBL_MAX) (default 0/1).
	PixelAspect(pixelAspect expr.Rational) BufferBuilder
	// TimeBase (from 0 to DBL_MAX) (default 0/1).
	TimeBase(timeBase expr.Rational) BufferBuilder
	// FrameRate (from 0 to DBL_MAX) (default 0/1).
	FrameRate(frameRate expr.Rational) BufferBuilder
	// Colorspace select colorspace (from 0 to 14) (default unknown).
	Colorspace(colorspace int) BufferBuilder
	// Range select color range (from 0 to 2) (default unspecified).
	Range(rng int) BufferBuilder
}

// Buffer creates a new BufferBuilder to configure the "buffer" filter.
func Buffer(opts ...filter.Option) BufferBuilder {
	return &implBufferBuilder{
		f: filter.New("buffer", 1, opts...),
	}
}

type implBufferBuilder struct {
	f filter.Filter
}

func (bufferBuilder *implBufferBuilder) String() string {
	return bufferBuilder.f.String()
}

func (bufferBuilder *implBufferBuilder) Outputs() int {
	return bufferBuilder.f.Outputs()
}

func (bufferBuilder *implBufferBuilder) With(key string, value expr.Expr) filter.Filter {
	return bufferBuilder.withOption(key, value)
}

func (bufferBuilder *implBufferBuilder) withOption(key string, value expr.Expr) BufferBuilder {
	bCopy := *bufferBuilder
	bCopy.f = bufferBuilder.f.With(key, value)
	return &bCopy
}

func (bufferBuilder *implBufferBuilder) Width(width int) BufferBuilder {
	return bufferBuilder.withOption("width", expr.Int(width))
}

func (bufferBuilder *implBufferBuilder) Height(height int) BufferBuilder {
	return bufferBuilder.withOption("height", expr.Int(height))
}

func (bufferBuilder *implBufferBuilder) PixFmt(pixFmt expr.PixFmt) BufferBuilder {
	return bufferBuilder.withOption("pix_fmt", pixFmt)
}

func (bufferBuilder *implBufferBuilder) Sar(sar expr.Rational) BufferBuilder {
	return bufferBuilder.withOption("sar", sar)
}

func (bufferBuilder *implBufferBuilder) PixelAspect(pixelAspect expr.Rational) BufferBuilder {
	return bufferBuilder.withOption("pixel_aspect", pixelAspect)
}

func (bufferBuilder *implBufferBuilder) TimeBase(timeBase expr.Rational) BufferBuilder {
	return bufferBuilder.withOption("time_base", timeBase)
}

func (bufferBuilder *implBufferBuilder) FrameRate(frameRate expr.Rational) BufferBuilder {
	return bufferBuilder.withOption("frame_rate", frameRate)
}

func (bufferBuilder *implBufferBuilder) Colorspace(colorspace int) BufferBuilder {
	return bufferBuilder.withOption("colorspace", expr.Int(colorspace))
}

func (bufferBuilder *implBufferBuilder) Range(rng int) BufferBuilder {
	return bufferBuilder.withOption("range", expr.Int(rng))
}
