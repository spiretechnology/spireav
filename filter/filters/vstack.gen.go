// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// VstackBuilder Stack video inputs vertically.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#vstack
type VstackBuilder interface {
	filter.Filter
	// Inputs set number of inputs (from 2 to INT_MAX) (default 2).
	Inputs(inputs int) VstackBuilder
	// Shortest force termination when the shortest input terminates (default false).
	Shortest(shortest bool) VstackBuilder
}

// Vstack creates a new VstackBuilder to configure the "vstack" filter.
func Vstack(opts ...filter.Option) VstackBuilder {
	return &implVstackBuilder{
		f: filter.New("vstack", 1, opts...),
	}
}

type implVstackBuilder struct {
	f filter.Filter
}

func (vstackBuilder *implVstackBuilder) String() string {
	return vstackBuilder.f.String()
}

func (vstackBuilder *implVstackBuilder) Outputs() int {
	return vstackBuilder.f.Outputs()
}

func (vstackBuilder *implVstackBuilder) With(key string, value expr.Expr) filter.Filter {
	return vstackBuilder.withOption(key, value)
}

func (vstackBuilder *implVstackBuilder) withOption(key string, value expr.Expr) VstackBuilder {
	bCopy := *vstackBuilder
	bCopy.f = vstackBuilder.f.With(key, value)
	return &bCopy
}

func (vstackBuilder *implVstackBuilder) Inputs(inputs int) VstackBuilder {
	return vstackBuilder.withOption("inputs", expr.Int(inputs))
}

func (vstackBuilder *implVstackBuilder) Shortest(shortest bool) VstackBuilder {
	return vstackBuilder.withOption("shortest", expr.Bool(shortest))
}
