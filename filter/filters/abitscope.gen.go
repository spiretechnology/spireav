// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// AbitscopeBuilder Convert input audio to audio bit scope video output.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#abitscope
type AbitscopeBuilder interface {
	filter.Filter
	// Rate set video rate (default "25").
	Rate(rate expr.Rational) AbitscopeBuilder
	// R set video rate (default "25").
	R(r expr.Rational) AbitscopeBuilder
	// Size set video size (default "1024x256").
	Size(size expr.Size) AbitscopeBuilder
	// S set video size (default "1024x256").
	S(s expr.Size) AbitscopeBuilder
	// Colors set channels colors (default "red|green|blue|yellow|orange|lime|pink|magenta|brown").
	Colors(colors string) AbitscopeBuilder
	// Mode set output mode (from 0 to 1) (default bars).
	Mode(mode int) AbitscopeBuilder
	// M set output mode (from 0 to 1) (default bars).
	M(m int) AbitscopeBuilder
}

// Abitscope creates a new AbitscopeBuilder to configure the "abitscope" filter.
func Abitscope(opts ...filter.Option) AbitscopeBuilder {
	return &implAbitscopeBuilder{
		f: filter.New("abitscope", 1, opts...),
	}
}

type implAbitscopeBuilder struct {
	f filter.Filter
}

func (abitscopeBuilder *implAbitscopeBuilder) String() string {
	return abitscopeBuilder.f.String()
}

func (abitscopeBuilder *implAbitscopeBuilder) Outputs() int {
	return abitscopeBuilder.f.Outputs()
}

func (abitscopeBuilder *implAbitscopeBuilder) With(key string, value expr.Expr) filter.Filter {
	return abitscopeBuilder.withOption(key, value)
}

func (abitscopeBuilder *implAbitscopeBuilder) withOption(key string, value expr.Expr) AbitscopeBuilder {
	bCopy := *abitscopeBuilder
	bCopy.f = abitscopeBuilder.f.With(key, value)
	return &bCopy
}

func (abitscopeBuilder *implAbitscopeBuilder) Rate(rate expr.Rational) AbitscopeBuilder {
	return abitscopeBuilder.withOption("rate", rate)
}

func (abitscopeBuilder *implAbitscopeBuilder) R(r expr.Rational) AbitscopeBuilder {
	return abitscopeBuilder.withOption("r", r)
}

func (abitscopeBuilder *implAbitscopeBuilder) Size(size expr.Size) AbitscopeBuilder {
	return abitscopeBuilder.withOption("size", size)
}

func (abitscopeBuilder *implAbitscopeBuilder) S(s expr.Size) AbitscopeBuilder {
	return abitscopeBuilder.withOption("s", s)
}

func (abitscopeBuilder *implAbitscopeBuilder) Colors(colors string) AbitscopeBuilder {
	return abitscopeBuilder.withOption("colors", expr.String(colors))
}

func (abitscopeBuilder *implAbitscopeBuilder) Mode(mode int) AbitscopeBuilder {
	return abitscopeBuilder.withOption("mode", expr.Int(mode))
}

func (abitscopeBuilder *implAbitscopeBuilder) M(m int) AbitscopeBuilder {
	return abitscopeBuilder.withOption("m", expr.Int(m))
}
