// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// AechoBuilder Add echoing to the audio.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#aecho
type AechoBuilder interface {
	filter.Filter
	// InGain set signal input gain (from 0 to 1) (default 0.6).
	InGain(inGain float32) AechoBuilder
	// OutGain set signal output gain (from 0 to 1) (default 0.3).
	OutGain(outGain float32) AechoBuilder
	// Delays set list of signal delays (default "1000").
	Delays(delays string) AechoBuilder
	// Decays set list of signal decays (default "0.5").
	Decays(decays string) AechoBuilder
}

// Aecho creates a new AechoBuilder to configure the "aecho" filter.
func Aecho(opts ...filter.Option) AechoBuilder {
	return &implAechoBuilder{
		f: filter.New("aecho", 1, opts...),
	}
}

type implAechoBuilder struct {
	f filter.Filter
}

func (aechoBuilder *implAechoBuilder) String() string {
	return aechoBuilder.f.String()
}

func (aechoBuilder *implAechoBuilder) Outputs() int {
	return aechoBuilder.f.Outputs()
}

func (aechoBuilder *implAechoBuilder) With(key string, value expr.Expr) filter.Filter {
	return aechoBuilder.withOption(key, value)
}

func (aechoBuilder *implAechoBuilder) withOption(key string, value expr.Expr) AechoBuilder {
	bCopy := *aechoBuilder
	bCopy.f = aechoBuilder.f.With(key, value)
	return &bCopy
}

func (aechoBuilder *implAechoBuilder) InGain(inGain float32) AechoBuilder {
	return aechoBuilder.withOption("in_gain", expr.Float(inGain))
}

func (aechoBuilder *implAechoBuilder) OutGain(outGain float32) AechoBuilder {
	return aechoBuilder.withOption("out_gain", expr.Float(outGain))
}

func (aechoBuilder *implAechoBuilder) Delays(delays string) AechoBuilder {
	return aechoBuilder.withOption("delays", expr.String(delays))
}

func (aechoBuilder *implAechoBuilder) Decays(decays string) AechoBuilder {
	return aechoBuilder.withOption("decays", expr.String(decays))
}
