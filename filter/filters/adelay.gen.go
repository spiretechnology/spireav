// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// AdelayBuilder Delay one or more audio channels.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#adelay
type AdelayBuilder interface {
	filter.Filter
	// Delays set list of delays for each channel.
	Delays(delays string) AdelayBuilder
	// DelaysExpr set list of delays for each channel.
	DelaysExpr(delays expr.Expr) AdelayBuilder
	// All use last available delay for remained channels (default false).
	All(all bool) AdelayBuilder
	// Enable expression to enable or disable the filter.
	Enable(enable expr.Expr) AdelayBuilder
}

// Adelay creates a new AdelayBuilder to configure the "adelay" filter.
func Adelay(opts ...filter.Option) AdelayBuilder {
	return &implAdelayBuilder{
		f: filter.New("adelay", 1, opts...),
	}
}

type implAdelayBuilder struct {
	f filter.Filter
}

func (adelayBuilder *implAdelayBuilder) String() string {
	return adelayBuilder.f.String()
}

func (adelayBuilder *implAdelayBuilder) Outputs() int {
	return adelayBuilder.f.Outputs()
}

func (adelayBuilder *implAdelayBuilder) With(key string, value expr.Expr) filter.Filter {
	return adelayBuilder.withOption(key, value)
}

func (adelayBuilder *implAdelayBuilder) withOption(key string, value expr.Expr) AdelayBuilder {
	bCopy := *adelayBuilder
	bCopy.f = adelayBuilder.f.With(key, value)
	return &bCopy
}

func (adelayBuilder *implAdelayBuilder) Delays(delays string) AdelayBuilder {
	return adelayBuilder.withOption("delays", expr.String(delays))
}

func (adelayBuilder *implAdelayBuilder) DelaysExpr(delays expr.Expr) AdelayBuilder {
	return adelayBuilder.withOption("delays", delays)
}

func (adelayBuilder *implAdelayBuilder) All(all bool) AdelayBuilder {
	return adelayBuilder.withOption("all", expr.Bool(all))
}

func (adelayBuilder *implAdelayBuilder) Enable(enable expr.Expr) AdelayBuilder {
	return adelayBuilder.withOption("enable", enable)
}
