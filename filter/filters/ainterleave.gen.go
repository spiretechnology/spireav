// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// AinterleaveBuilder Temporally interleave audio inputs.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#ainterleave
type AinterleaveBuilder interface {
	filter.Filter
	// NbInputs set number of inputs (from 1 to INT_MAX) (default 2).
	NbInputs(nbInputs int) AinterleaveBuilder
	// N set number of inputs (from 1 to INT_MAX) (default 2).
	N(n int) AinterleaveBuilder
	// Duration how to determine the end-of-stream (from 0 to 2) (default longest).
	Duration(duration int) AinterleaveBuilder
}

// Ainterleave creates a new AinterleaveBuilder to configure the "ainterleave" filter.
func Ainterleave(opts ...filter.Option) AinterleaveBuilder {
	return &implAinterleaveBuilder{
		f: filter.New("ainterleave", 1, opts...),
	}
}

type implAinterleaveBuilder struct {
	f filter.Filter
}

func (ainterleaveBuilder *implAinterleaveBuilder) String() string {
	return ainterleaveBuilder.f.String()
}

func (ainterleaveBuilder *implAinterleaveBuilder) Outputs() int {
	return ainterleaveBuilder.f.Outputs()
}

func (ainterleaveBuilder *implAinterleaveBuilder) With(key string, value expr.Expr) filter.Filter {
	return ainterleaveBuilder.withOption(key, value)
}

func (ainterleaveBuilder *implAinterleaveBuilder) withOption(key string, value expr.Expr) AinterleaveBuilder {
	bCopy := *ainterleaveBuilder
	bCopy.f = ainterleaveBuilder.f.With(key, value)
	return &bCopy
}

func (ainterleaveBuilder *implAinterleaveBuilder) NbInputs(nbInputs int) AinterleaveBuilder {
	return ainterleaveBuilder.withOption("nb_inputs", expr.Int(nbInputs))
}

func (ainterleaveBuilder *implAinterleaveBuilder) N(n int) AinterleaveBuilder {
	return ainterleaveBuilder.withOption("n", expr.Int(n))
}

func (ainterleaveBuilder *implAinterleaveBuilder) Duration(duration int) AinterleaveBuilder {
	return ainterleaveBuilder.withOption("duration", expr.Int(duration))
}
