// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// VibranceBuilder Boost or alter saturation.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#vibrance
type VibranceBuilder interface {
	filter.Filter
	// Intensity set the intensity value (from -2 to 2) (default 0).
	Intensity(intensity float32) VibranceBuilder
	// IntensityExpr set the intensity value (from -2 to 2) (default 0).
	IntensityExpr(intensity expr.Expr) VibranceBuilder
	// Rbal set the red balance value (from -10 to 10) (default 1).
	Rbal(rbal float32) VibranceBuilder
	// RbalExpr set the red balance value (from -10 to 10) (default 1).
	RbalExpr(rbal expr.Expr) VibranceBuilder
	// Gbal set the green balance value (from -10 to 10) (default 1).
	Gbal(gbal float32) VibranceBuilder
	// GbalExpr set the green balance value (from -10 to 10) (default 1).
	GbalExpr(gbal expr.Expr) VibranceBuilder
	// Bbal set the blue balance value (from -10 to 10) (default 1).
	Bbal(bbal float32) VibranceBuilder
	// BbalExpr set the blue balance value (from -10 to 10) (default 1).
	BbalExpr(bbal expr.Expr) VibranceBuilder
	// Rlum set the red luma coefficient (from 0 to 1) (default 0.072186).
	Rlum(rlum float32) VibranceBuilder
	// RlumExpr set the red luma coefficient (from 0 to 1) (default 0.072186).
	RlumExpr(rlum expr.Expr) VibranceBuilder
	// Glum set the green luma coefficient (from 0 to 1) (default 0.715158).
	Glum(glum float32) VibranceBuilder
	// GlumExpr set the green luma coefficient (from 0 to 1) (default 0.715158).
	GlumExpr(glum expr.Expr) VibranceBuilder
	// Blum set the blue luma coefficient (from 0 to 1) (default 0.212656).
	Blum(blum float32) VibranceBuilder
	// BlumExpr set the blue luma coefficient (from 0 to 1) (default 0.212656).
	BlumExpr(blum expr.Expr) VibranceBuilder
	// Alternate use alternate colors (default false).
	Alternate(alternate bool) VibranceBuilder
	// AlternateExpr use alternate colors (default false).
	AlternateExpr(alternate expr.Expr) VibranceBuilder
	// Enable expression to enable or disable the filter.
	Enable(enable expr.Expr) VibranceBuilder
}

// Vibrance creates a new VibranceBuilder to configure the "vibrance" filter.
func Vibrance(opts ...filter.Option) VibranceBuilder {
	return &implVibranceBuilder{
		f: filter.New("vibrance", 1, opts...),
	}
}

type implVibranceBuilder struct {
	f filter.Filter
}

func (vibranceBuilder *implVibranceBuilder) String() string {
	return vibranceBuilder.f.String()
}

func (vibranceBuilder *implVibranceBuilder) Outputs() int {
	return vibranceBuilder.f.Outputs()
}

func (vibranceBuilder *implVibranceBuilder) With(key string, value expr.Expr) filter.Filter {
	return vibranceBuilder.withOption(key, value)
}

func (vibranceBuilder *implVibranceBuilder) withOption(key string, value expr.Expr) VibranceBuilder {
	bCopy := *vibranceBuilder
	bCopy.f = vibranceBuilder.f.With(key, value)
	return &bCopy
}

func (vibranceBuilder *implVibranceBuilder) Intensity(intensity float32) VibranceBuilder {
	return vibranceBuilder.withOption("intensity", expr.Float(intensity))
}

func (vibranceBuilder *implVibranceBuilder) IntensityExpr(intensity expr.Expr) VibranceBuilder {
	return vibranceBuilder.withOption("intensity", intensity)
}

func (vibranceBuilder *implVibranceBuilder) Rbal(rbal float32) VibranceBuilder {
	return vibranceBuilder.withOption("rbal", expr.Float(rbal))
}

func (vibranceBuilder *implVibranceBuilder) RbalExpr(rbal expr.Expr) VibranceBuilder {
	return vibranceBuilder.withOption("rbal", rbal)
}

func (vibranceBuilder *implVibranceBuilder) Gbal(gbal float32) VibranceBuilder {
	return vibranceBuilder.withOption("gbal", expr.Float(gbal))
}

func (vibranceBuilder *implVibranceBuilder) GbalExpr(gbal expr.Expr) VibranceBuilder {
	return vibranceBuilder.withOption("gbal", gbal)
}

func (vibranceBuilder *implVibranceBuilder) Bbal(bbal float32) VibranceBuilder {
	return vibranceBuilder.withOption("bbal", expr.Float(bbal))
}

func (vibranceBuilder *implVibranceBuilder) BbalExpr(bbal expr.Expr) VibranceBuilder {
	return vibranceBuilder.withOption("bbal", bbal)
}

func (vibranceBuilder *implVibranceBuilder) Rlum(rlum float32) VibranceBuilder {
	return vibranceBuilder.withOption("rlum", expr.Float(rlum))
}

func (vibranceBuilder *implVibranceBuilder) RlumExpr(rlum expr.Expr) VibranceBuilder {
	return vibranceBuilder.withOption("rlum", rlum)
}

func (vibranceBuilder *implVibranceBuilder) Glum(glum float32) VibranceBuilder {
	return vibranceBuilder.withOption("glum", expr.Float(glum))
}

func (vibranceBuilder *implVibranceBuilder) GlumExpr(glum expr.Expr) VibranceBuilder {
	return vibranceBuilder.withOption("glum", glum)
}

func (vibranceBuilder *implVibranceBuilder) Blum(blum float32) VibranceBuilder {
	return vibranceBuilder.withOption("blum", expr.Float(blum))
}

func (vibranceBuilder *implVibranceBuilder) BlumExpr(blum expr.Expr) VibranceBuilder {
	return vibranceBuilder.withOption("blum", blum)
}

func (vibranceBuilder *implVibranceBuilder) Alternate(alternate bool) VibranceBuilder {
	return vibranceBuilder.withOption("alternate", expr.Bool(alternate))
}

func (vibranceBuilder *implVibranceBuilder) AlternateExpr(alternate expr.Expr) VibranceBuilder {
	return vibranceBuilder.withOption("alternate", alternate)
}

func (vibranceBuilder *implVibranceBuilder) Enable(enable expr.Expr) VibranceBuilder {
	return vibranceBuilder.withOption("enable", enable)
}
