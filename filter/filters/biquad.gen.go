// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// BiquadBuilder Apply a biquad IIR filter with the given coefficients.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#biquad
type BiquadBuilder interface {
	filter.Filter
	// A0 (from INT_MIN to INT_MAX) (default 1).
	A0(a0 float64) BiquadBuilder
	// A0Expr (from INT_MIN to INT_MAX) (default 1).
	A0Expr(a0 expr.Expr) BiquadBuilder
	// A1 (from INT_MIN to INT_MAX) (default 0).
	A1(a1 float64) BiquadBuilder
	// A1Expr (from INT_MIN to INT_MAX) (default 0).
	A1Expr(a1 expr.Expr) BiquadBuilder
	// A2 (from INT_MIN to INT_MAX) (default 0).
	A2(a2 float64) BiquadBuilder
	// A2Expr (from INT_MIN to INT_MAX) (default 0).
	A2Expr(a2 expr.Expr) BiquadBuilder
	// B0 (from INT_MIN to INT_MAX) (default 0).
	B0(b0 float64) BiquadBuilder
	// B0Expr (from INT_MIN to INT_MAX) (default 0).
	B0Expr(b0 expr.Expr) BiquadBuilder
	// B1 (from INT_MIN to INT_MAX) (default 0).
	B1(b1 float64) BiquadBuilder
	// B1Expr (from INT_MIN to INT_MAX) (default 0).
	B1Expr(b1 expr.Expr) BiquadBuilder
	// B2 (from INT_MIN to INT_MAX) (default 0).
	B2(b2 float64) BiquadBuilder
	// B2Expr (from INT_MIN to INT_MAX) (default 0).
	B2Expr(b2 expr.Expr) BiquadBuilder
	// Mix set mix (from 0 to 1) (default 1).
	Mix(mix float64) BiquadBuilder
	// MixExpr set mix (from 0 to 1) (default 1).
	MixExpr(mix expr.Expr) BiquadBuilder
	// M set mix (from 0 to 1) (default 1).
	M(m float64) BiquadBuilder
	// MExpr set mix (from 0 to 1) (default 1).
	MExpr(m expr.Expr) BiquadBuilder
	// Channels set channels to filter (default "all").
	Channels(channels string) BiquadBuilder
	// ChannelsExpr set channels to filter (default "all").
	ChannelsExpr(channels expr.Expr) BiquadBuilder
	// C set channels to filter (default "all").
	C(c string) BiquadBuilder
	// CExpr set channels to filter (default "all").
	CExpr(c expr.Expr) BiquadBuilder
	// Normalize normalize coefficients (default false).
	Normalize(normalize bool) BiquadBuilder
	// NormalizeExpr normalize coefficients (default false).
	NormalizeExpr(normalize expr.Expr) BiquadBuilder
	// N normalize coefficients (default false).
	N(n bool) BiquadBuilder
	// NExpr normalize coefficients (default false).
	NExpr(n expr.Expr) BiquadBuilder
	// Transform set transform type (from 0 to 6) (default di).
	Transform(transform int) BiquadBuilder
	// A set transform type (from 0 to 6) (default di).
	A(a int) BiquadBuilder
	// Precision set filtering precision (from -1 to 3) (default auto).
	Precision(precision int) BiquadBuilder
	// R set filtering precision (from -1 to 3) (default auto).
	R(r int) BiquadBuilder
	// Blocksize set the block size (from 0 to 32768) (default 0).
	Blocksize(blocksize int) BiquadBuilder
	// B set the block size (from 0 to 32768) (default 0).
	B(b int) BiquadBuilder
}

// Biquad creates a new BiquadBuilder to configure the "biquad" filter.
func Biquad(opts ...filter.Option) BiquadBuilder {
	return &implBiquadBuilder{
		f: filter.New("biquad", 1, opts...),
	}
}

type implBiquadBuilder struct {
	f filter.Filter
}

func (biquadBuilder *implBiquadBuilder) String() string {
	return biquadBuilder.f.String()
}

func (biquadBuilder *implBiquadBuilder) Outputs() int {
	return biquadBuilder.f.Outputs()
}

func (biquadBuilder *implBiquadBuilder) With(key string, value expr.Expr) filter.Filter {
	return biquadBuilder.withOption(key, value)
}

func (biquadBuilder *implBiquadBuilder) withOption(key string, value expr.Expr) BiquadBuilder {
	bCopy := *biquadBuilder
	bCopy.f = biquadBuilder.f.With(key, value)
	return &bCopy
}

func (biquadBuilder *implBiquadBuilder) A0(a0 float64) BiquadBuilder {
	return biquadBuilder.withOption("a0", expr.Double(a0))
}

func (biquadBuilder *implBiquadBuilder) A0Expr(a0 expr.Expr) BiquadBuilder {
	return biquadBuilder.withOption("a0", a0)
}

func (biquadBuilder *implBiquadBuilder) A1(a1 float64) BiquadBuilder {
	return biquadBuilder.withOption("a1", expr.Double(a1))
}

func (biquadBuilder *implBiquadBuilder) A1Expr(a1 expr.Expr) BiquadBuilder {
	return biquadBuilder.withOption("a1", a1)
}

func (biquadBuilder *implBiquadBuilder) A2(a2 float64) BiquadBuilder {
	return biquadBuilder.withOption("a2", expr.Double(a2))
}

func (biquadBuilder *implBiquadBuilder) A2Expr(a2 expr.Expr) BiquadBuilder {
	return biquadBuilder.withOption("a2", a2)
}

func (biquadBuilder *implBiquadBuilder) B0(b0 float64) BiquadBuilder {
	return biquadBuilder.withOption("b0", expr.Double(b0))
}

func (biquadBuilder *implBiquadBuilder) B0Expr(b0 expr.Expr) BiquadBuilder {
	return biquadBuilder.withOption("b0", b0)
}

func (biquadBuilder *implBiquadBuilder) B1(b1 float64) BiquadBuilder {
	return biquadBuilder.withOption("b1", expr.Double(b1))
}

func (biquadBuilder *implBiquadBuilder) B1Expr(b1 expr.Expr) BiquadBuilder {
	return biquadBuilder.withOption("b1", b1)
}

func (biquadBuilder *implBiquadBuilder) B2(b2 float64) BiquadBuilder {
	return biquadBuilder.withOption("b2", expr.Double(b2))
}

func (biquadBuilder *implBiquadBuilder) B2Expr(b2 expr.Expr) BiquadBuilder {
	return biquadBuilder.withOption("b2", b2)
}

func (biquadBuilder *implBiquadBuilder) Mix(mix float64) BiquadBuilder {
	return biquadBuilder.withOption("mix", expr.Double(mix))
}

func (biquadBuilder *implBiquadBuilder) MixExpr(mix expr.Expr) BiquadBuilder {
	return biquadBuilder.withOption("mix", mix)
}

func (biquadBuilder *implBiquadBuilder) M(m float64) BiquadBuilder {
	return biquadBuilder.withOption("m", expr.Double(m))
}

func (biquadBuilder *implBiquadBuilder) MExpr(m expr.Expr) BiquadBuilder {
	return biquadBuilder.withOption("m", m)
}

func (biquadBuilder *implBiquadBuilder) Channels(channels string) BiquadBuilder {
	return biquadBuilder.withOption("channels", expr.String(channels))
}

func (biquadBuilder *implBiquadBuilder) ChannelsExpr(channels expr.Expr) BiquadBuilder {
	return biquadBuilder.withOption("channels", channels)
}

func (biquadBuilder *implBiquadBuilder) C(c string) BiquadBuilder {
	return biquadBuilder.withOption("c", expr.String(c))
}

func (biquadBuilder *implBiquadBuilder) CExpr(c expr.Expr) BiquadBuilder {
	return biquadBuilder.withOption("c", c)
}

func (biquadBuilder *implBiquadBuilder) Normalize(normalize bool) BiquadBuilder {
	return biquadBuilder.withOption("normalize", expr.Bool(normalize))
}

func (biquadBuilder *implBiquadBuilder) NormalizeExpr(normalize expr.Expr) BiquadBuilder {
	return biquadBuilder.withOption("normalize", normalize)
}

func (biquadBuilder *implBiquadBuilder) N(n bool) BiquadBuilder {
	return biquadBuilder.withOption("n", expr.Bool(n))
}

func (biquadBuilder *implBiquadBuilder) NExpr(n expr.Expr) BiquadBuilder {
	return biquadBuilder.withOption("n", n)
}

func (biquadBuilder *implBiquadBuilder) Transform(transform int) BiquadBuilder {
	return biquadBuilder.withOption("transform", expr.Int(transform))
}

func (biquadBuilder *implBiquadBuilder) A(a int) BiquadBuilder {
	return biquadBuilder.withOption("a", expr.Int(a))
}

func (biquadBuilder *implBiquadBuilder) Precision(precision int) BiquadBuilder {
	return biquadBuilder.withOption("precision", expr.Int(precision))
}

func (biquadBuilder *implBiquadBuilder) R(r int) BiquadBuilder {
	return biquadBuilder.withOption("r", expr.Int(r))
}

func (biquadBuilder *implBiquadBuilder) Blocksize(blocksize int) BiquadBuilder {
	return biquadBuilder.withOption("blocksize", expr.Int(blocksize))
}

func (biquadBuilder *implBiquadBuilder) B(b int) BiquadBuilder {
	return biquadBuilder.withOption("b", expr.Int(b))
}
