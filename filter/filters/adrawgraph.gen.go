// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// AdrawgraphBuilder Draw a graph using input audio metadata.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#adrawgraph
type AdrawgraphBuilder interface {
	filter.Filter
	// M1 set 1st metadata key (default "").
	M1(m1 string) AdrawgraphBuilder
	// Fg1 set 1st foreground color expression (default "0xffff0000").
	Fg1(fg1 expr.Color) AdrawgraphBuilder
	// Fg1Expr set 1st foreground color expression (default "0xffff0000").
	Fg1Expr(fg1 expr.Expr) AdrawgraphBuilder
	// M2 set 2nd metadata key (default "").
	M2(m2 string) AdrawgraphBuilder
	// Fg2 set 2nd foreground color expression (default "0xff00ff00").
	Fg2(fg2 expr.Color) AdrawgraphBuilder
	// Fg2Expr set 2nd foreground color expression (default "0xff00ff00").
	Fg2Expr(fg2 expr.Expr) AdrawgraphBuilder
	// M3 set 3rd metadata key (default "").
	M3(m3 string) AdrawgraphBuilder
	// Fg3 set 3rd foreground color expression (default "0xffff00ff").
	Fg3(fg3 expr.Color) AdrawgraphBuilder
	// Fg3Expr set 3rd foreground color expression (default "0xffff00ff").
	Fg3Expr(fg3 expr.Expr) AdrawgraphBuilder
	// M4 set 4th metadata key (default "").
	M4(m4 string) AdrawgraphBuilder
	// Fg4 set 4th foreground color expression (default "0xffffff00").
	Fg4(fg4 expr.Color) AdrawgraphBuilder
	// Fg4Expr set 4th foreground color expression (default "0xffffff00").
	Fg4Expr(fg4 expr.Expr) AdrawgraphBuilder
	// Bg set background color (default "white").
	Bg(bg expr.Color) AdrawgraphBuilder
	// Min set minimal value (from INT_MIN to INT_MAX) (default -1).
	Min(min float32) AdrawgraphBuilder
	// Max set maximal value (from INT_MIN to INT_MAX) (default 1).
	Max(max float32) AdrawgraphBuilder
	// Mode set graph mode (from 0 to 2) (default line).
	Mode(mode int) AdrawgraphBuilder
	// Slide set slide mode (from 0 to 4) (default frame).
	Slide(slide int) AdrawgraphBuilder
	// Size set graph size (default "900x256").
	Size(size expr.Size) AdrawgraphBuilder
	// S set graph size (default "900x256").
	S(s expr.Size) AdrawgraphBuilder
	// Rate set video rate (default "25").
	Rate(rate expr.Rational) AdrawgraphBuilder
	// R set video rate (default "25").
	R(r expr.Rational) AdrawgraphBuilder
}

// Adrawgraph creates a new AdrawgraphBuilder to configure the "adrawgraph" filter.
func Adrawgraph(opts ...filter.Option) AdrawgraphBuilder {
	return &implAdrawgraphBuilder{
		f: filter.New("adrawgraph", 1, opts...),
	}
}

type implAdrawgraphBuilder struct {
	f filter.Filter
}

func (adrawgraphBuilder *implAdrawgraphBuilder) String() string {
	return adrawgraphBuilder.f.String()
}

func (adrawgraphBuilder *implAdrawgraphBuilder) Outputs() int {
	return adrawgraphBuilder.f.Outputs()
}

func (adrawgraphBuilder *implAdrawgraphBuilder) With(key string, value expr.Expr) filter.Filter {
	return adrawgraphBuilder.withOption(key, value)
}

func (adrawgraphBuilder *implAdrawgraphBuilder) withOption(key string, value expr.Expr) AdrawgraphBuilder {
	bCopy := *adrawgraphBuilder
	bCopy.f = adrawgraphBuilder.f.With(key, value)
	return &bCopy
}

func (adrawgraphBuilder *implAdrawgraphBuilder) M1(m1 string) AdrawgraphBuilder {
	return adrawgraphBuilder.withOption("m1", expr.String(m1))
}

func (adrawgraphBuilder *implAdrawgraphBuilder) Fg1(fg1 expr.Color) AdrawgraphBuilder {
	return adrawgraphBuilder.withOption("fg1", fg1)
}

func (adrawgraphBuilder *implAdrawgraphBuilder) Fg1Expr(fg1 expr.Expr) AdrawgraphBuilder {
	return adrawgraphBuilder.withOption("fg1", fg1)
}

func (adrawgraphBuilder *implAdrawgraphBuilder) M2(m2 string) AdrawgraphBuilder {
	return adrawgraphBuilder.withOption("m2", expr.String(m2))
}

func (adrawgraphBuilder *implAdrawgraphBuilder) Fg2(fg2 expr.Color) AdrawgraphBuilder {
	return adrawgraphBuilder.withOption("fg2", fg2)
}

func (adrawgraphBuilder *implAdrawgraphBuilder) Fg2Expr(fg2 expr.Expr) AdrawgraphBuilder {
	return adrawgraphBuilder.withOption("fg2", fg2)
}

func (adrawgraphBuilder *implAdrawgraphBuilder) M3(m3 string) AdrawgraphBuilder {
	return adrawgraphBuilder.withOption("m3", expr.String(m3))
}

func (adrawgraphBuilder *implAdrawgraphBuilder) Fg3(fg3 expr.Color) AdrawgraphBuilder {
	return adrawgraphBuilder.withOption("fg3", fg3)
}

func (adrawgraphBuilder *implAdrawgraphBuilder) Fg3Expr(fg3 expr.Expr) AdrawgraphBuilder {
	return adrawgraphBuilder.withOption("fg3", fg3)
}

func (adrawgraphBuilder *implAdrawgraphBuilder) M4(m4 string) AdrawgraphBuilder {
	return adrawgraphBuilder.withOption("m4", expr.String(m4))
}

func (adrawgraphBuilder *implAdrawgraphBuilder) Fg4(fg4 expr.Color) AdrawgraphBuilder {
	return adrawgraphBuilder.withOption("fg4", fg4)
}

func (adrawgraphBuilder *implAdrawgraphBuilder) Fg4Expr(fg4 expr.Expr) AdrawgraphBuilder {
	return adrawgraphBuilder.withOption("fg4", fg4)
}

func (adrawgraphBuilder *implAdrawgraphBuilder) Bg(bg expr.Color) AdrawgraphBuilder {
	return adrawgraphBuilder.withOption("bg", bg)
}

func (adrawgraphBuilder *implAdrawgraphBuilder) Min(min float32) AdrawgraphBuilder {
	return adrawgraphBuilder.withOption("min", expr.Float(min))
}

func (adrawgraphBuilder *implAdrawgraphBuilder) Max(max float32) AdrawgraphBuilder {
	return adrawgraphBuilder.withOption("max", expr.Float(max))
}

func (adrawgraphBuilder *implAdrawgraphBuilder) Mode(mode int) AdrawgraphBuilder {
	return adrawgraphBuilder.withOption("mode", expr.Int(mode))
}

func (adrawgraphBuilder *implAdrawgraphBuilder) Slide(slide int) AdrawgraphBuilder {
	return adrawgraphBuilder.withOption("slide", expr.Int(slide))
}

func (adrawgraphBuilder *implAdrawgraphBuilder) Size(size expr.Size) AdrawgraphBuilder {
	return adrawgraphBuilder.withOption("size", size)
}

func (adrawgraphBuilder *implAdrawgraphBuilder) S(s expr.Size) AdrawgraphBuilder {
	return adrawgraphBuilder.withOption("s", s)
}

func (adrawgraphBuilder *implAdrawgraphBuilder) Rate(rate expr.Rational) AdrawgraphBuilder {
	return adrawgraphBuilder.withOption("rate", rate)
}

func (adrawgraphBuilder *implAdrawgraphBuilder) R(r expr.Rational) AdrawgraphBuilder {
	return adrawgraphBuilder.withOption("r", r)
}
