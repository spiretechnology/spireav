// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// AssBuilder Render ASS subtitles onto input video using the libass library.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#ass
type AssBuilder interface {
	filter.Filter
	// Filename set the filename of file to read.
	Filename(filename string) AssBuilder
	// F set the filename of file to read.
	F(f string) AssBuilder
	// OriginalSize set the size of the original video (used to scale fonts).
	OriginalSize(originalSize expr.Size) AssBuilder
	// Fontsdir set the directory containing the fonts to read.
	Fontsdir(fontsdir string) AssBuilder
	// Alpha enable processing of alpha channel (default false).
	Alpha(alpha bool) AssBuilder
	// Shaping set shaping engine (from -1 to 1) (default auto).
	Shaping(shaping int) AssBuilder
}

// Ass creates a new AssBuilder to configure the "ass" filter.
func Ass(opts ...filter.Option) AssBuilder {
	return &implAssBuilder{
		f: filter.New("ass", 1, opts...),
	}
}

type implAssBuilder struct {
	f filter.Filter
}

func (assBuilder *implAssBuilder) String() string {
	return assBuilder.f.String()
}

func (assBuilder *implAssBuilder) Outputs() int {
	return assBuilder.f.Outputs()
}

func (assBuilder *implAssBuilder) With(key string, value expr.Expr) filter.Filter {
	return assBuilder.withOption(key, value)
}

func (assBuilder *implAssBuilder) withOption(key string, value expr.Expr) AssBuilder {
	bCopy := *assBuilder
	bCopy.f = assBuilder.f.With(key, value)
	return &bCopy
}

func (assBuilder *implAssBuilder) Filename(filename string) AssBuilder {
	return assBuilder.withOption("filename", expr.String(filename))
}

func (assBuilder *implAssBuilder) F(f string) AssBuilder {
	return assBuilder.withOption("f", expr.String(f))
}

func (assBuilder *implAssBuilder) OriginalSize(originalSize expr.Size) AssBuilder {
	return assBuilder.withOption("original_size", originalSize)
}

func (assBuilder *implAssBuilder) Fontsdir(fontsdir string) AssBuilder {
	return assBuilder.withOption("fontsdir", expr.String(fontsdir))
}

func (assBuilder *implAssBuilder) Alpha(alpha bool) AssBuilder {
	return assBuilder.withOption("alpha", expr.Bool(alpha))
}

func (assBuilder *implAssBuilder) Shaping(shaping int) AssBuilder {
	return assBuilder.withOption("shaping", expr.Int(shaping))
}
