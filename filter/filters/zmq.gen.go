// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// ZmqBuilder Receive commands through ZMQ and broker them to filters.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#zmq
type ZmqBuilder interface {
	filter.Filter
	// BindAddress set bind address (default "tcp://*:5555").
	BindAddress(bindAddress string) ZmqBuilder
	// B set bind address (default "tcp://*:5555").
	B(b string) ZmqBuilder
}

// Zmq creates a new ZmqBuilder to configure the "zmq" filter.
func Zmq(opts ...filter.Option) ZmqBuilder {
	return &implZmqBuilder{
		f: filter.New("zmq", 1, opts...),
	}
}

type implZmqBuilder struct {
	f filter.Filter
}

func (zmqBuilder *implZmqBuilder) String() string {
	return zmqBuilder.f.String()
}

func (zmqBuilder *implZmqBuilder) Outputs() int {
	return zmqBuilder.f.Outputs()
}

func (zmqBuilder *implZmqBuilder) With(key string, value expr.Expr) filter.Filter {
	return zmqBuilder.withOption(key, value)
}

func (zmqBuilder *implZmqBuilder) withOption(key string, value expr.Expr) ZmqBuilder {
	bCopy := *zmqBuilder
	bCopy.f = zmqBuilder.f.With(key, value)
	return &bCopy
}

func (zmqBuilder *implZmqBuilder) BindAddress(bindAddress string) ZmqBuilder {
	return zmqBuilder.withOption("bind_address", expr.String(bindAddress))
}

func (zmqBuilder *implZmqBuilder) B(b string) ZmqBuilder {
	return zmqBuilder.withOption("b", expr.String(b))
}
