// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// TinterlaceBuilder Perform temporal field interlacing.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#tinterlace
type TinterlaceBuilder interface {
	filter.Filter
	// Mode select interlace mode (from 0 to 7) (default merge).
	Mode(mode int) TinterlaceBuilder
}

// Tinterlace creates a new TinterlaceBuilder to configure the "tinterlace" filter.
func Tinterlace(opts ...filter.Option) TinterlaceBuilder {
	return &implTinterlaceBuilder{
		f: filter.New("tinterlace", 1, opts...),
	}
}

type implTinterlaceBuilder struct {
	f filter.Filter
}

func (tinterlaceBuilder *implTinterlaceBuilder) String() string {
	return tinterlaceBuilder.f.String()
}

func (tinterlaceBuilder *implTinterlaceBuilder) Outputs() int {
	return tinterlaceBuilder.f.Outputs()
}

func (tinterlaceBuilder *implTinterlaceBuilder) With(key string, value expr.Expr) filter.Filter {
	return tinterlaceBuilder.withOption(key, value)
}

func (tinterlaceBuilder *implTinterlaceBuilder) withOption(key string, value expr.Expr) TinterlaceBuilder {
	bCopy := *tinterlaceBuilder
	bCopy.f = tinterlaceBuilder.f.With(key, value)
	return &bCopy
}

func (tinterlaceBuilder *implTinterlaceBuilder) Mode(mode int) TinterlaceBuilder {
	return tinterlaceBuilder.withOption("mode", expr.Int(mode))
}
