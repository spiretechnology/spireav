// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// ChannelsplitBuilder Split audio into per-channel streams.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#channelsplit
type ChannelsplitBuilder interface {
	filter.Filter
	// ChannelLayout Input channel layout. (default "stereo").
	ChannelLayout(channelLayout expr.ChannelLayout) ChannelsplitBuilder
	// Channels Channels to extract. (default "all").
	Channels(channels string) ChannelsplitBuilder
}

// Channelsplit creates a new ChannelsplitBuilder to configure the "channelsplit" filter.
func Channelsplit(outputs int, opts ...filter.Option) ChannelsplitBuilder {
	f := filter.New("channelsplit", outputs, opts...)
	f = f.With("outputs", expr.Int(outputs))
	return &implChannelsplitBuilder{f: f}
}

type implChannelsplitBuilder struct {
	f filter.Filter
}

func (channelsplitBuilder *implChannelsplitBuilder) String() string {
	return channelsplitBuilder.f.String()
}

func (channelsplitBuilder *implChannelsplitBuilder) Outputs() int {
	return channelsplitBuilder.f.Outputs()
}

func (channelsplitBuilder *implChannelsplitBuilder) With(key string, value expr.Expr) filter.Filter {
	return channelsplitBuilder.withOption(key, value)
}

func (channelsplitBuilder *implChannelsplitBuilder) withOption(key string, value expr.Expr) ChannelsplitBuilder {
	bCopy := *channelsplitBuilder
	bCopy.f = channelsplitBuilder.f.With(key, value)
	return &bCopy
}

func (channelsplitBuilder *implChannelsplitBuilder) ChannelLayout(channelLayout expr.ChannelLayout) ChannelsplitBuilder {
	return channelsplitBuilder.withOption("channel_layout", channelLayout)
}

func (channelsplitBuilder *implChannelsplitBuilder) Channels(channels string) ChannelsplitBuilder {
	return channelsplitBuilder.withOption("channels", expr.String(channels))
}
