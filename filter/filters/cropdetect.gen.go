// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// CropdetectBuilder Auto-detect crop size.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#cropdetect
type CropdetectBuilder interface {
	filter.Filter
	// Limit Threshold below which the pixel is considered black (from 0 to 65535) (default 0.0941176).
	Limit(limit float32) CropdetectBuilder
	// LimitExpr Threshold below which the pixel is considered black (from 0 to 65535) (default 0.0941176).
	LimitExpr(limit expr.Expr) CropdetectBuilder
	// Round Value by which the width/height should be divisible (from 0 to INT_MAX) (default 16).
	Round(round int) CropdetectBuilder
	// Reset Recalculate the crop area after this many frames (from 0 to INT_MAX) (default 0).
	Reset(reset int) CropdetectBuilder
	// Skip Number of initial frames to skip (from 0 to INT_MAX) (default 2).
	Skip(skip int) CropdetectBuilder
	// ResetCount Recalculate the crop area after this many frames (from 0 to INT_MAX) (default 0).
	ResetCount(resetCount int) CropdetectBuilder
	// MaxOutliers Threshold count of outliers (from 0 to INT_MAX) (default 0).
	MaxOutliers(maxOutliers int) CropdetectBuilder
	// Mode set mode (from 0 to 1) (default black).
	Mode(mode int) CropdetectBuilder
	// High Set high threshold for edge detection (from 0 to 1) (default 0.0980392).
	High(high float32) CropdetectBuilder
	// Low Set low threshold for edge detection (from 0 to 1) (default 0.0588235).
	Low(low float32) CropdetectBuilder
	// MvThreshold motion vector threshold when estimating video window size (from 0 to 100) (default 8).
	MvThreshold(mvThreshold int) CropdetectBuilder
}

// Cropdetect creates a new CropdetectBuilder to configure the "cropdetect" filter.
func Cropdetect(opts ...filter.Option) CropdetectBuilder {
	return &implCropdetectBuilder{
		f: filter.New("cropdetect", 1, opts...),
	}
}

type implCropdetectBuilder struct {
	f filter.Filter
}

func (cropdetectBuilder *implCropdetectBuilder) String() string {
	return cropdetectBuilder.f.String()
}

func (cropdetectBuilder *implCropdetectBuilder) Outputs() int {
	return cropdetectBuilder.f.Outputs()
}

func (cropdetectBuilder *implCropdetectBuilder) With(key string, value expr.Expr) filter.Filter {
	return cropdetectBuilder.withOption(key, value)
}

func (cropdetectBuilder *implCropdetectBuilder) withOption(key string, value expr.Expr) CropdetectBuilder {
	bCopy := *cropdetectBuilder
	bCopy.f = cropdetectBuilder.f.With(key, value)
	return &bCopy
}

func (cropdetectBuilder *implCropdetectBuilder) Limit(limit float32) CropdetectBuilder {
	return cropdetectBuilder.withOption("limit", expr.Float(limit))
}

func (cropdetectBuilder *implCropdetectBuilder) LimitExpr(limit expr.Expr) CropdetectBuilder {
	return cropdetectBuilder.withOption("limit", limit)
}

func (cropdetectBuilder *implCropdetectBuilder) Round(round int) CropdetectBuilder {
	return cropdetectBuilder.withOption("round", expr.Int(round))
}

func (cropdetectBuilder *implCropdetectBuilder) Reset(reset int) CropdetectBuilder {
	return cropdetectBuilder.withOption("reset", expr.Int(reset))
}

func (cropdetectBuilder *implCropdetectBuilder) Skip(skip int) CropdetectBuilder {
	return cropdetectBuilder.withOption("skip", expr.Int(skip))
}

func (cropdetectBuilder *implCropdetectBuilder) ResetCount(resetCount int) CropdetectBuilder {
	return cropdetectBuilder.withOption("reset_count", expr.Int(resetCount))
}

func (cropdetectBuilder *implCropdetectBuilder) MaxOutliers(maxOutliers int) CropdetectBuilder {
	return cropdetectBuilder.withOption("max_outliers", expr.Int(maxOutliers))
}

func (cropdetectBuilder *implCropdetectBuilder) Mode(mode int) CropdetectBuilder {
	return cropdetectBuilder.withOption("mode", expr.Int(mode))
}

func (cropdetectBuilder *implCropdetectBuilder) High(high float32) CropdetectBuilder {
	return cropdetectBuilder.withOption("high", expr.Float(high))
}

func (cropdetectBuilder *implCropdetectBuilder) Low(low float32) CropdetectBuilder {
	return cropdetectBuilder.withOption("low", expr.Float(low))
}

func (cropdetectBuilder *implCropdetectBuilder) MvThreshold(mvThreshold int) CropdetectBuilder {
	return cropdetectBuilder.withOption("mv_threshold", expr.Int(mvThreshold))
}
