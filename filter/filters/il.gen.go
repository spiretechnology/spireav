// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// IlBuilder Deinterleave or interleave fields.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#il
type IlBuilder interface {
	filter.Filter
	// LumaMode select luma mode (from 0 to 2) (default none).
	LumaMode(lumaMode int) IlBuilder
	// LumaModeExpr select luma mode (from 0 to 2) (default none).
	LumaModeExpr(lumaMode expr.Expr) IlBuilder
	// L select luma mode (from 0 to 2) (default none).
	L(l int) IlBuilder
	// LExpr select luma mode (from 0 to 2) (default none).
	LExpr(l expr.Expr) IlBuilder
	// ChromaMode select chroma mode (from 0 to 2) (default none).
	ChromaMode(chromaMode int) IlBuilder
	// ChromaModeExpr select chroma mode (from 0 to 2) (default none).
	ChromaModeExpr(chromaMode expr.Expr) IlBuilder
	// C select chroma mode (from 0 to 2) (default none).
	C(c int) IlBuilder
	// CExpr select chroma mode (from 0 to 2) (default none).
	CExpr(c expr.Expr) IlBuilder
	// AlphaMode select alpha mode (from 0 to 2) (default none).
	AlphaMode(alphaMode int) IlBuilder
	// AlphaModeExpr select alpha mode (from 0 to 2) (default none).
	AlphaModeExpr(alphaMode expr.Expr) IlBuilder
	// A select alpha mode (from 0 to 2) (default none).
	A(a int) IlBuilder
	// AExpr select alpha mode (from 0 to 2) (default none).
	AExpr(a expr.Expr) IlBuilder
	// LumaSwap swap luma fields (default false).
	LumaSwap(lumaSwap bool) IlBuilder
	// LumaSwapExpr swap luma fields (default false).
	LumaSwapExpr(lumaSwap expr.Expr) IlBuilder
	// Ls swap luma fields (default false).
	Ls(ls bool) IlBuilder
	// LsExpr swap luma fields (default false).
	LsExpr(ls expr.Expr) IlBuilder
	// ChromaSwap swap chroma fields (default false).
	ChromaSwap(chromaSwap bool) IlBuilder
	// ChromaSwapExpr swap chroma fields (default false).
	ChromaSwapExpr(chromaSwap expr.Expr) IlBuilder
	// Cs swap chroma fields (default false).
	Cs(cs bool) IlBuilder
	// CsExpr swap chroma fields (default false).
	CsExpr(cs expr.Expr) IlBuilder
	// AlphaSwap swap alpha fields (default false).
	AlphaSwap(alphaSwap bool) IlBuilder
	// AlphaSwapExpr swap alpha fields (default false).
	AlphaSwapExpr(alphaSwap expr.Expr) IlBuilder
	// As swap alpha fields (default false).
	As(as bool) IlBuilder
	// AsExpr swap alpha fields (default false).
	AsExpr(as expr.Expr) IlBuilder
	// Enable expression to enable or disable the filter.
	Enable(enable expr.Expr) IlBuilder
}

// Il creates a new IlBuilder to configure the "il" filter.
func Il(opts ...filter.Option) IlBuilder {
	return &implIlBuilder{
		f: filter.New("il", 1, opts...),
	}
}

type implIlBuilder struct {
	f filter.Filter
}

func (ilBuilder *implIlBuilder) String() string {
	return ilBuilder.f.String()
}

func (ilBuilder *implIlBuilder) Outputs() int {
	return ilBuilder.f.Outputs()
}

func (ilBuilder *implIlBuilder) With(key string, value expr.Expr) filter.Filter {
	return ilBuilder.withOption(key, value)
}

func (ilBuilder *implIlBuilder) withOption(key string, value expr.Expr) IlBuilder {
	bCopy := *ilBuilder
	bCopy.f = ilBuilder.f.With(key, value)
	return &bCopy
}

func (ilBuilder *implIlBuilder) LumaMode(lumaMode int) IlBuilder {
	return ilBuilder.withOption("luma_mode", expr.Int(lumaMode))
}

func (ilBuilder *implIlBuilder) LumaModeExpr(lumaMode expr.Expr) IlBuilder {
	return ilBuilder.withOption("luma_mode", lumaMode)
}

func (ilBuilder *implIlBuilder) L(l int) IlBuilder {
	return ilBuilder.withOption("l", expr.Int(l))
}

func (ilBuilder *implIlBuilder) LExpr(l expr.Expr) IlBuilder {
	return ilBuilder.withOption("l", l)
}

func (ilBuilder *implIlBuilder) ChromaMode(chromaMode int) IlBuilder {
	return ilBuilder.withOption("chroma_mode", expr.Int(chromaMode))
}

func (ilBuilder *implIlBuilder) ChromaModeExpr(chromaMode expr.Expr) IlBuilder {
	return ilBuilder.withOption("chroma_mode", chromaMode)
}

func (ilBuilder *implIlBuilder) C(c int) IlBuilder {
	return ilBuilder.withOption("c", expr.Int(c))
}

func (ilBuilder *implIlBuilder) CExpr(c expr.Expr) IlBuilder {
	return ilBuilder.withOption("c", c)
}

func (ilBuilder *implIlBuilder) AlphaMode(alphaMode int) IlBuilder {
	return ilBuilder.withOption("alpha_mode", expr.Int(alphaMode))
}

func (ilBuilder *implIlBuilder) AlphaModeExpr(alphaMode expr.Expr) IlBuilder {
	return ilBuilder.withOption("alpha_mode", alphaMode)
}

func (ilBuilder *implIlBuilder) A(a int) IlBuilder {
	return ilBuilder.withOption("a", expr.Int(a))
}

func (ilBuilder *implIlBuilder) AExpr(a expr.Expr) IlBuilder {
	return ilBuilder.withOption("a", a)
}

func (ilBuilder *implIlBuilder) LumaSwap(lumaSwap bool) IlBuilder {
	return ilBuilder.withOption("luma_swap", expr.Bool(lumaSwap))
}

func (ilBuilder *implIlBuilder) LumaSwapExpr(lumaSwap expr.Expr) IlBuilder {
	return ilBuilder.withOption("luma_swap", lumaSwap)
}

func (ilBuilder *implIlBuilder) Ls(ls bool) IlBuilder {
	return ilBuilder.withOption("ls", expr.Bool(ls))
}

func (ilBuilder *implIlBuilder) LsExpr(ls expr.Expr) IlBuilder {
	return ilBuilder.withOption("ls", ls)
}

func (ilBuilder *implIlBuilder) ChromaSwap(chromaSwap bool) IlBuilder {
	return ilBuilder.withOption("chroma_swap", expr.Bool(chromaSwap))
}

func (ilBuilder *implIlBuilder) ChromaSwapExpr(chromaSwap expr.Expr) IlBuilder {
	return ilBuilder.withOption("chroma_swap", chromaSwap)
}

func (ilBuilder *implIlBuilder) Cs(cs bool) IlBuilder {
	return ilBuilder.withOption("cs", expr.Bool(cs))
}

func (ilBuilder *implIlBuilder) CsExpr(cs expr.Expr) IlBuilder {
	return ilBuilder.withOption("cs", cs)
}

func (ilBuilder *implIlBuilder) AlphaSwap(alphaSwap bool) IlBuilder {
	return ilBuilder.withOption("alpha_swap", expr.Bool(alphaSwap))
}

func (ilBuilder *implIlBuilder) AlphaSwapExpr(alphaSwap expr.Expr) IlBuilder {
	return ilBuilder.withOption("alpha_swap", alphaSwap)
}

func (ilBuilder *implIlBuilder) As(as bool) IlBuilder {
	return ilBuilder.withOption("as", expr.Bool(as))
}

func (ilBuilder *implIlBuilder) AsExpr(as expr.Expr) IlBuilder {
	return ilBuilder.withOption("as", as)
}

func (ilBuilder *implIlBuilder) Enable(enable expr.Expr) IlBuilder {
	return ilBuilder.withOption("enable", enable)
}
