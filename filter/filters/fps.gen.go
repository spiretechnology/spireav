// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// FpsBuilder Force constant framerate.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#fps
type FpsBuilder interface {
	filter.Filter
	// Fps A string describing desired output framerate (default "25").
	Fps(fps string) FpsBuilder
	// StartTime Assume the first PTS should be this value. (from -DBL_MAX to DBL_MAX) (default DBL_MAX).
	StartTime(startTime float64) FpsBuilder
	// Round set rounding method for timestamps (from 0 to 5) (default near).
	Round(round int) FpsBuilder
	// EofAction action performed for last frame (from 0 to 1) (default round).
	EofAction(eofAction int) FpsBuilder
}

// Fps creates a new FpsBuilder to configure the "fps" filter.
func Fps(opts ...filter.Option) FpsBuilder {
	return &implFpsBuilder{
		f: filter.New("fps", 1, opts...),
	}
}

type implFpsBuilder struct {
	f filter.Filter
}

func (fpsBuilder *implFpsBuilder) String() string {
	return fpsBuilder.f.String()
}

func (fpsBuilder *implFpsBuilder) Outputs() int {
	return fpsBuilder.f.Outputs()
}

func (fpsBuilder *implFpsBuilder) With(key string, value expr.Expr) filter.Filter {
	return fpsBuilder.withOption(key, value)
}

func (fpsBuilder *implFpsBuilder) withOption(key string, value expr.Expr) FpsBuilder {
	bCopy := *fpsBuilder
	bCopy.f = fpsBuilder.f.With(key, value)
	return &bCopy
}

func (fpsBuilder *implFpsBuilder) Fps(fps string) FpsBuilder {
	return fpsBuilder.withOption("fps", expr.String(fps))
}

func (fpsBuilder *implFpsBuilder) StartTime(startTime float64) FpsBuilder {
	return fpsBuilder.withOption("start_time", expr.Double(startTime))
}

func (fpsBuilder *implFpsBuilder) Round(round int) FpsBuilder {
	return fpsBuilder.withOption("round", expr.Int(round))
}

func (fpsBuilder *implFpsBuilder) EofAction(eofAction int) FpsBuilder {
	return fpsBuilder.withOption("eof_action", expr.Int(eofAction))
}
