// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"time"

	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// AcrossfadeBuilder Cross fade two input audio streams.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#acrossfade
type AcrossfadeBuilder interface {
	filter.Filter
	// NbSamples set number of samples for cross fade duration (from 1 to 2.14748e+08) (default 44100).
	NbSamples(nbSamples int) AcrossfadeBuilder
	// Ns set number of samples for cross fade duration (from 1 to 2.14748e+08) (default 44100).
	Ns(ns int) AcrossfadeBuilder
	// Duration set cross fade duration (default 0).
	Duration(duration time.Duration) AcrossfadeBuilder
	// D set cross fade duration (default 0).
	D(d time.Duration) AcrossfadeBuilder
	// Overlap overlap 1st stream end with 2nd stream start (default true).
	Overlap(overlap bool) AcrossfadeBuilder
	// O overlap 1st stream end with 2nd stream start (default true).
	O(o bool) AcrossfadeBuilder
	// Curve1 set fade curve type for 1st stream (from -1 to 22) (default tri).
	Curve1(curve1 int) AcrossfadeBuilder
	// C1 set fade curve type for 1st stream (from -1 to 22) (default tri).
	C1(c1 int) AcrossfadeBuilder
	// Curve2 set fade curve type for 2nd stream (from -1 to 22) (default tri).
	Curve2(curve2 int) AcrossfadeBuilder
	// C2 set fade curve type for 2nd stream (from -1 to 22) (default tri).
	C2(c2 int) AcrossfadeBuilder
}

// Acrossfade creates a new AcrossfadeBuilder to configure the "acrossfade" filter.
func Acrossfade(opts ...filter.Option) AcrossfadeBuilder {
	return &implAcrossfadeBuilder{
		f: filter.New("acrossfade", 1, opts...),
	}
}

type implAcrossfadeBuilder struct {
	f filter.Filter
}

func (acrossfadeBuilder *implAcrossfadeBuilder) String() string {
	return acrossfadeBuilder.f.String()
}

func (acrossfadeBuilder *implAcrossfadeBuilder) Outputs() int {
	return acrossfadeBuilder.f.Outputs()
}

func (acrossfadeBuilder *implAcrossfadeBuilder) With(key string, value expr.Expr) filter.Filter {
	return acrossfadeBuilder.withOption(key, value)
}

func (acrossfadeBuilder *implAcrossfadeBuilder) withOption(key string, value expr.Expr) AcrossfadeBuilder {
	bCopy := *acrossfadeBuilder
	bCopy.f = acrossfadeBuilder.f.With(key, value)
	return &bCopy
}

func (acrossfadeBuilder *implAcrossfadeBuilder) NbSamples(nbSamples int) AcrossfadeBuilder {
	return acrossfadeBuilder.withOption("nb_samples", expr.Int(nbSamples))
}

func (acrossfadeBuilder *implAcrossfadeBuilder) Ns(ns int) AcrossfadeBuilder {
	return acrossfadeBuilder.withOption("ns", expr.Int(ns))
}

func (acrossfadeBuilder *implAcrossfadeBuilder) Duration(duration time.Duration) AcrossfadeBuilder {
	return acrossfadeBuilder.withOption("duration", expr.Duration(duration))
}

func (acrossfadeBuilder *implAcrossfadeBuilder) D(d time.Duration) AcrossfadeBuilder {
	return acrossfadeBuilder.withOption("d", expr.Duration(d))
}

func (acrossfadeBuilder *implAcrossfadeBuilder) Overlap(overlap bool) AcrossfadeBuilder {
	return acrossfadeBuilder.withOption("overlap", expr.Bool(overlap))
}

func (acrossfadeBuilder *implAcrossfadeBuilder) O(o bool) AcrossfadeBuilder {
	return acrossfadeBuilder.withOption("o", expr.Bool(o))
}

func (acrossfadeBuilder *implAcrossfadeBuilder) Curve1(curve1 int) AcrossfadeBuilder {
	return acrossfadeBuilder.withOption("curve1", expr.Int(curve1))
}

func (acrossfadeBuilder *implAcrossfadeBuilder) C1(c1 int) AcrossfadeBuilder {
	return acrossfadeBuilder.withOption("c1", expr.Int(c1))
}

func (acrossfadeBuilder *implAcrossfadeBuilder) Curve2(curve2 int) AcrossfadeBuilder {
	return acrossfadeBuilder.withOption("curve2", expr.Int(curve2))
}

func (acrossfadeBuilder *implAcrossfadeBuilder) C2(c2 int) AcrossfadeBuilder {
	return acrossfadeBuilder.withOption("c2", expr.Int(c2))
}
