// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// AmixBuilder Audio mixing.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#amix
type AmixBuilder interface {
	filter.Filter
	// Inputs Number of inputs. (from 1 to 32767) (default 2).
	Inputs(inputs int) AmixBuilder
	// Duration How to determine the end-of-stream. (from 0 to 2) (default longest).
	Duration(duration int) AmixBuilder
	// DropoutTransition Transition time, in seconds, for volume renormalization when an input stream ends. (from 0 to INT_MAX) (default 2).
	DropoutTransition(dropoutTransition float32) AmixBuilder
	// Weights Set weight for each input. (default "1 1").
	Weights(weights string) AmixBuilder
	// WeightsExpr Set weight for each input. (default "1 1").
	WeightsExpr(weights expr.Expr) AmixBuilder
	// Normalize Scale inputs (default true).
	Normalize(normalize bool) AmixBuilder
	// NormalizeExpr Scale inputs (default true).
	NormalizeExpr(normalize expr.Expr) AmixBuilder
}

// Amix creates a new AmixBuilder to configure the "amix" filter.
func Amix(opts ...filter.Option) AmixBuilder {
	return &implAmixBuilder{
		f: filter.New("amix", 1, opts...),
	}
}

type implAmixBuilder struct {
	f filter.Filter
}

func (amixBuilder *implAmixBuilder) String() string {
	return amixBuilder.f.String()
}

func (amixBuilder *implAmixBuilder) Outputs() int {
	return amixBuilder.f.Outputs()
}

func (amixBuilder *implAmixBuilder) With(key string, value expr.Expr) filter.Filter {
	return amixBuilder.withOption(key, value)
}

func (amixBuilder *implAmixBuilder) withOption(key string, value expr.Expr) AmixBuilder {
	bCopy := *amixBuilder
	bCopy.f = amixBuilder.f.With(key, value)
	return &bCopy
}

func (amixBuilder *implAmixBuilder) Inputs(inputs int) AmixBuilder {
	return amixBuilder.withOption("inputs", expr.Int(inputs))
}

func (amixBuilder *implAmixBuilder) Duration(duration int) AmixBuilder {
	return amixBuilder.withOption("duration", expr.Int(duration))
}

func (amixBuilder *implAmixBuilder) DropoutTransition(dropoutTransition float32) AmixBuilder {
	return amixBuilder.withOption("dropout_transition", expr.Float(dropoutTransition))
}

func (amixBuilder *implAmixBuilder) Weights(weights string) AmixBuilder {
	return amixBuilder.withOption("weights", expr.String(weights))
}

func (amixBuilder *implAmixBuilder) WeightsExpr(weights expr.Expr) AmixBuilder {
	return amixBuilder.withOption("weights", weights)
}

func (amixBuilder *implAmixBuilder) Normalize(normalize bool) AmixBuilder {
	return amixBuilder.withOption("normalize", expr.Bool(normalize))
}

func (amixBuilder *implAmixBuilder) NormalizeExpr(normalize expr.Expr) AmixBuilder {
	return amixBuilder.withOption("normalize", normalize)
}
