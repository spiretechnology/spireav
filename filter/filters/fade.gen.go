// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"time"

	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// FadeBuilder Fade in/out input video.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#fade
type FadeBuilder interface {
	filter.Filter
	// Type set the fade direction (from 0 to 1) (default in).
	Type(typ int) FadeBuilder
	// T set the fade direction (from 0 to 1) (default in).
	T(t int) FadeBuilder
	// StartFrame Number of the first frame to which to apply the effect. (from 0 to INT_MAX) (default 0).
	StartFrame(startFrame int) FadeBuilder
	// S Number of the first frame to which to apply the effect. (from 0 to INT_MAX) (default 0).
	S(s int) FadeBuilder
	// NbFrames Number of frames to which the effect should be applied. (from 1 to INT_MAX) (default 25).
	NbFrames(nbFrames int) FadeBuilder
	// N Number of frames to which the effect should be applied. (from 1 to INT_MAX) (default 25).
	N(n int) FadeBuilder
	// Alpha fade alpha if it is available on the input (default false).
	Alpha(alpha bool) FadeBuilder
	// StartTime Number of seconds of the beginning of the effect. (default 0).
	StartTime(startTime time.Duration) FadeBuilder
	// St Number of seconds of the beginning of the effect. (default 0).
	St(st time.Duration) FadeBuilder
	// Duration Duration of the effect in seconds. (default 0).
	Duration(duration time.Duration) FadeBuilder
	// D Duration of the effect in seconds. (default 0).
	D(d time.Duration) FadeBuilder
	// Color set color (default "black").
	Color(color expr.Color) FadeBuilder
	// C set color (default "black").
	C(c expr.Color) FadeBuilder
	// Enable expression to enable or disable the filter.
	Enable(enable expr.Expr) FadeBuilder
}

// Fade creates a new FadeBuilder to configure the "fade" filter.
func Fade(opts ...filter.Option) FadeBuilder {
	return &implFadeBuilder{
		f: filter.New("fade", 1, opts...),
	}
}

type implFadeBuilder struct {
	f filter.Filter
}

func (fadeBuilder *implFadeBuilder) String() string {
	return fadeBuilder.f.String()
}

func (fadeBuilder *implFadeBuilder) Outputs() int {
	return fadeBuilder.f.Outputs()
}

func (fadeBuilder *implFadeBuilder) With(key string, value expr.Expr) filter.Filter {
	return fadeBuilder.withOption(key, value)
}

func (fadeBuilder *implFadeBuilder) withOption(key string, value expr.Expr) FadeBuilder {
	bCopy := *fadeBuilder
	bCopy.f = fadeBuilder.f.With(key, value)
	return &bCopy
}

func (fadeBuilder *implFadeBuilder) Type(typ int) FadeBuilder {
	return fadeBuilder.withOption("type", expr.Int(typ))
}

func (fadeBuilder *implFadeBuilder) T(t int) FadeBuilder {
	return fadeBuilder.withOption("t", expr.Int(t))
}

func (fadeBuilder *implFadeBuilder) StartFrame(startFrame int) FadeBuilder {
	return fadeBuilder.withOption("start_frame", expr.Int(startFrame))
}

func (fadeBuilder *implFadeBuilder) S(s int) FadeBuilder {
	return fadeBuilder.withOption("s", expr.Int(s))
}

func (fadeBuilder *implFadeBuilder) NbFrames(nbFrames int) FadeBuilder {
	return fadeBuilder.withOption("nb_frames", expr.Int(nbFrames))
}

func (fadeBuilder *implFadeBuilder) N(n int) FadeBuilder {
	return fadeBuilder.withOption("n", expr.Int(n))
}

func (fadeBuilder *implFadeBuilder) Alpha(alpha bool) FadeBuilder {
	return fadeBuilder.withOption("alpha", expr.Bool(alpha))
}

func (fadeBuilder *implFadeBuilder) StartTime(startTime time.Duration) FadeBuilder {
	return fadeBuilder.withOption("start_time", expr.Duration(startTime))
}

func (fadeBuilder *implFadeBuilder) St(st time.Duration) FadeBuilder {
	return fadeBuilder.withOption("st", expr.Duration(st))
}

func (fadeBuilder *implFadeBuilder) Duration(duration time.Duration) FadeBuilder {
	return fadeBuilder.withOption("duration", expr.Duration(duration))
}

func (fadeBuilder *implFadeBuilder) D(d time.Duration) FadeBuilder {
	return fadeBuilder.withOption("d", expr.Duration(d))
}

func (fadeBuilder *implFadeBuilder) Color(color expr.Color) FadeBuilder {
	return fadeBuilder.withOption("color", color)
}

func (fadeBuilder *implFadeBuilder) C(c expr.Color) FadeBuilder {
	return fadeBuilder.withOption("c", c)
}

func (fadeBuilder *implFadeBuilder) Enable(enable expr.Expr) FadeBuilder {
	return fadeBuilder.withOption("enable", enable)
}
