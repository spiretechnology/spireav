// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// AsegmentBuilder Segment audio stream.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#asegment
type AsegmentBuilder interface {
	filter.Filter
	// Timestamps timestamps of input at which to split input.
	Timestamps(timestamps string) AsegmentBuilder
	// Samples samples at which to split input.
	Samples(samples string) AsegmentBuilder
}

// Asegment creates a new AsegmentBuilder to configure the "asegment" filter.
func Asegment(outputs int, opts ...filter.Option) AsegmentBuilder {
	f := filter.New("asegment", outputs, opts...)
	f = f.With("outputs", expr.Int(outputs))
	return &implAsegmentBuilder{f: f}
}

type implAsegmentBuilder struct {
	f filter.Filter
}

func (asegmentBuilder *implAsegmentBuilder) String() string {
	return asegmentBuilder.f.String()
}

func (asegmentBuilder *implAsegmentBuilder) Outputs() int {
	return asegmentBuilder.f.Outputs()
}

func (asegmentBuilder *implAsegmentBuilder) With(key string, value expr.Expr) filter.Filter {
	return asegmentBuilder.withOption(key, value)
}

func (asegmentBuilder *implAsegmentBuilder) withOption(key string, value expr.Expr) AsegmentBuilder {
	bCopy := *asegmentBuilder
	bCopy.f = asegmentBuilder.f.With(key, value)
	return &bCopy
}

func (asegmentBuilder *implAsegmentBuilder) Timestamps(timestamps string) AsegmentBuilder {
	return asegmentBuilder.withOption("timestamps", expr.String(timestamps))
}

func (asegmentBuilder *implAsegmentBuilder) Samples(samples string) AsegmentBuilder {
	return asegmentBuilder.withOption("samples", expr.String(samples))
}
