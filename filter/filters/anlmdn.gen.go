// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"time"

	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// AnlmdnBuilder Reduce broadband noise from stream using Non-Local Means.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#anlmdn
type AnlmdnBuilder interface {
	filter.Filter
	// Strength set denoising strength (from 1e-05 to 10000) (default 1e-05).
	Strength(strength float32) AnlmdnBuilder
	// StrengthExpr set denoising strength (from 1e-05 to 10000) (default 1e-05).
	StrengthExpr(strength expr.Expr) AnlmdnBuilder
	// S set denoising strength (from 1e-05 to 10000) (default 1e-05).
	S(s float32) AnlmdnBuilder
	// SExpr set denoising strength (from 1e-05 to 10000) (default 1e-05).
	SExpr(s expr.Expr) AnlmdnBuilder
	// Patch set patch duration (default 0.002).
	Patch(patch time.Duration) AnlmdnBuilder
	// PatchExpr set patch duration (default 0.002).
	PatchExpr(patch expr.Expr) AnlmdnBuilder
	// P set patch duration (default 0.002).
	P(p time.Duration) AnlmdnBuilder
	// PExpr set patch duration (default 0.002).
	PExpr(p expr.Expr) AnlmdnBuilder
	// Research set research duration (default 0.006).
	Research(research time.Duration) AnlmdnBuilder
	// ResearchExpr set research duration (default 0.006).
	ResearchExpr(research expr.Expr) AnlmdnBuilder
	// R set research duration (default 0.006).
	R(r time.Duration) AnlmdnBuilder
	// RExpr set research duration (default 0.006).
	RExpr(r expr.Expr) AnlmdnBuilder
	// Output set output mode (from 0 to 2) (default o).
	Output(output int) AnlmdnBuilder
	// OutputExpr set output mode (from 0 to 2) (default o).
	OutputExpr(output expr.Expr) AnlmdnBuilder
	// O set output mode (from 0 to 2) (default o).
	O(o int) AnlmdnBuilder
	// OExpr set output mode (from 0 to 2) (default o).
	OExpr(o expr.Expr) AnlmdnBuilder
	// Smooth set smooth factor (from 1 to 1000) (default 11).
	Smooth(smooth float32) AnlmdnBuilder
	// SmoothExpr set smooth factor (from 1 to 1000) (default 11).
	SmoothExpr(smooth expr.Expr) AnlmdnBuilder
	// M set smooth factor (from 1 to 1000) (default 11).
	M(m float32) AnlmdnBuilder
	// MExpr set smooth factor (from 1 to 1000) (default 11).
	MExpr(m expr.Expr) AnlmdnBuilder
	// Enable expression to enable or disable the filter.
	Enable(enable expr.Expr) AnlmdnBuilder
}

// Anlmdn creates a new AnlmdnBuilder to configure the "anlmdn" filter.
func Anlmdn(opts ...filter.Option) AnlmdnBuilder {
	return &implAnlmdnBuilder{
		f: filter.New("anlmdn", 1, opts...),
	}
}

type implAnlmdnBuilder struct {
	f filter.Filter
}

func (anlmdnBuilder *implAnlmdnBuilder) String() string {
	return anlmdnBuilder.f.String()
}

func (anlmdnBuilder *implAnlmdnBuilder) Outputs() int {
	return anlmdnBuilder.f.Outputs()
}

func (anlmdnBuilder *implAnlmdnBuilder) With(key string, value expr.Expr) filter.Filter {
	return anlmdnBuilder.withOption(key, value)
}

func (anlmdnBuilder *implAnlmdnBuilder) withOption(key string, value expr.Expr) AnlmdnBuilder {
	bCopy := *anlmdnBuilder
	bCopy.f = anlmdnBuilder.f.With(key, value)
	return &bCopy
}

func (anlmdnBuilder *implAnlmdnBuilder) Strength(strength float32) AnlmdnBuilder {
	return anlmdnBuilder.withOption("strength", expr.Float(strength))
}

func (anlmdnBuilder *implAnlmdnBuilder) StrengthExpr(strength expr.Expr) AnlmdnBuilder {
	return anlmdnBuilder.withOption("strength", strength)
}

func (anlmdnBuilder *implAnlmdnBuilder) S(s float32) AnlmdnBuilder {
	return anlmdnBuilder.withOption("s", expr.Float(s))
}

func (anlmdnBuilder *implAnlmdnBuilder) SExpr(s expr.Expr) AnlmdnBuilder {
	return anlmdnBuilder.withOption("s", s)
}

func (anlmdnBuilder *implAnlmdnBuilder) Patch(patch time.Duration) AnlmdnBuilder {
	return anlmdnBuilder.withOption("patch", expr.Duration(patch))
}

func (anlmdnBuilder *implAnlmdnBuilder) PatchExpr(patch expr.Expr) AnlmdnBuilder {
	return anlmdnBuilder.withOption("patch", patch)
}

func (anlmdnBuilder *implAnlmdnBuilder) P(p time.Duration) AnlmdnBuilder {
	return anlmdnBuilder.withOption("p", expr.Duration(p))
}

func (anlmdnBuilder *implAnlmdnBuilder) PExpr(p expr.Expr) AnlmdnBuilder {
	return anlmdnBuilder.withOption("p", p)
}

func (anlmdnBuilder *implAnlmdnBuilder) Research(research time.Duration) AnlmdnBuilder {
	return anlmdnBuilder.withOption("research", expr.Duration(research))
}

func (anlmdnBuilder *implAnlmdnBuilder) ResearchExpr(research expr.Expr) AnlmdnBuilder {
	return anlmdnBuilder.withOption("research", research)
}

func (anlmdnBuilder *implAnlmdnBuilder) R(r time.Duration) AnlmdnBuilder {
	return anlmdnBuilder.withOption("r", expr.Duration(r))
}

func (anlmdnBuilder *implAnlmdnBuilder) RExpr(r expr.Expr) AnlmdnBuilder {
	return anlmdnBuilder.withOption("r", r)
}

func (anlmdnBuilder *implAnlmdnBuilder) Output(output int) AnlmdnBuilder {
	return anlmdnBuilder.withOption("output", expr.Int(output))
}

func (anlmdnBuilder *implAnlmdnBuilder) OutputExpr(output expr.Expr) AnlmdnBuilder {
	return anlmdnBuilder.withOption("output", output)
}

func (anlmdnBuilder *implAnlmdnBuilder) O(o int) AnlmdnBuilder {
	return anlmdnBuilder.withOption("o", expr.Int(o))
}

func (anlmdnBuilder *implAnlmdnBuilder) OExpr(o expr.Expr) AnlmdnBuilder {
	return anlmdnBuilder.withOption("o", o)
}

func (anlmdnBuilder *implAnlmdnBuilder) Smooth(smooth float32) AnlmdnBuilder {
	return anlmdnBuilder.withOption("smooth", expr.Float(smooth))
}

func (anlmdnBuilder *implAnlmdnBuilder) SmoothExpr(smooth expr.Expr) AnlmdnBuilder {
	return anlmdnBuilder.withOption("smooth", smooth)
}

func (anlmdnBuilder *implAnlmdnBuilder) M(m float32) AnlmdnBuilder {
	return anlmdnBuilder.withOption("m", expr.Float(m))
}

func (anlmdnBuilder *implAnlmdnBuilder) MExpr(m expr.Expr) AnlmdnBuilder {
	return anlmdnBuilder.withOption("m", m)
}

func (anlmdnBuilder *implAnlmdnBuilder) Enable(enable expr.Expr) AnlmdnBuilder {
	return anlmdnBuilder.withOption("enable", enable)
}
