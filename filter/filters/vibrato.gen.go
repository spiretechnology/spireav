// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// VibratoBuilder Apply vibrato effect.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#vibrato
type VibratoBuilder interface {
	filter.Filter
	// F set frequency in hertz (from 0.1 to 20000) (default 5).
	F(f float64) VibratoBuilder
	// D set depth as percentage (from 0 to 1) (default 0.5).
	D(d float64) VibratoBuilder
}

// Vibrato creates a new VibratoBuilder to configure the "vibrato" filter.
func Vibrato(opts ...filter.Option) VibratoBuilder {
	return &implVibratoBuilder{
		f: filter.New("vibrato", 1, opts...),
	}
}

type implVibratoBuilder struct {
	f filter.Filter
}

func (vibratoBuilder *implVibratoBuilder) String() string {
	return vibratoBuilder.f.String()
}

func (vibratoBuilder *implVibratoBuilder) Outputs() int {
	return vibratoBuilder.f.Outputs()
}

func (vibratoBuilder *implVibratoBuilder) With(key string, value expr.Expr) filter.Filter {
	return vibratoBuilder.withOption(key, value)
}

func (vibratoBuilder *implVibratoBuilder) withOption(key string, value expr.Expr) VibratoBuilder {
	bCopy := *vibratoBuilder
	bCopy.f = vibratoBuilder.f.With(key, value)
	return &bCopy
}

func (vibratoBuilder *implVibratoBuilder) F(f float64) VibratoBuilder {
	return vibratoBuilder.withOption("f", expr.Double(f))
}

func (vibratoBuilder *implVibratoBuilder) D(d float64) VibratoBuilder {
	return vibratoBuilder.withOption("d", expr.Double(d))
}
