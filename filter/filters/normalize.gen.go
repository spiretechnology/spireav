// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// NormalizeBuilder Normalize RGB video.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#normalize
type NormalizeBuilder interface {
	filter.Filter
	// Blackpt output color to which darkest input color is mapped (default "black").
	Blackpt(blackpt expr.Color) NormalizeBuilder
	// BlackptExpr output color to which darkest input color is mapped (default "black").
	BlackptExpr(blackpt expr.Expr) NormalizeBuilder
	// Whitept output color to which brightest input color is mapped (default "white").
	Whitept(whitept expr.Color) NormalizeBuilder
	// WhiteptExpr output color to which brightest input color is mapped (default "white").
	WhiteptExpr(whitept expr.Expr) NormalizeBuilder
	// Smoothing amount of temporal smoothing of the input range, to reduce flicker (from 0 to 2.68435e+08) (default 0).
	Smoothing(smoothing int) NormalizeBuilder
	// Independence proportion of independent to linked channel normalization (from 0 to 1) (default 1).
	Independence(independence float32) NormalizeBuilder
	// IndependenceExpr proportion of independent to linked channel normalization (from 0 to 1) (default 1).
	IndependenceExpr(independence expr.Expr) NormalizeBuilder
	// Strength strength of filter, from no effect to full normalization (from 0 to 1) (default 1).
	Strength(strength float32) NormalizeBuilder
	// StrengthExpr strength of filter, from no effect to full normalization (from 0 to 1) (default 1).
	StrengthExpr(strength expr.Expr) NormalizeBuilder
}

// Normalize creates a new NormalizeBuilder to configure the "normalize" filter.
func Normalize(opts ...filter.Option) NormalizeBuilder {
	return &implNormalizeBuilder{
		f: filter.New("normalize", 1, opts...),
	}
}

type implNormalizeBuilder struct {
	f filter.Filter
}

func (normalizeBuilder *implNormalizeBuilder) String() string {
	return normalizeBuilder.f.String()
}

func (normalizeBuilder *implNormalizeBuilder) Outputs() int {
	return normalizeBuilder.f.Outputs()
}

func (normalizeBuilder *implNormalizeBuilder) With(key string, value expr.Expr) filter.Filter {
	return normalizeBuilder.withOption(key, value)
}

func (normalizeBuilder *implNormalizeBuilder) withOption(key string, value expr.Expr) NormalizeBuilder {
	bCopy := *normalizeBuilder
	bCopy.f = normalizeBuilder.f.With(key, value)
	return &bCopy
}

func (normalizeBuilder *implNormalizeBuilder) Blackpt(blackpt expr.Color) NormalizeBuilder {
	return normalizeBuilder.withOption("blackpt", blackpt)
}

func (normalizeBuilder *implNormalizeBuilder) BlackptExpr(blackpt expr.Expr) NormalizeBuilder {
	return normalizeBuilder.withOption("blackpt", blackpt)
}

func (normalizeBuilder *implNormalizeBuilder) Whitept(whitept expr.Color) NormalizeBuilder {
	return normalizeBuilder.withOption("whitept", whitept)
}

func (normalizeBuilder *implNormalizeBuilder) WhiteptExpr(whitept expr.Expr) NormalizeBuilder {
	return normalizeBuilder.withOption("whitept", whitept)
}

func (normalizeBuilder *implNormalizeBuilder) Smoothing(smoothing int) NormalizeBuilder {
	return normalizeBuilder.withOption("smoothing", expr.Int(smoothing))
}

func (normalizeBuilder *implNormalizeBuilder) Independence(independence float32) NormalizeBuilder {
	return normalizeBuilder.withOption("independence", expr.Float(independence))
}

func (normalizeBuilder *implNormalizeBuilder) IndependenceExpr(independence expr.Expr) NormalizeBuilder {
	return normalizeBuilder.withOption("independence", independence)
}

func (normalizeBuilder *implNormalizeBuilder) Strength(strength float32) NormalizeBuilder {
	return normalizeBuilder.withOption("strength", expr.Float(strength))
}

func (normalizeBuilder *implNormalizeBuilder) StrengthExpr(strength expr.Expr) NormalizeBuilder {
	return normalizeBuilder.withOption("strength", strength)
}
