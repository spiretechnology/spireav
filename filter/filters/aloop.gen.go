// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"time"

	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// AloopBuilder Loop audio samples.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#aloop
type AloopBuilder interface {
	filter.Filter
	// Loop number of loops (from -1 to INT_MAX) (default 0).
	Loop(loop int) AloopBuilder
	// Size max number of samples to loop (from 0 to INT_MAX) (default 0).
	Size(size int64) AloopBuilder
	// Start set the loop start sample (from -1 to I64_MAX) (default 0).
	Start(start int64) AloopBuilder
	// Time set the loop start time (default INT64_MAX).
	Time(time time.Duration) AloopBuilder
}

// Aloop creates a new AloopBuilder to configure the "aloop" filter.
func Aloop(opts ...filter.Option) AloopBuilder {
	return &implAloopBuilder{
		f: filter.New("aloop", 1, opts...),
	}
}

type implAloopBuilder struct {
	f filter.Filter
}

func (aloopBuilder *implAloopBuilder) String() string {
	return aloopBuilder.f.String()
}

func (aloopBuilder *implAloopBuilder) Outputs() int {
	return aloopBuilder.f.Outputs()
}

func (aloopBuilder *implAloopBuilder) With(key string, value expr.Expr) filter.Filter {
	return aloopBuilder.withOption(key, value)
}

func (aloopBuilder *implAloopBuilder) withOption(key string, value expr.Expr) AloopBuilder {
	bCopy := *aloopBuilder
	bCopy.f = aloopBuilder.f.With(key, value)
	return &bCopy
}

func (aloopBuilder *implAloopBuilder) Loop(loop int) AloopBuilder {
	return aloopBuilder.withOption("loop", expr.Int(loop))
}

func (aloopBuilder *implAloopBuilder) Size(size int64) AloopBuilder {
	return aloopBuilder.withOption("size", expr.Int64(size))
}

func (aloopBuilder *implAloopBuilder) Start(start int64) AloopBuilder {
	return aloopBuilder.withOption("start", expr.Int64(start))
}

func (aloopBuilder *implAloopBuilder) Time(time time.Duration) AloopBuilder {
	return aloopBuilder.withOption("time", expr.Duration(time))
}
