// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// SMPTEHDBarsBuilder corresponds to the "smptehdbars" FFmpeg filter.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#smptehdbars
type SMPTEHDBarsBuilder interface {
	filter.Filter
	// Size sets the "s" option on the filter.
	Size(width, height int) SMPTEHDBarsBuilder
	// FrameRate sets the "r" option on the filter.
	FrameRate(frameRate expr.Expr) SMPTEHDBarsBuilder
	// Duration sets the "d" option on the filter.
	Duration(duration string) SMPTEHDBarsBuilder
}

// SMPTEHDBars creates a new SMPTEHDBarsBuilder to configure the "smptehdbars" filter.
func SMPTEHDBars(opts ...filter.Option) SMPTEHDBarsBuilder {
	return &implSMPTEHDBarsBuilder{
		f: filter.New("smptehdbars", 1, opts...),
	}
}

type implSMPTEHDBarsBuilder struct {
	f filter.Filter
}

func (b *implSMPTEHDBarsBuilder) String() string {
	return b.f.String()
}

func (b *implSMPTEHDBarsBuilder) Outputs() int {
	return b.f.Outputs()
}

func (b *implSMPTEHDBarsBuilder) With(key string, value expr.Expr) filter.Filter {
	return b.withOption(key, value)
}

func (b *implSMPTEHDBarsBuilder) withOption(key string, value expr.Expr) SMPTEHDBarsBuilder {
	bCopy := *b
	bCopy.f = b.f.With(key, value)
	return &bCopy
}

func (b *implSMPTEHDBarsBuilder) Size(width, height int) SMPTEHDBarsBuilder {
	return b.withOption("s", expr.Size(width, height))
}

func (b *implSMPTEHDBarsBuilder) FrameRate(frameRate expr.Expr) SMPTEHDBarsBuilder {
	return b.withOption("r", frameRate)
}

func (b *implSMPTEHDBarsBuilder) Duration(duration string) SMPTEHDBarsBuilder {
	return b.withOption("d", expr.String(duration))
}
