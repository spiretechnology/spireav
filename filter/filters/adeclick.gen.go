// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// AdeclickBuilder Remove impulsive noise from input audio.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#adeclick
type AdeclickBuilder interface {
	filter.Filter
	// Window set window size (from 10 to 100) (default 55).
	Window(window float64) AdeclickBuilder
	// W set window size (from 10 to 100) (default 55).
	W(w float64) AdeclickBuilder
	// Overlap set window overlap (from 50 to 95) (default 75).
	Overlap(overlap float64) AdeclickBuilder
	// O set window overlap (from 50 to 95) (default 75).
	O(o float64) AdeclickBuilder
	// Arorder set autoregression order (from 0 to 25) (default 2).
	Arorder(arorder float64) AdeclickBuilder
	// A set autoregression order (from 0 to 25) (default 2).
	A(a float64) AdeclickBuilder
	// Threshold set threshold (from 1 to 100) (default 2).
	Threshold(threshold float64) AdeclickBuilder
	// T set threshold (from 1 to 100) (default 2).
	T(t float64) AdeclickBuilder
	// Burst set burst fusion (from 0 to 10) (default 2).
	Burst(burst float64) AdeclickBuilder
	// B set burst fusion (from 0 to 10) (default 2).
	B(b float64) AdeclickBuilder
	// Method set overlap method (from 0 to 1) (default add).
	Method(method int) AdeclickBuilder
	// M set overlap method (from 0 to 1) (default add).
	M(m int) AdeclickBuilder
}

// Adeclick creates a new AdeclickBuilder to configure the "adeclick" filter.
func Adeclick(opts ...filter.Option) AdeclickBuilder {
	return &implAdeclickBuilder{
		f: filter.New("adeclick", 1, opts...),
	}
}

type implAdeclickBuilder struct {
	f filter.Filter
}

func (adeclickBuilder *implAdeclickBuilder) String() string {
	return adeclickBuilder.f.String()
}

func (adeclickBuilder *implAdeclickBuilder) Outputs() int {
	return adeclickBuilder.f.Outputs()
}

func (adeclickBuilder *implAdeclickBuilder) With(key string, value expr.Expr) filter.Filter {
	return adeclickBuilder.withOption(key, value)
}

func (adeclickBuilder *implAdeclickBuilder) withOption(key string, value expr.Expr) AdeclickBuilder {
	bCopy := *adeclickBuilder
	bCopy.f = adeclickBuilder.f.With(key, value)
	return &bCopy
}

func (adeclickBuilder *implAdeclickBuilder) Window(window float64) AdeclickBuilder {
	return adeclickBuilder.withOption("window", expr.Double(window))
}

func (adeclickBuilder *implAdeclickBuilder) W(w float64) AdeclickBuilder {
	return adeclickBuilder.withOption("w", expr.Double(w))
}

func (adeclickBuilder *implAdeclickBuilder) Overlap(overlap float64) AdeclickBuilder {
	return adeclickBuilder.withOption("overlap", expr.Double(overlap))
}

func (adeclickBuilder *implAdeclickBuilder) O(o float64) AdeclickBuilder {
	return adeclickBuilder.withOption("o", expr.Double(o))
}

func (adeclickBuilder *implAdeclickBuilder) Arorder(arorder float64) AdeclickBuilder {
	return adeclickBuilder.withOption("arorder", expr.Double(arorder))
}

func (adeclickBuilder *implAdeclickBuilder) A(a float64) AdeclickBuilder {
	return adeclickBuilder.withOption("a", expr.Double(a))
}

func (adeclickBuilder *implAdeclickBuilder) Threshold(threshold float64) AdeclickBuilder {
	return adeclickBuilder.withOption("threshold", expr.Double(threshold))
}

func (adeclickBuilder *implAdeclickBuilder) T(t float64) AdeclickBuilder {
	return adeclickBuilder.withOption("t", expr.Double(t))
}

func (adeclickBuilder *implAdeclickBuilder) Burst(burst float64) AdeclickBuilder {
	return adeclickBuilder.withOption("burst", expr.Double(burst))
}

func (adeclickBuilder *implAdeclickBuilder) B(b float64) AdeclickBuilder {
	return adeclickBuilder.withOption("b", expr.Double(b))
}

func (adeclickBuilder *implAdeclickBuilder) Method(method int) AdeclickBuilder {
	return adeclickBuilder.withOption("method", expr.Int(method))
}

func (adeclickBuilder *implAdeclickBuilder) M(m int) AdeclickBuilder {
	return adeclickBuilder.withOption("m", expr.Int(m))
}
