// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// ChromashiftBuilder Shift chroma.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#chromashift
type ChromashiftBuilder interface {
	filter.Filter
	// Cbh shift chroma-blue horizontally (from -255 to 255) (default 0).
	Cbh(cbh int) ChromashiftBuilder
	// CbhExpr shift chroma-blue horizontally (from -255 to 255) (default 0).
	CbhExpr(cbh expr.Expr) ChromashiftBuilder
	// Cbv shift chroma-blue vertically (from -255 to 255) (default 0).
	Cbv(cbv int) ChromashiftBuilder
	// CbvExpr shift chroma-blue vertically (from -255 to 255) (default 0).
	CbvExpr(cbv expr.Expr) ChromashiftBuilder
	// Crh shift chroma-red horizontally (from -255 to 255) (default 0).
	Crh(crh int) ChromashiftBuilder
	// CrhExpr shift chroma-red horizontally (from -255 to 255) (default 0).
	CrhExpr(crh expr.Expr) ChromashiftBuilder
	// Crv shift chroma-red vertically (from -255 to 255) (default 0).
	Crv(crv int) ChromashiftBuilder
	// CrvExpr shift chroma-red vertically (from -255 to 255) (default 0).
	CrvExpr(crv expr.Expr) ChromashiftBuilder
	// Edge set edge operation (from 0 to 1) (default smear).
	Edge(edge int) ChromashiftBuilder
	// EdgeExpr set edge operation (from 0 to 1) (default smear).
	EdgeExpr(edge expr.Expr) ChromashiftBuilder
	// Enable expression to enable or disable the filter.
	Enable(enable expr.Expr) ChromashiftBuilder
}

// Chromashift creates a new ChromashiftBuilder to configure the "chromashift" filter.
func Chromashift(opts ...filter.Option) ChromashiftBuilder {
	return &implChromashiftBuilder{
		f: filter.New("chromashift", 1, opts...),
	}
}

type implChromashiftBuilder struct {
	f filter.Filter
}

func (chromashiftBuilder *implChromashiftBuilder) String() string {
	return chromashiftBuilder.f.String()
}

func (chromashiftBuilder *implChromashiftBuilder) Outputs() int {
	return chromashiftBuilder.f.Outputs()
}

func (chromashiftBuilder *implChromashiftBuilder) With(key string, value expr.Expr) filter.Filter {
	return chromashiftBuilder.withOption(key, value)
}

func (chromashiftBuilder *implChromashiftBuilder) withOption(key string, value expr.Expr) ChromashiftBuilder {
	bCopy := *chromashiftBuilder
	bCopy.f = chromashiftBuilder.f.With(key, value)
	return &bCopy
}

func (chromashiftBuilder *implChromashiftBuilder) Cbh(cbh int) ChromashiftBuilder {
	return chromashiftBuilder.withOption("cbh", expr.Int(cbh))
}

func (chromashiftBuilder *implChromashiftBuilder) CbhExpr(cbh expr.Expr) ChromashiftBuilder {
	return chromashiftBuilder.withOption("cbh", cbh)
}

func (chromashiftBuilder *implChromashiftBuilder) Cbv(cbv int) ChromashiftBuilder {
	return chromashiftBuilder.withOption("cbv", expr.Int(cbv))
}

func (chromashiftBuilder *implChromashiftBuilder) CbvExpr(cbv expr.Expr) ChromashiftBuilder {
	return chromashiftBuilder.withOption("cbv", cbv)
}

func (chromashiftBuilder *implChromashiftBuilder) Crh(crh int) ChromashiftBuilder {
	return chromashiftBuilder.withOption("crh", expr.Int(crh))
}

func (chromashiftBuilder *implChromashiftBuilder) CrhExpr(crh expr.Expr) ChromashiftBuilder {
	return chromashiftBuilder.withOption("crh", crh)
}

func (chromashiftBuilder *implChromashiftBuilder) Crv(crv int) ChromashiftBuilder {
	return chromashiftBuilder.withOption("crv", expr.Int(crv))
}

func (chromashiftBuilder *implChromashiftBuilder) CrvExpr(crv expr.Expr) ChromashiftBuilder {
	return chromashiftBuilder.withOption("crv", crv)
}

func (chromashiftBuilder *implChromashiftBuilder) Edge(edge int) ChromashiftBuilder {
	return chromashiftBuilder.withOption("edge", expr.Int(edge))
}

func (chromashiftBuilder *implChromashiftBuilder) EdgeExpr(edge expr.Expr) ChromashiftBuilder {
	return chromashiftBuilder.withOption("edge", edge)
}

func (chromashiftBuilder *implChromashiftBuilder) Enable(enable expr.Expr) ChromashiftBuilder {
	return chromashiftBuilder.withOption("enable", enable)
}
