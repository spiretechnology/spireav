// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// BboxBuilder Compute bounding box for each frame.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#bbox
type BboxBuilder interface {
	filter.Filter
	// MinVal set minimum luminance value for bounding box (from 0 to 65535) (default 16).
	MinVal(minVal int) BboxBuilder
	// MinValExpr set minimum luminance value for bounding box (from 0 to 65535) (default 16).
	MinValExpr(minVal expr.Expr) BboxBuilder
}

// Bbox creates a new BboxBuilder to configure the "bbox" filter.
func Bbox(opts ...filter.Option) BboxBuilder {
	return &implBboxBuilder{
		f: filter.New("bbox", 1, opts...),
	}
}

type implBboxBuilder struct {
	f filter.Filter
}

func (bboxBuilder *implBboxBuilder) String() string {
	return bboxBuilder.f.String()
}

func (bboxBuilder *implBboxBuilder) Outputs() int {
	return bboxBuilder.f.Outputs()
}

func (bboxBuilder *implBboxBuilder) With(key string, value expr.Expr) filter.Filter {
	return bboxBuilder.withOption(key, value)
}

func (bboxBuilder *implBboxBuilder) withOption(key string, value expr.Expr) BboxBuilder {
	bCopy := *bboxBuilder
	bCopy.f = bboxBuilder.f.With(key, value)
	return &bCopy
}

func (bboxBuilder *implBboxBuilder) MinVal(minVal int) BboxBuilder {
	return bboxBuilder.withOption("min_val", expr.Int(minVal))
}

func (bboxBuilder *implBboxBuilder) MinValExpr(minVal expr.Expr) BboxBuilder {
	return bboxBuilder.withOption("min_val", minVal)
}
