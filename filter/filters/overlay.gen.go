// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// OverlayBuilder corresponds to the "overlay" FFmpeg filter.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#overlay
type OverlayBuilder interface {
	filter.Filter
	// PosX sets the "x" option on the filter.
	PosX(posX expr.Expr) OverlayBuilder
	// PosXInt sets the "x" option on the filter.
	PosXInt(posX int) OverlayBuilder
	// PosY sets the "y" option on the filter.
	PosY(posY expr.Expr) OverlayBuilder
	// PosYInt sets the "y" option on the filter.
	PosYInt(posY int) OverlayBuilder
	// EvalOn sets the "eval" option on the filter.
	EvalOn(evalOn string) OverlayBuilder
	// EvalOnInit sets the "eval" option on the filter.
	EvalOnInit() OverlayBuilder
	// EvalOnFrame sets the "eval" option on the filter.
	EvalOnFrame() OverlayBuilder
	// AlphaStraight sets the "alpha" option on the filter.
	AlphaStraight() OverlayBuilder
	// AlphaPremultiplied sets the "alpha" option on the filter.
	AlphaPremultiplied() OverlayBuilder
}

// Overlay creates a new OverlayBuilder to configure the "overlay" filter.
func Overlay(opts ...filter.Option) OverlayBuilder {
	return &implOverlayBuilder{
		f: filter.New("overlay", 1, opts...),
	}
}

type implOverlayBuilder struct {
	f filter.Filter
}

func (b *implOverlayBuilder) String() string {
	return b.f.String()
}

func (b *implOverlayBuilder) Outputs() int {
	return b.f.Outputs()
}

func (b *implOverlayBuilder) With(key string, value expr.Expr) filter.Filter {
	return b.withOption(key, value)
}

func (b *implOverlayBuilder) withOption(key string, value expr.Expr) OverlayBuilder {
	bCopy := *b
	bCopy.f = b.f.With(key, value)
	return &bCopy
}

func (b *implOverlayBuilder) PosX(posX expr.Expr) OverlayBuilder {
	return b.withOption("x", posX)
}

func (b *implOverlayBuilder) PosXInt(posX int) OverlayBuilder {
	return b.withOption("x", expr.Int(posX))
}

func (b *implOverlayBuilder) PosY(posY expr.Expr) OverlayBuilder {
	return b.withOption("y", posY)
}

func (b *implOverlayBuilder) PosYInt(posY int) OverlayBuilder {
	return b.withOption("y", expr.Int(posY))
}

func (b *implOverlayBuilder) EvalOn(evalOn string) OverlayBuilder {
	return b.withOption("eval", expr.String(evalOn))
}

func (b *implOverlayBuilder) EvalOnInit() OverlayBuilder {
	return b.withOption("eval", "init")
}

func (b *implOverlayBuilder) EvalOnFrame() OverlayBuilder {
	return b.withOption("eval", "frame")
}

func (b *implOverlayBuilder) AlphaStraight() OverlayBuilder {
	return b.withOption("alpha", "straight")
}

func (b *implOverlayBuilder) AlphaPremultiplied() OverlayBuilder {
	return b.withOption("alpha", "premultiplied")
}
