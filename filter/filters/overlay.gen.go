// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// OverlayBuilder Overlay a video source on top of the input.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#overlay
type OverlayBuilder interface {
	filter.Filter
	// X set the x expression (default "0").
	X(x int) OverlayBuilder
	// XExpr set the x expression (default "0").
	XExpr(x expr.Expr) OverlayBuilder
	// Y set the y expression (default "0").
	Y(y int) OverlayBuilder
	// YExpr set the y expression (default "0").
	YExpr(y expr.Expr) OverlayBuilder
	// EofAction Action to take when encountering EOF from secondary input  (from 0 to 2) (default repeat).
	EofAction(eofAction int) OverlayBuilder
	// Eval specify when to evaluate expressions (from 0 to 1) (default frame).
	Eval(eval int) OverlayBuilder
	// Shortest force termination when the shortest input terminates (default false).
	Shortest(shortest bool) OverlayBuilder
	// Format set output format (from 0 to 8) (default yuv420).
	Format(format int) OverlayBuilder
	// Repeatlast repeat overlay of the last overlay frame (default true).
	Repeatlast(repeatlast bool) OverlayBuilder
	// Alpha alpha format (from 0 to 1) (default straight).
	Alpha(alpha int) OverlayBuilder
	// TsSyncMode How strictly to sync streams based on secondary input timestamps (from 0 to 1) (default default).
	TsSyncMode(tsSyncMode int) OverlayBuilder
	// Enable expression to enable or disable the filter.
	Enable(enable expr.Expr) OverlayBuilder
}

// Overlay creates a new OverlayBuilder to configure the "overlay" filter.
func Overlay(opts ...filter.Option) OverlayBuilder {
	return &implOverlayBuilder{
		f: filter.New("overlay", 1, opts...),
	}
}

type implOverlayBuilder struct {
	f filter.Filter
}

func (overlayBuilder *implOverlayBuilder) String() string {
	return overlayBuilder.f.String()
}

func (overlayBuilder *implOverlayBuilder) Outputs() int {
	return overlayBuilder.f.Outputs()
}

func (overlayBuilder *implOverlayBuilder) With(key string, value expr.Expr) filter.Filter {
	return overlayBuilder.withOption(key, value)
}

func (overlayBuilder *implOverlayBuilder) withOption(key string, value expr.Expr) OverlayBuilder {
	bCopy := *overlayBuilder
	bCopy.f = overlayBuilder.f.With(key, value)
	return &bCopy
}

func (overlayBuilder *implOverlayBuilder) X(x int) OverlayBuilder {
	return overlayBuilder.withOption("x", expr.Int(x))
}

func (overlayBuilder *implOverlayBuilder) XExpr(x expr.Expr) OverlayBuilder {
	return overlayBuilder.withOption("x", x)
}

func (overlayBuilder *implOverlayBuilder) Y(y int) OverlayBuilder {
	return overlayBuilder.withOption("y", expr.Int(y))
}

func (overlayBuilder *implOverlayBuilder) YExpr(y expr.Expr) OverlayBuilder {
	return overlayBuilder.withOption("y", y)
}

func (overlayBuilder *implOverlayBuilder) EofAction(eofAction int) OverlayBuilder {
	return overlayBuilder.withOption("eof_action", expr.Int(eofAction))
}

func (overlayBuilder *implOverlayBuilder) Eval(eval int) OverlayBuilder {
	return overlayBuilder.withOption("eval", expr.Int(eval))
}

func (overlayBuilder *implOverlayBuilder) Shortest(shortest bool) OverlayBuilder {
	return overlayBuilder.withOption("shortest", expr.Bool(shortest))
}

func (overlayBuilder *implOverlayBuilder) Format(format int) OverlayBuilder {
	return overlayBuilder.withOption("format", expr.Int(format))
}

func (overlayBuilder *implOverlayBuilder) Repeatlast(repeatlast bool) OverlayBuilder {
	return overlayBuilder.withOption("repeatlast", expr.Bool(repeatlast))
}

func (overlayBuilder *implOverlayBuilder) Alpha(alpha int) OverlayBuilder {
	return overlayBuilder.withOption("alpha", expr.Int(alpha))
}

func (overlayBuilder *implOverlayBuilder) TsSyncMode(tsSyncMode int) OverlayBuilder {
	return overlayBuilder.withOption("ts_sync_mode", expr.Int(tsSyncMode))
}

func (overlayBuilder *implOverlayBuilder) Enable(enable expr.Expr) OverlayBuilder {
	return overlayBuilder.withOption("enable", enable)
}
