// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// BassBuilder Boost or cut lower frequencies.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#bass
type BassBuilder interface {
	filter.Filter
	// Frequency set central frequency (from 0 to 999999) (default 100).
	Frequency(frequency float64) BassBuilder
	// FrequencyExpr set central frequency (from 0 to 999999) (default 100).
	FrequencyExpr(frequency expr.Expr) BassBuilder
	// F set central frequency (from 0 to 999999) (default 100).
	F(f float64) BassBuilder
	// FExpr set central frequency (from 0 to 999999) (default 100).
	FExpr(f expr.Expr) BassBuilder
	// WidthType set filter-width type (from 1 to 5) (default q).
	WidthType(widthType int) BassBuilder
	// WidthTypeExpr set filter-width type (from 1 to 5) (default q).
	WidthTypeExpr(widthType expr.Expr) BassBuilder
	// T set filter-width type (from 1 to 5) (default q).
	T(t int) BassBuilder
	// TExpr set filter-width type (from 1 to 5) (default q).
	TExpr(t expr.Expr) BassBuilder
	// Width set width (from 0 to 99999) (default 0.5).
	Width(width float64) BassBuilder
	// WidthExpr set width (from 0 to 99999) (default 0.5).
	WidthExpr(width expr.Expr) BassBuilder
	// W set width (from 0 to 99999) (default 0.5).
	W(w float64) BassBuilder
	// WExpr set width (from 0 to 99999) (default 0.5).
	WExpr(w expr.Expr) BassBuilder
	// Gain set gain (from -900 to 900) (default 0).
	Gain(gain float64) BassBuilder
	// GainExpr set gain (from -900 to 900) (default 0).
	GainExpr(gain expr.Expr) BassBuilder
	// G set gain (from -900 to 900) (default 0).
	G(g float64) BassBuilder
	// GExpr set gain (from -900 to 900) (default 0).
	GExpr(g expr.Expr) BassBuilder
	// Poles set number of poles (from 1 to 2) (default 2).
	Poles(poles int) BassBuilder
	// P set number of poles (from 1 to 2) (default 2).
	P(p int) BassBuilder
	// Mix set mix (from 0 to 1) (default 1).
	Mix(mix float64) BassBuilder
	// MixExpr set mix (from 0 to 1) (default 1).
	MixExpr(mix expr.Expr) BassBuilder
	// M set mix (from 0 to 1) (default 1).
	M(m float64) BassBuilder
	// MExpr set mix (from 0 to 1) (default 1).
	MExpr(m expr.Expr) BassBuilder
	// Channels set channels to filter (default "all").
	Channels(channels string) BassBuilder
	// ChannelsExpr set channels to filter (default "all").
	ChannelsExpr(channels expr.Expr) BassBuilder
	// C set channels to filter (default "all").
	C(c string) BassBuilder
	// CExpr set channels to filter (default "all").
	CExpr(c expr.Expr) BassBuilder
	// Normalize normalize coefficients (default false).
	Normalize(normalize bool) BassBuilder
	// NormalizeExpr normalize coefficients (default false).
	NormalizeExpr(normalize expr.Expr) BassBuilder
	// N normalize coefficients (default false).
	N(n bool) BassBuilder
	// NExpr normalize coefficients (default false).
	NExpr(n expr.Expr) BassBuilder
	// Transform set transform type (from 0 to 6) (default di).
	Transform(transform int) BassBuilder
	// A set transform type (from 0 to 6) (default di).
	A(a int) BassBuilder
	// Precision set filtering precision (from -1 to 3) (default auto).
	Precision(precision int) BassBuilder
	// R set filtering precision (from -1 to 3) (default auto).
	R(r int) BassBuilder
	// Blocksize set the block size (from 0 to 32768) (default 0).
	Blocksize(blocksize int) BassBuilder
	// B set the block size (from 0 to 32768) (default 0).
	B(b int) BassBuilder
	// Enable expression to enable or disable the filter.
	Enable(enable expr.Expr) BassBuilder
}

// Bass creates a new BassBuilder to configure the "bass" filter.
func Bass(opts ...filter.Option) BassBuilder {
	return &implBassBuilder{
		f: filter.New("bass", 1, opts...),
	}
}

type implBassBuilder struct {
	f filter.Filter
}

func (bassBuilder *implBassBuilder) String() string {
	return bassBuilder.f.String()
}

func (bassBuilder *implBassBuilder) Outputs() int {
	return bassBuilder.f.Outputs()
}

func (bassBuilder *implBassBuilder) With(key string, value expr.Expr) filter.Filter {
	return bassBuilder.withOption(key, value)
}

func (bassBuilder *implBassBuilder) withOption(key string, value expr.Expr) BassBuilder {
	bCopy := *bassBuilder
	bCopy.f = bassBuilder.f.With(key, value)
	return &bCopy
}

func (bassBuilder *implBassBuilder) Frequency(frequency float64) BassBuilder {
	return bassBuilder.withOption("frequency", expr.Double(frequency))
}

func (bassBuilder *implBassBuilder) FrequencyExpr(frequency expr.Expr) BassBuilder {
	return bassBuilder.withOption("frequency", frequency)
}

func (bassBuilder *implBassBuilder) F(f float64) BassBuilder {
	return bassBuilder.withOption("f", expr.Double(f))
}

func (bassBuilder *implBassBuilder) FExpr(f expr.Expr) BassBuilder {
	return bassBuilder.withOption("f", f)
}

func (bassBuilder *implBassBuilder) WidthType(widthType int) BassBuilder {
	return bassBuilder.withOption("width_type", expr.Int(widthType))
}

func (bassBuilder *implBassBuilder) WidthTypeExpr(widthType expr.Expr) BassBuilder {
	return bassBuilder.withOption("width_type", widthType)
}

func (bassBuilder *implBassBuilder) T(t int) BassBuilder {
	return bassBuilder.withOption("t", expr.Int(t))
}

func (bassBuilder *implBassBuilder) TExpr(t expr.Expr) BassBuilder {
	return bassBuilder.withOption("t", t)
}

func (bassBuilder *implBassBuilder) Width(width float64) BassBuilder {
	return bassBuilder.withOption("width", expr.Double(width))
}

func (bassBuilder *implBassBuilder) WidthExpr(width expr.Expr) BassBuilder {
	return bassBuilder.withOption("width", width)
}

func (bassBuilder *implBassBuilder) W(w float64) BassBuilder {
	return bassBuilder.withOption("w", expr.Double(w))
}

func (bassBuilder *implBassBuilder) WExpr(w expr.Expr) BassBuilder {
	return bassBuilder.withOption("w", w)
}

func (bassBuilder *implBassBuilder) Gain(gain float64) BassBuilder {
	return bassBuilder.withOption("gain", expr.Double(gain))
}

func (bassBuilder *implBassBuilder) GainExpr(gain expr.Expr) BassBuilder {
	return bassBuilder.withOption("gain", gain)
}

func (bassBuilder *implBassBuilder) G(g float64) BassBuilder {
	return bassBuilder.withOption("g", expr.Double(g))
}

func (bassBuilder *implBassBuilder) GExpr(g expr.Expr) BassBuilder {
	return bassBuilder.withOption("g", g)
}

func (bassBuilder *implBassBuilder) Poles(poles int) BassBuilder {
	return bassBuilder.withOption("poles", expr.Int(poles))
}

func (bassBuilder *implBassBuilder) P(p int) BassBuilder {
	return bassBuilder.withOption("p", expr.Int(p))
}

func (bassBuilder *implBassBuilder) Mix(mix float64) BassBuilder {
	return bassBuilder.withOption("mix", expr.Double(mix))
}

func (bassBuilder *implBassBuilder) MixExpr(mix expr.Expr) BassBuilder {
	return bassBuilder.withOption("mix", mix)
}

func (bassBuilder *implBassBuilder) M(m float64) BassBuilder {
	return bassBuilder.withOption("m", expr.Double(m))
}

func (bassBuilder *implBassBuilder) MExpr(m expr.Expr) BassBuilder {
	return bassBuilder.withOption("m", m)
}

func (bassBuilder *implBassBuilder) Channels(channels string) BassBuilder {
	return bassBuilder.withOption("channels", expr.String(channels))
}

func (bassBuilder *implBassBuilder) ChannelsExpr(channels expr.Expr) BassBuilder {
	return bassBuilder.withOption("channels", channels)
}

func (bassBuilder *implBassBuilder) C(c string) BassBuilder {
	return bassBuilder.withOption("c", expr.String(c))
}

func (bassBuilder *implBassBuilder) CExpr(c expr.Expr) BassBuilder {
	return bassBuilder.withOption("c", c)
}

func (bassBuilder *implBassBuilder) Normalize(normalize bool) BassBuilder {
	return bassBuilder.withOption("normalize", expr.Bool(normalize))
}

func (bassBuilder *implBassBuilder) NormalizeExpr(normalize expr.Expr) BassBuilder {
	return bassBuilder.withOption("normalize", normalize)
}

func (bassBuilder *implBassBuilder) N(n bool) BassBuilder {
	return bassBuilder.withOption("n", expr.Bool(n))
}

func (bassBuilder *implBassBuilder) NExpr(n expr.Expr) BassBuilder {
	return bassBuilder.withOption("n", n)
}

func (bassBuilder *implBassBuilder) Transform(transform int) BassBuilder {
	return bassBuilder.withOption("transform", expr.Int(transform))
}

func (bassBuilder *implBassBuilder) A(a int) BassBuilder {
	return bassBuilder.withOption("a", expr.Int(a))
}

func (bassBuilder *implBassBuilder) Precision(precision int) BassBuilder {
	return bassBuilder.withOption("precision", expr.Int(precision))
}

func (bassBuilder *implBassBuilder) R(r int) BassBuilder {
	return bassBuilder.withOption("r", expr.Int(r))
}

func (bassBuilder *implBassBuilder) Blocksize(blocksize int) BassBuilder {
	return bassBuilder.withOption("blocksize", expr.Int(blocksize))
}

func (bassBuilder *implBassBuilder) B(b int) BassBuilder {
	return bassBuilder.withOption("b", expr.Int(b))
}

func (bassBuilder *implBassBuilder) Enable(enable expr.Expr) BassBuilder {
	return bassBuilder.withOption("enable", enable)
}
