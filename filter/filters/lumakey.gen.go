// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// LumakeyBuilder Turns a certain luma into transparency.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#lumakey
type LumakeyBuilder interface {
	filter.Filter
	// Threshold set the threshold value (from 0 to 1) (default 0).
	Threshold(threshold float64) LumakeyBuilder
	// ThresholdExpr set the threshold value (from 0 to 1) (default 0).
	ThresholdExpr(threshold expr.Expr) LumakeyBuilder
	// Tolerance set the tolerance value (from 0 to 1) (default 0.01).
	Tolerance(tolerance float64) LumakeyBuilder
	// ToleranceExpr set the tolerance value (from 0 to 1) (default 0.01).
	ToleranceExpr(tolerance expr.Expr) LumakeyBuilder
	// Softness set the softness value (from 0 to 1) (default 0).
	Softness(softness float64) LumakeyBuilder
	// SoftnessExpr set the softness value (from 0 to 1) (default 0).
	SoftnessExpr(softness expr.Expr) LumakeyBuilder
}

// Lumakey creates a new LumakeyBuilder to configure the "lumakey" filter.
func Lumakey(opts ...filter.Option) LumakeyBuilder {
	return &implLumakeyBuilder{
		f: filter.New("lumakey", 1, opts...),
	}
}

type implLumakeyBuilder struct {
	f filter.Filter
}

func (lumakeyBuilder *implLumakeyBuilder) String() string {
	return lumakeyBuilder.f.String()
}

func (lumakeyBuilder *implLumakeyBuilder) Outputs() int {
	return lumakeyBuilder.f.Outputs()
}

func (lumakeyBuilder *implLumakeyBuilder) With(key string, value expr.Expr) filter.Filter {
	return lumakeyBuilder.withOption(key, value)
}

func (lumakeyBuilder *implLumakeyBuilder) withOption(key string, value expr.Expr) LumakeyBuilder {
	bCopy := *lumakeyBuilder
	bCopy.f = lumakeyBuilder.f.With(key, value)
	return &bCopy
}

func (lumakeyBuilder *implLumakeyBuilder) Threshold(threshold float64) LumakeyBuilder {
	return lumakeyBuilder.withOption("threshold", expr.Double(threshold))
}

func (lumakeyBuilder *implLumakeyBuilder) ThresholdExpr(threshold expr.Expr) LumakeyBuilder {
	return lumakeyBuilder.withOption("threshold", threshold)
}

func (lumakeyBuilder *implLumakeyBuilder) Tolerance(tolerance float64) LumakeyBuilder {
	return lumakeyBuilder.withOption("tolerance", expr.Double(tolerance))
}

func (lumakeyBuilder *implLumakeyBuilder) ToleranceExpr(tolerance expr.Expr) LumakeyBuilder {
	return lumakeyBuilder.withOption("tolerance", tolerance)
}

func (lumakeyBuilder *implLumakeyBuilder) Softness(softness float64) LumakeyBuilder {
	return lumakeyBuilder.withOption("softness", expr.Double(softness))
}

func (lumakeyBuilder *implLumakeyBuilder) SoftnessExpr(softness expr.Expr) LumakeyBuilder {
	return lumakeyBuilder.withOption("softness", softness)
}
