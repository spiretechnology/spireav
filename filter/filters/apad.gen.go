// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"time"

	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// ApadBuilder Pad audio with silence.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#apad
type ApadBuilder interface {
	filter.Filter
	// PacketSize set silence packet size (from 0 to INT_MAX) (default 4096).
	PacketSize(packetSize int) ApadBuilder
	// PadLen set number of samples of silence to add (from -1 to I64_MAX) (default -1).
	PadLen(padLen int64) ApadBuilder
	// WholeLen set minimum target number of samples in the audio stream (from -1 to I64_MAX) (default -1).
	WholeLen(wholeLen int64) ApadBuilder
	// PadDur set duration of silence to add (default -0.000001).
	PadDur(padDur time.Duration) ApadBuilder
	// WholeDur set minimum target duration in the audio stream (default -0.000001).
	WholeDur(wholeDur time.Duration) ApadBuilder
	// Enable expression to enable or disable the filter.
	Enable(enable expr.Expr) ApadBuilder
}

// Apad creates a new ApadBuilder to configure the "apad" filter.
func Apad(opts ...filter.Option) ApadBuilder {
	return &implApadBuilder{
		f: filter.New("apad", 1, opts...),
	}
}

type implApadBuilder struct {
	f filter.Filter
}

func (apadBuilder *implApadBuilder) String() string {
	return apadBuilder.f.String()
}

func (apadBuilder *implApadBuilder) Outputs() int {
	return apadBuilder.f.Outputs()
}

func (apadBuilder *implApadBuilder) With(key string, value expr.Expr) filter.Filter {
	return apadBuilder.withOption(key, value)
}

func (apadBuilder *implApadBuilder) withOption(key string, value expr.Expr) ApadBuilder {
	bCopy := *apadBuilder
	bCopy.f = apadBuilder.f.With(key, value)
	return &bCopy
}

func (apadBuilder *implApadBuilder) PacketSize(packetSize int) ApadBuilder {
	return apadBuilder.withOption("packet_size", expr.Int(packetSize))
}

func (apadBuilder *implApadBuilder) PadLen(padLen int64) ApadBuilder {
	return apadBuilder.withOption("pad_len", expr.Int64(padLen))
}

func (apadBuilder *implApadBuilder) WholeLen(wholeLen int64) ApadBuilder {
	return apadBuilder.withOption("whole_len", expr.Int64(wholeLen))
}

func (apadBuilder *implApadBuilder) PadDur(padDur time.Duration) ApadBuilder {
	return apadBuilder.withOption("pad_dur", expr.Duration(padDur))
}

func (apadBuilder *implApadBuilder) WholeDur(wholeDur time.Duration) ApadBuilder {
	return apadBuilder.withOption("whole_dur", expr.Duration(wholeDur))
}

func (apadBuilder *implApadBuilder) Enable(enable expr.Expr) ApadBuilder {
	return apadBuilder.withOption("enable", enable)
}
