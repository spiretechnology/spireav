// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"time"

	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// LoopBuilder Loop video frames.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#loop
type LoopBuilder interface {
	filter.Filter
	// Loop number of loops (from -1 to INT_MAX) (default 0).
	Loop(loop int) LoopBuilder
	// Size max number of frames to loop (from 0 to 32767) (default 0).
	Size(size int64) LoopBuilder
	// Start set the loop start frame (from -1 to I64_MAX) (default 0).
	Start(start int64) LoopBuilder
	// Time set the loop start time (default INT64_MAX).
	Time(time time.Duration) LoopBuilder
}

// Loop creates a new LoopBuilder to configure the "loop" filter.
func Loop(opts ...filter.Option) LoopBuilder {
	return &implLoopBuilder{
		f: filter.New("loop", 1, opts...),
	}
}

type implLoopBuilder struct {
	f filter.Filter
}

func (loopBuilder *implLoopBuilder) String() string {
	return loopBuilder.f.String()
}

func (loopBuilder *implLoopBuilder) Outputs() int {
	return loopBuilder.f.Outputs()
}

func (loopBuilder *implLoopBuilder) With(key string, value expr.Expr) filter.Filter {
	return loopBuilder.withOption(key, value)
}

func (loopBuilder *implLoopBuilder) withOption(key string, value expr.Expr) LoopBuilder {
	bCopy := *loopBuilder
	bCopy.f = loopBuilder.f.With(key, value)
	return &bCopy
}

func (loopBuilder *implLoopBuilder) Loop(loop int) LoopBuilder {
	return loopBuilder.withOption("loop", expr.Int(loop))
}

func (loopBuilder *implLoopBuilder) Size(size int64) LoopBuilder {
	return loopBuilder.withOption("size", expr.Int64(size))
}

func (loopBuilder *implLoopBuilder) Start(start int64) LoopBuilder {
	return loopBuilder.withOption("start", expr.Int64(start))
}

func (loopBuilder *implLoopBuilder) Time(time time.Duration) LoopBuilder {
	return loopBuilder.withOption("time", expr.Duration(time))
}
