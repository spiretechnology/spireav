// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// EqualizerBuilder Apply two-pole peaking equalization (EQ) filter.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#equalizer
type EqualizerBuilder interface {
	filter.Filter
	// Frequency set central frequency (from 0 to 999999) (default 0).
	Frequency(frequency float64) EqualizerBuilder
	// FrequencyExpr set central frequency (from 0 to 999999) (default 0).
	FrequencyExpr(frequency expr.Expr) EqualizerBuilder
	// F set central frequency (from 0 to 999999) (default 0).
	F(f float64) EqualizerBuilder
	// FExpr set central frequency (from 0 to 999999) (default 0).
	FExpr(f expr.Expr) EqualizerBuilder
	// WidthType set filter-width type (from 1 to 5) (default q).
	WidthType(widthType int) EqualizerBuilder
	// WidthTypeExpr set filter-width type (from 1 to 5) (default q).
	WidthTypeExpr(widthType expr.Expr) EqualizerBuilder
	// T set filter-width type (from 1 to 5) (default q).
	T(t int) EqualizerBuilder
	// TExpr set filter-width type (from 1 to 5) (default q).
	TExpr(t expr.Expr) EqualizerBuilder
	// Width set width (from 0 to 99999) (default 1).
	Width(width float64) EqualizerBuilder
	// WidthExpr set width (from 0 to 99999) (default 1).
	WidthExpr(width expr.Expr) EqualizerBuilder
	// W set width (from 0 to 99999) (default 1).
	W(w float64) EqualizerBuilder
	// WExpr set width (from 0 to 99999) (default 1).
	WExpr(w expr.Expr) EqualizerBuilder
	// Gain set gain (from -900 to 900) (default 0).
	Gain(gain float64) EqualizerBuilder
	// GainExpr set gain (from -900 to 900) (default 0).
	GainExpr(gain expr.Expr) EqualizerBuilder
	// G set gain (from -900 to 900) (default 0).
	G(g float64) EqualizerBuilder
	// GExpr set gain (from -900 to 900) (default 0).
	GExpr(g expr.Expr) EqualizerBuilder
	// Mix set mix (from 0 to 1) (default 1).
	Mix(mix float64) EqualizerBuilder
	// MixExpr set mix (from 0 to 1) (default 1).
	MixExpr(mix expr.Expr) EqualizerBuilder
	// M set mix (from 0 to 1) (default 1).
	M(m float64) EqualizerBuilder
	// MExpr set mix (from 0 to 1) (default 1).
	MExpr(m expr.Expr) EqualizerBuilder
	// Channels set channels to filter (default "all").
	Channels(channels string) EqualizerBuilder
	// ChannelsExpr set channels to filter (default "all").
	ChannelsExpr(channels expr.Expr) EqualizerBuilder
	// C set channels to filter (default "all").
	C(c string) EqualizerBuilder
	// CExpr set channels to filter (default "all").
	CExpr(c expr.Expr) EqualizerBuilder
	// Normalize normalize coefficients (default false).
	Normalize(normalize bool) EqualizerBuilder
	// NormalizeExpr normalize coefficients (default false).
	NormalizeExpr(normalize expr.Expr) EqualizerBuilder
	// N normalize coefficients (default false).
	N(n bool) EqualizerBuilder
	// NExpr normalize coefficients (default false).
	NExpr(n expr.Expr) EqualizerBuilder
	// Transform set transform type (from 0 to 6) (default di).
	Transform(transform int) EqualizerBuilder
	// A set transform type (from 0 to 6) (default di).
	A(a int) EqualizerBuilder
	// Precision set filtering precision (from -1 to 3) (default auto).
	Precision(precision int) EqualizerBuilder
	// R set filtering precision (from -1 to 3) (default auto).
	R(r int) EqualizerBuilder
	// Blocksize set the block size (from 0 to 32768) (default 0).
	Blocksize(blocksize int) EqualizerBuilder
	// B set the block size (from 0 to 32768) (default 0).
	B(b int) EqualizerBuilder
	// Enable expression to enable or disable the filter.
	Enable(enable expr.Expr) EqualizerBuilder
}

// Equalizer creates a new EqualizerBuilder to configure the "equalizer" filter.
func Equalizer(opts ...filter.Option) EqualizerBuilder {
	return &implEqualizerBuilder{
		f: filter.New("equalizer", 1, opts...),
	}
}

type implEqualizerBuilder struct {
	f filter.Filter
}

func (equalizerBuilder *implEqualizerBuilder) String() string {
	return equalizerBuilder.f.String()
}

func (equalizerBuilder *implEqualizerBuilder) Outputs() int {
	return equalizerBuilder.f.Outputs()
}

func (equalizerBuilder *implEqualizerBuilder) With(key string, value expr.Expr) filter.Filter {
	return equalizerBuilder.withOption(key, value)
}

func (equalizerBuilder *implEqualizerBuilder) withOption(key string, value expr.Expr) EqualizerBuilder {
	bCopy := *equalizerBuilder
	bCopy.f = equalizerBuilder.f.With(key, value)
	return &bCopy
}

func (equalizerBuilder *implEqualizerBuilder) Frequency(frequency float64) EqualizerBuilder {
	return equalizerBuilder.withOption("frequency", expr.Double(frequency))
}

func (equalizerBuilder *implEqualizerBuilder) FrequencyExpr(frequency expr.Expr) EqualizerBuilder {
	return equalizerBuilder.withOption("frequency", frequency)
}

func (equalizerBuilder *implEqualizerBuilder) F(f float64) EqualizerBuilder {
	return equalizerBuilder.withOption("f", expr.Double(f))
}

func (equalizerBuilder *implEqualizerBuilder) FExpr(f expr.Expr) EqualizerBuilder {
	return equalizerBuilder.withOption("f", f)
}

func (equalizerBuilder *implEqualizerBuilder) WidthType(widthType int) EqualizerBuilder {
	return equalizerBuilder.withOption("width_type", expr.Int(widthType))
}

func (equalizerBuilder *implEqualizerBuilder) WidthTypeExpr(widthType expr.Expr) EqualizerBuilder {
	return equalizerBuilder.withOption("width_type", widthType)
}

func (equalizerBuilder *implEqualizerBuilder) T(t int) EqualizerBuilder {
	return equalizerBuilder.withOption("t", expr.Int(t))
}

func (equalizerBuilder *implEqualizerBuilder) TExpr(t expr.Expr) EqualizerBuilder {
	return equalizerBuilder.withOption("t", t)
}

func (equalizerBuilder *implEqualizerBuilder) Width(width float64) EqualizerBuilder {
	return equalizerBuilder.withOption("width", expr.Double(width))
}

func (equalizerBuilder *implEqualizerBuilder) WidthExpr(width expr.Expr) EqualizerBuilder {
	return equalizerBuilder.withOption("width", width)
}

func (equalizerBuilder *implEqualizerBuilder) W(w float64) EqualizerBuilder {
	return equalizerBuilder.withOption("w", expr.Double(w))
}

func (equalizerBuilder *implEqualizerBuilder) WExpr(w expr.Expr) EqualizerBuilder {
	return equalizerBuilder.withOption("w", w)
}

func (equalizerBuilder *implEqualizerBuilder) Gain(gain float64) EqualizerBuilder {
	return equalizerBuilder.withOption("gain", expr.Double(gain))
}

func (equalizerBuilder *implEqualizerBuilder) GainExpr(gain expr.Expr) EqualizerBuilder {
	return equalizerBuilder.withOption("gain", gain)
}

func (equalizerBuilder *implEqualizerBuilder) G(g float64) EqualizerBuilder {
	return equalizerBuilder.withOption("g", expr.Double(g))
}

func (equalizerBuilder *implEqualizerBuilder) GExpr(g expr.Expr) EqualizerBuilder {
	return equalizerBuilder.withOption("g", g)
}

func (equalizerBuilder *implEqualizerBuilder) Mix(mix float64) EqualizerBuilder {
	return equalizerBuilder.withOption("mix", expr.Double(mix))
}

func (equalizerBuilder *implEqualizerBuilder) MixExpr(mix expr.Expr) EqualizerBuilder {
	return equalizerBuilder.withOption("mix", mix)
}

func (equalizerBuilder *implEqualizerBuilder) M(m float64) EqualizerBuilder {
	return equalizerBuilder.withOption("m", expr.Double(m))
}

func (equalizerBuilder *implEqualizerBuilder) MExpr(m expr.Expr) EqualizerBuilder {
	return equalizerBuilder.withOption("m", m)
}

func (equalizerBuilder *implEqualizerBuilder) Channels(channels string) EqualizerBuilder {
	return equalizerBuilder.withOption("channels", expr.String(channels))
}

func (equalizerBuilder *implEqualizerBuilder) ChannelsExpr(channels expr.Expr) EqualizerBuilder {
	return equalizerBuilder.withOption("channels", channels)
}

func (equalizerBuilder *implEqualizerBuilder) C(c string) EqualizerBuilder {
	return equalizerBuilder.withOption("c", expr.String(c))
}

func (equalizerBuilder *implEqualizerBuilder) CExpr(c expr.Expr) EqualizerBuilder {
	return equalizerBuilder.withOption("c", c)
}

func (equalizerBuilder *implEqualizerBuilder) Normalize(normalize bool) EqualizerBuilder {
	return equalizerBuilder.withOption("normalize", expr.Bool(normalize))
}

func (equalizerBuilder *implEqualizerBuilder) NormalizeExpr(normalize expr.Expr) EqualizerBuilder {
	return equalizerBuilder.withOption("normalize", normalize)
}

func (equalizerBuilder *implEqualizerBuilder) N(n bool) EqualizerBuilder {
	return equalizerBuilder.withOption("n", expr.Bool(n))
}

func (equalizerBuilder *implEqualizerBuilder) NExpr(n expr.Expr) EqualizerBuilder {
	return equalizerBuilder.withOption("n", n)
}

func (equalizerBuilder *implEqualizerBuilder) Transform(transform int) EqualizerBuilder {
	return equalizerBuilder.withOption("transform", expr.Int(transform))
}

func (equalizerBuilder *implEqualizerBuilder) A(a int) EqualizerBuilder {
	return equalizerBuilder.withOption("a", expr.Int(a))
}

func (equalizerBuilder *implEqualizerBuilder) Precision(precision int) EqualizerBuilder {
	return equalizerBuilder.withOption("precision", expr.Int(precision))
}

func (equalizerBuilder *implEqualizerBuilder) R(r int) EqualizerBuilder {
	return equalizerBuilder.withOption("r", expr.Int(r))
}

func (equalizerBuilder *implEqualizerBuilder) Blocksize(blocksize int) EqualizerBuilder {
	return equalizerBuilder.withOption("blocksize", expr.Int(blocksize))
}

func (equalizerBuilder *implEqualizerBuilder) B(b int) EqualizerBuilder {
	return equalizerBuilder.withOption("b", expr.Int(b))
}

func (equalizerBuilder *implEqualizerBuilder) Enable(enable expr.Expr) EqualizerBuilder {
	return equalizerBuilder.withOption("enable", enable)
}
