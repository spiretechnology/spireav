// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// TblendBuilder Blend successive frames.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#tblend
type TblendBuilder interface {
	filter.Filter
	// C0Mode set component #0 blend mode (from 0 to 39) (default normal).
	C0Mode(c0Mode int) TblendBuilder
	// C0ModeExpr set component #0 blend mode (from 0 to 39) (default normal).
	C0ModeExpr(c0Mode expr.Expr) TblendBuilder
	// C1Mode set component #1 blend mode (from 0 to 39) (default normal).
	C1Mode(c1Mode int) TblendBuilder
	// C1ModeExpr set component #1 blend mode (from 0 to 39) (default normal).
	C1ModeExpr(c1Mode expr.Expr) TblendBuilder
	// C2Mode set component #2 blend mode (from 0 to 39) (default normal).
	C2Mode(c2Mode int) TblendBuilder
	// C2ModeExpr set component #2 blend mode (from 0 to 39) (default normal).
	C2ModeExpr(c2Mode expr.Expr) TblendBuilder
	// C3Mode set component #3 blend mode (from 0 to 39) (default normal).
	C3Mode(c3Mode int) TblendBuilder
	// C3ModeExpr set component #3 blend mode (from 0 to 39) (default normal).
	C3ModeExpr(c3Mode expr.Expr) TblendBuilder
	// AllMode set blend mode for all components (from -1 to 39) (default -1).
	AllMode(allMode int) TblendBuilder
	// AllModeExpr set blend mode for all components (from -1 to 39) (default -1).
	AllModeExpr(allMode expr.Expr) TblendBuilder
	// C0Expr set color component #0 expression.
	C0Expr(c0Expr expr.Expr) TblendBuilder
	// C1Expr set color component #1 expression.
	C1Expr(c1Expr expr.Expr) TblendBuilder
	// C2Expr set color component #2 expression.
	C2Expr(c2Expr expr.Expr) TblendBuilder
	// C3Expr set color component #3 expression.
	C3Expr(c3Expr expr.Expr) TblendBuilder
	// AllExpr set expression for all color components.
	AllExpr(allExpr expr.Expr) TblendBuilder
	// C0Opacity set color component #0 opacity (from 0 to 1) (default 1).
	C0Opacity(c0Opacity float64) TblendBuilder
	// C0OpacityExpr set color component #0 opacity (from 0 to 1) (default 1).
	C0OpacityExpr(c0Opacity expr.Expr) TblendBuilder
	// C1Opacity set color component #1 opacity (from 0 to 1) (default 1).
	C1Opacity(c1Opacity float64) TblendBuilder
	// C1OpacityExpr set color component #1 opacity (from 0 to 1) (default 1).
	C1OpacityExpr(c1Opacity expr.Expr) TblendBuilder
	// C2Opacity set color component #2 opacity (from 0 to 1) (default 1).
	C2Opacity(c2Opacity float64) TblendBuilder
	// C2OpacityExpr set color component #2 opacity (from 0 to 1) (default 1).
	C2OpacityExpr(c2Opacity expr.Expr) TblendBuilder
	// C3Opacity set color component #3 opacity (from 0 to 1) (default 1).
	C3Opacity(c3Opacity float64) TblendBuilder
	// C3OpacityExpr set color component #3 opacity (from 0 to 1) (default 1).
	C3OpacityExpr(c3Opacity expr.Expr) TblendBuilder
	// AllOpacity set opacity for all color components (from 0 to 1) (default 1).
	AllOpacity(allOpacity float64) TblendBuilder
	// AllOpacityExpr set opacity for all color components (from 0 to 1) (default 1).
	AllOpacityExpr(allOpacity expr.Expr) TblendBuilder
	// Enable expression to enable or disable the filter.
	Enable(enable expr.Expr) TblendBuilder
}

// Tblend creates a new TblendBuilder to configure the "tblend" filter.
func Tblend(opts ...filter.Option) TblendBuilder {
	return &implTblendBuilder{
		f: filter.New("tblend", 1, opts...),
	}
}

type implTblendBuilder struct {
	f filter.Filter
}

func (tblendBuilder *implTblendBuilder) String() string {
	return tblendBuilder.f.String()
}

func (tblendBuilder *implTblendBuilder) Outputs() int {
	return tblendBuilder.f.Outputs()
}

func (tblendBuilder *implTblendBuilder) With(key string, value expr.Expr) filter.Filter {
	return tblendBuilder.withOption(key, value)
}

func (tblendBuilder *implTblendBuilder) withOption(key string, value expr.Expr) TblendBuilder {
	bCopy := *tblendBuilder
	bCopy.f = tblendBuilder.f.With(key, value)
	return &bCopy
}

func (tblendBuilder *implTblendBuilder) C0Mode(c0Mode int) TblendBuilder {
	return tblendBuilder.withOption("c0_mode", expr.Int(c0Mode))
}

func (tblendBuilder *implTblendBuilder) C0ModeExpr(c0Mode expr.Expr) TblendBuilder {
	return tblendBuilder.withOption("c0_mode", c0Mode)
}

func (tblendBuilder *implTblendBuilder) C1Mode(c1Mode int) TblendBuilder {
	return tblendBuilder.withOption("c1_mode", expr.Int(c1Mode))
}

func (tblendBuilder *implTblendBuilder) C1ModeExpr(c1Mode expr.Expr) TblendBuilder {
	return tblendBuilder.withOption("c1_mode", c1Mode)
}

func (tblendBuilder *implTblendBuilder) C2Mode(c2Mode int) TblendBuilder {
	return tblendBuilder.withOption("c2_mode", expr.Int(c2Mode))
}

func (tblendBuilder *implTblendBuilder) C2ModeExpr(c2Mode expr.Expr) TblendBuilder {
	return tblendBuilder.withOption("c2_mode", c2Mode)
}

func (tblendBuilder *implTblendBuilder) C3Mode(c3Mode int) TblendBuilder {
	return tblendBuilder.withOption("c3_mode", expr.Int(c3Mode))
}

func (tblendBuilder *implTblendBuilder) C3ModeExpr(c3Mode expr.Expr) TblendBuilder {
	return tblendBuilder.withOption("c3_mode", c3Mode)
}

func (tblendBuilder *implTblendBuilder) AllMode(allMode int) TblendBuilder {
	return tblendBuilder.withOption("all_mode", expr.Int(allMode))
}

func (tblendBuilder *implTblendBuilder) AllModeExpr(allMode expr.Expr) TblendBuilder {
	return tblendBuilder.withOption("all_mode", allMode)
}

func (tblendBuilder *implTblendBuilder) C0Expr(c0Expr expr.Expr) TblendBuilder {
	return tblendBuilder.withOption("c0_expr", c0Expr)
}

func (tblendBuilder *implTblendBuilder) C1Expr(c1Expr expr.Expr) TblendBuilder {
	return tblendBuilder.withOption("c1_expr", c1Expr)
}

func (tblendBuilder *implTblendBuilder) C2Expr(c2Expr expr.Expr) TblendBuilder {
	return tblendBuilder.withOption("c2_expr", c2Expr)
}

func (tblendBuilder *implTblendBuilder) C3Expr(c3Expr expr.Expr) TblendBuilder {
	return tblendBuilder.withOption("c3_expr", c3Expr)
}

func (tblendBuilder *implTblendBuilder) AllExpr(allExpr expr.Expr) TblendBuilder {
	return tblendBuilder.withOption("all_expr", allExpr)
}

func (tblendBuilder *implTblendBuilder) C0Opacity(c0Opacity float64) TblendBuilder {
	return tblendBuilder.withOption("c0_opacity", expr.Double(c0Opacity))
}

func (tblendBuilder *implTblendBuilder) C0OpacityExpr(c0Opacity expr.Expr) TblendBuilder {
	return tblendBuilder.withOption("c0_opacity", c0Opacity)
}

func (tblendBuilder *implTblendBuilder) C1Opacity(c1Opacity float64) TblendBuilder {
	return tblendBuilder.withOption("c1_opacity", expr.Double(c1Opacity))
}

func (tblendBuilder *implTblendBuilder) C1OpacityExpr(c1Opacity expr.Expr) TblendBuilder {
	return tblendBuilder.withOption("c1_opacity", c1Opacity)
}

func (tblendBuilder *implTblendBuilder) C2Opacity(c2Opacity float64) TblendBuilder {
	return tblendBuilder.withOption("c2_opacity", expr.Double(c2Opacity))
}

func (tblendBuilder *implTblendBuilder) C2OpacityExpr(c2Opacity expr.Expr) TblendBuilder {
	return tblendBuilder.withOption("c2_opacity", c2Opacity)
}

func (tblendBuilder *implTblendBuilder) C3Opacity(c3Opacity float64) TblendBuilder {
	return tblendBuilder.withOption("c3_opacity", expr.Double(c3Opacity))
}

func (tblendBuilder *implTblendBuilder) C3OpacityExpr(c3Opacity expr.Expr) TblendBuilder {
	return tblendBuilder.withOption("c3_opacity", c3Opacity)
}

func (tblendBuilder *implTblendBuilder) AllOpacity(allOpacity float64) TblendBuilder {
	return tblendBuilder.withOption("all_opacity", expr.Double(allOpacity))
}

func (tblendBuilder *implTblendBuilder) AllOpacityExpr(allOpacity expr.Expr) TblendBuilder {
	return tblendBuilder.withOption("all_opacity", allOpacity)
}

func (tblendBuilder *implTblendBuilder) Enable(enable expr.Expr) TblendBuilder {
	return tblendBuilder.withOption("enable", enable)
}
