// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// GeqBuilder Apply generic equation to each pixel.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#geq
type GeqBuilder interface {
	filter.Filter
	// LumExpr set luminance expression.
	LumExpr(lumExpr expr.Expr) GeqBuilder
	// Lum set luminance expression.
	Lum(lum expr.Expr) GeqBuilder
	// CbExpr set chroma blue expression.
	CbExpr(cbExpr expr.Expr) GeqBuilder
	// Cb set chroma blue expression.
	Cb(cb expr.Expr) GeqBuilder
	// CrExpr set chroma red expression.
	CrExpr(crExpr expr.Expr) GeqBuilder
	// Cr set chroma red expression.
	Cr(cr expr.Expr) GeqBuilder
	// AlphaExpr set alpha expression.
	AlphaExpr(alphaExpr expr.Expr) GeqBuilder
	// A set alpha expression.
	A(a expr.Expr) GeqBuilder
	// RedExpr set red expression.
	RedExpr(redExpr expr.Expr) GeqBuilder
	// R set red expression.
	R(r expr.Expr) GeqBuilder
	// GreenExpr set green expression.
	GreenExpr(greenExpr expr.Expr) GeqBuilder
	// G set green expression.
	G(g expr.Expr) GeqBuilder
	// BlueExpr set blue expression.
	BlueExpr(blueExpr expr.Expr) GeqBuilder
	// B set blue expression.
	B(b expr.Expr) GeqBuilder
	// Interpolation set interpolation method (from 0 to 1) (default bilinear).
	Interpolation(interpolation int) GeqBuilder
	// I set interpolation method (from 0 to 1) (default bilinear).
	I(i int) GeqBuilder
	// Enable expression to enable or disable the filter.
	Enable(enable expr.Expr) GeqBuilder
}

// Geq creates a new GeqBuilder to configure the "geq" filter.
func Geq(opts ...filter.Option) GeqBuilder {
	return &implGeqBuilder{
		f: filter.New("geq", 1, opts...),
	}
}

type implGeqBuilder struct {
	f filter.Filter
}

func (geqBuilder *implGeqBuilder) String() string {
	return geqBuilder.f.String()
}

func (geqBuilder *implGeqBuilder) Outputs() int {
	return geqBuilder.f.Outputs()
}

func (geqBuilder *implGeqBuilder) With(key string, value expr.Expr) filter.Filter {
	return geqBuilder.withOption(key, value)
}

func (geqBuilder *implGeqBuilder) withOption(key string, value expr.Expr) GeqBuilder {
	bCopy := *geqBuilder
	bCopy.f = geqBuilder.f.With(key, value)
	return &bCopy
}

func (geqBuilder *implGeqBuilder) LumExpr(lumExpr expr.Expr) GeqBuilder {
	return geqBuilder.withOption("lum_expr", lumExpr)
}

func (geqBuilder *implGeqBuilder) Lum(lum expr.Expr) GeqBuilder {
	return geqBuilder.withOption("lum", lum)
}

func (geqBuilder *implGeqBuilder) CbExpr(cbExpr expr.Expr) GeqBuilder {
	return geqBuilder.withOption("cb_expr", cbExpr)
}

func (geqBuilder *implGeqBuilder) Cb(cb expr.Expr) GeqBuilder {
	return geqBuilder.withOption("cb", cb)
}

func (geqBuilder *implGeqBuilder) CrExpr(crExpr expr.Expr) GeqBuilder {
	return geqBuilder.withOption("cr_expr", crExpr)
}

func (geqBuilder *implGeqBuilder) Cr(cr expr.Expr) GeqBuilder {
	return geqBuilder.withOption("cr", cr)
}

func (geqBuilder *implGeqBuilder) AlphaExpr(alphaExpr expr.Expr) GeqBuilder {
	return geqBuilder.withOption("alpha_expr", alphaExpr)
}

func (geqBuilder *implGeqBuilder) A(a expr.Expr) GeqBuilder {
	return geqBuilder.withOption("a", a)
}

func (geqBuilder *implGeqBuilder) RedExpr(redExpr expr.Expr) GeqBuilder {
	return geqBuilder.withOption("red_expr", redExpr)
}

func (geqBuilder *implGeqBuilder) R(r expr.Expr) GeqBuilder {
	return geqBuilder.withOption("r", r)
}

func (geqBuilder *implGeqBuilder) GreenExpr(greenExpr expr.Expr) GeqBuilder {
	return geqBuilder.withOption("green_expr", greenExpr)
}

func (geqBuilder *implGeqBuilder) G(g expr.Expr) GeqBuilder {
	return geqBuilder.withOption("g", g)
}

func (geqBuilder *implGeqBuilder) BlueExpr(blueExpr expr.Expr) GeqBuilder {
	return geqBuilder.withOption("blue_expr", blueExpr)
}

func (geqBuilder *implGeqBuilder) B(b expr.Expr) GeqBuilder {
	return geqBuilder.withOption("b", b)
}

func (geqBuilder *implGeqBuilder) Interpolation(interpolation int) GeqBuilder {
	return geqBuilder.withOption("interpolation", expr.Int(interpolation))
}

func (geqBuilder *implGeqBuilder) I(i int) GeqBuilder {
	return geqBuilder.withOption("i", expr.Int(i))
}

func (geqBuilder *implGeqBuilder) Enable(enable expr.Expr) GeqBuilder {
	return geqBuilder.withOption("enable", enable)
}
