// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// GenericEquationBuilder corresponds to the "geq" FFmpeg filter.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#geq
type GenericEquationBuilder interface {
	filter.Filter
	// Luma sets the "luma" option on the filter.
	Luma(luma expr.Expr) GenericEquationBuilder
	// ChrominanceBlue sets the "cb" option on the filter.
	ChrominanceBlue(chrominanceBlue expr.Expr) GenericEquationBuilder
	// ChrominanceRed sets the "cr" option on the filter.
	ChrominanceRed(chrominanceRed expr.Expr) GenericEquationBuilder
	// Alpha sets the "a" option on the filter.
	Alpha(alpha expr.Expr) GenericEquationBuilder
	// Red sets the "r" option on the filter.
	Red(red expr.Expr) GenericEquationBuilder
	// Green sets the "g" option on the filter.
	Green(green expr.Expr) GenericEquationBuilder
	// Blue sets the "b" option on the filter.
	Blue(blue expr.Expr) GenericEquationBuilder
}

// GenericEquation creates a new GenericEquationBuilder to configure the "geq" filter.
func GenericEquation(opts ...filter.Option) GenericEquationBuilder {
	return &implGenericEquationBuilder{
		f: filter.New("geq", 1, opts...),
	}
}

type implGenericEquationBuilder struct {
	f filter.Filter
}

func (b *implGenericEquationBuilder) String() string {
	return b.f.String()
}

func (b *implGenericEquationBuilder) Outputs() int {
	return b.f.Outputs()
}

func (b *implGenericEquationBuilder) With(key string, value expr.Expr) filter.Filter {
	return b.withOption(key, value)
}

func (b *implGenericEquationBuilder) withOption(key string, value expr.Expr) GenericEquationBuilder {
	bCopy := *b
	bCopy.f = b.f.With(key, value)
	return &bCopy
}

func (b *implGenericEquationBuilder) Luma(luma expr.Expr) GenericEquationBuilder {
	return b.withOption("luma", luma)
}

func (b *implGenericEquationBuilder) ChrominanceBlue(chrominanceBlue expr.Expr) GenericEquationBuilder {
	return b.withOption("cb", chrominanceBlue)
}

func (b *implGenericEquationBuilder) ChrominanceRed(chrominanceRed expr.Expr) GenericEquationBuilder {
	return b.withOption("cr", chrominanceRed)
}

func (b *implGenericEquationBuilder) Alpha(alpha expr.Expr) GenericEquationBuilder {
	return b.withOption("a", alpha)
}

func (b *implGenericEquationBuilder) Red(red expr.Expr) GenericEquationBuilder {
	return b.withOption("r", red)
}

func (b *implGenericEquationBuilder) Green(green expr.Expr) GenericEquationBuilder {
	return b.withOption("g", green)
}

func (b *implGenericEquationBuilder) Blue(blue expr.Expr) GenericEquationBuilder {
	return b.withOption("b", blue)
}
