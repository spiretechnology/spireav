// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// BlockdetectBuilder Blockdetect filter.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#blockdetect
type BlockdetectBuilder interface {
	filter.Filter
	// PeriodMin Minimum period to search for (from 2 to 32) (default 3).
	PeriodMin(periodMin int) BlockdetectBuilder
	// PeriodMax Maximum period to search for (from 2 to 64) (default 24).
	PeriodMax(periodMax int) BlockdetectBuilder
	// Planes set planes to filter (from 0 to 15) (default 1).
	Planes(planes int) BlockdetectBuilder
}

// Blockdetect creates a new BlockdetectBuilder to configure the "blockdetect" filter.
func Blockdetect(opts ...filter.Option) BlockdetectBuilder {
	return &implBlockdetectBuilder{
		f: filter.New("blockdetect", 1, opts...),
	}
}

type implBlockdetectBuilder struct {
	f filter.Filter
}

func (blockdetectBuilder *implBlockdetectBuilder) String() string {
	return blockdetectBuilder.f.String()
}

func (blockdetectBuilder *implBlockdetectBuilder) Outputs() int {
	return blockdetectBuilder.f.Outputs()
}

func (blockdetectBuilder *implBlockdetectBuilder) With(key string, value expr.Expr) filter.Filter {
	return blockdetectBuilder.withOption(key, value)
}

func (blockdetectBuilder *implBlockdetectBuilder) withOption(key string, value expr.Expr) BlockdetectBuilder {
	bCopy := *blockdetectBuilder
	bCopy.f = blockdetectBuilder.f.With(key, value)
	return &bCopy
}

func (blockdetectBuilder *implBlockdetectBuilder) PeriodMin(periodMin int) BlockdetectBuilder {
	return blockdetectBuilder.withOption("period_min", expr.Int(periodMin))
}

func (blockdetectBuilder *implBlockdetectBuilder) PeriodMax(periodMax int) BlockdetectBuilder {
	return blockdetectBuilder.withOption("period_max", expr.Int(periodMax))
}

func (blockdetectBuilder *implBlockdetectBuilder) Planes(planes int) BlockdetectBuilder {
	return blockdetectBuilder.withOption("planes", expr.Int(planes))
}
