// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// PadBuilder Pad the input video.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#pad
type PadBuilder interface {
	filter.Filter
	// Width set the pad area width expression (default "iw").
	Width(width string) PadBuilder
	// W set the pad area width expression (default "iw").
	W(w string) PadBuilder
	// Height set the pad area height expression (default "ih").
	Height(height string) PadBuilder
	// H set the pad area height expression (default "ih").
	H(h string) PadBuilder
	// X set the x offset expression for the input image position (default "0").
	X(x string) PadBuilder
	// Y set the y offset expression for the input image position (default "0").
	Y(y string) PadBuilder
	// Color set the color of the padded area border (default "black").
	Color(color expr.Color) PadBuilder
	// Eval specify when to evaluate expressions (from 0 to 1) (default init).
	Eval(eval int) PadBuilder
	// Aspect pad to fit an aspect instead of a resolution (from 0 to DBL_MAX) (default 0/1).
	Aspect(aspect expr.Rational) PadBuilder
}

// Pad creates a new PadBuilder to configure the "pad" filter.
func Pad(opts ...filter.Option) PadBuilder {
	return &implPadBuilder{
		f: filter.New("pad", 1, opts...),
	}
}

type implPadBuilder struct {
	f filter.Filter
}

func (padBuilder *implPadBuilder) String() string {
	return padBuilder.f.String()
}

func (padBuilder *implPadBuilder) Outputs() int {
	return padBuilder.f.Outputs()
}

func (padBuilder *implPadBuilder) With(key string, value expr.Expr) filter.Filter {
	return padBuilder.withOption(key, value)
}

func (padBuilder *implPadBuilder) withOption(key string, value expr.Expr) PadBuilder {
	bCopy := *padBuilder
	bCopy.f = padBuilder.f.With(key, value)
	return &bCopy
}

func (padBuilder *implPadBuilder) Width(width string) PadBuilder {
	return padBuilder.withOption("width", expr.String(width))
}

func (padBuilder *implPadBuilder) W(w string) PadBuilder {
	return padBuilder.withOption("w", expr.String(w))
}

func (padBuilder *implPadBuilder) Height(height string) PadBuilder {
	return padBuilder.withOption("height", expr.String(height))
}

func (padBuilder *implPadBuilder) H(h string) PadBuilder {
	return padBuilder.withOption("h", expr.String(h))
}

func (padBuilder *implPadBuilder) X(x string) PadBuilder {
	return padBuilder.withOption("x", expr.String(x))
}

func (padBuilder *implPadBuilder) Y(y string) PadBuilder {
	return padBuilder.withOption("y", expr.String(y))
}

func (padBuilder *implPadBuilder) Color(color expr.Color) PadBuilder {
	return padBuilder.withOption("color", color)
}

func (padBuilder *implPadBuilder) Eval(eval int) PadBuilder {
	return padBuilder.withOption("eval", expr.Int(eval))
}

func (padBuilder *implPadBuilder) Aspect(aspect expr.Rational) PadBuilder {
	return padBuilder.withOption("aspect", aspect)
}
