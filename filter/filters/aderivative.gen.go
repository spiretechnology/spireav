// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// AderivativeBuilder Compute derivative of input audio.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#aderivative
type AderivativeBuilder interface {
	filter.Filter
	// Enable expression to enable or disable the filter.
	Enable(enable expr.Expr) AderivativeBuilder
}

// Aderivative creates a new AderivativeBuilder to configure the "aderivative" filter.
func Aderivative(opts ...filter.Option) AderivativeBuilder {
	return &implAderivativeBuilder{
		f: filter.New("aderivative", 1, opts...),
	}
}

type implAderivativeBuilder struct {
	f filter.Filter
}

func (aderivativeBuilder *implAderivativeBuilder) String() string {
	return aderivativeBuilder.f.String()
}

func (aderivativeBuilder *implAderivativeBuilder) Outputs() int {
	return aderivativeBuilder.f.Outputs()
}

func (aderivativeBuilder *implAderivativeBuilder) With(key string, value expr.Expr) filter.Filter {
	return aderivativeBuilder.withOption(key, value)
}

func (aderivativeBuilder *implAderivativeBuilder) withOption(key string, value expr.Expr) AderivativeBuilder {
	bCopy := *aderivativeBuilder
	bCopy.f = aderivativeBuilder.f.With(key, value)
	return &bCopy
}

func (aderivativeBuilder *implAderivativeBuilder) Enable(enable expr.Expr) AderivativeBuilder {
	return aderivativeBuilder.withOption("enable", enable)
}
