// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"time"

	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// TpadBuilder Temporarily pad video frames.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#tpad
type TpadBuilder interface {
	filter.Filter
	// Start set the number of frames to delay input (from 0 to INT_MAX) (default 0).
	Start(start int) TpadBuilder
	// Stop set the number of frames to add after input finished (from -1 to INT_MAX) (default 0).
	Stop(stop int) TpadBuilder
	// StartMode set the mode of added frames to start (from 0 to 1) (default add).
	StartMode(startMode int) TpadBuilder
	// StopMode set the mode of added frames to end (from 0 to 1) (default add).
	StopMode(stopMode int) TpadBuilder
	// StartDuration set the duration to delay input (default 0).
	StartDuration(startDuration time.Duration) TpadBuilder
	// StopDuration set the duration to pad input (default 0).
	StopDuration(stopDuration time.Duration) TpadBuilder
	// Color set the color of the added frames (default "black").
	Color(color expr.Color) TpadBuilder
}

// Tpad creates a new TpadBuilder to configure the "tpad" filter.
func Tpad(opts ...filter.Option) TpadBuilder {
	return &implTpadBuilder{
		f: filter.New("tpad", 1, opts...),
	}
}

type implTpadBuilder struct {
	f filter.Filter
}

func (tpadBuilder *implTpadBuilder) String() string {
	return tpadBuilder.f.String()
}

func (tpadBuilder *implTpadBuilder) Outputs() int {
	return tpadBuilder.f.Outputs()
}

func (tpadBuilder *implTpadBuilder) With(key string, value expr.Expr) filter.Filter {
	return tpadBuilder.withOption(key, value)
}

func (tpadBuilder *implTpadBuilder) withOption(key string, value expr.Expr) TpadBuilder {
	bCopy := *tpadBuilder
	bCopy.f = tpadBuilder.f.With(key, value)
	return &bCopy
}

func (tpadBuilder *implTpadBuilder) Start(start int) TpadBuilder {
	return tpadBuilder.withOption("start", expr.Int(start))
}

func (tpadBuilder *implTpadBuilder) Stop(stop int) TpadBuilder {
	return tpadBuilder.withOption("stop", expr.Int(stop))
}

func (tpadBuilder *implTpadBuilder) StartMode(startMode int) TpadBuilder {
	return tpadBuilder.withOption("start_mode", expr.Int(startMode))
}

func (tpadBuilder *implTpadBuilder) StopMode(stopMode int) TpadBuilder {
	return tpadBuilder.withOption("stop_mode", expr.Int(stopMode))
}

func (tpadBuilder *implTpadBuilder) StartDuration(startDuration time.Duration) TpadBuilder {
	return tpadBuilder.withOption("start_duration", expr.Duration(startDuration))
}

func (tpadBuilder *implTpadBuilder) StopDuration(stopDuration time.Duration) TpadBuilder {
	return tpadBuilder.withOption("stop_duration", expr.Duration(stopDuration))
}

func (tpadBuilder *implTpadBuilder) Color(color expr.Color) TpadBuilder {
	return tpadBuilder.withOption("color", color)
}
