// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// DatascopeBuilder Video data analysis.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#datascope
type DatascopeBuilder interface {
	filter.Filter
	// Size set output size (default "hd720").
	Size(size expr.Size) DatascopeBuilder
	// S set output size (default "hd720").
	S(s expr.Size) DatascopeBuilder
	// X set x offset (from 0 to INT_MAX) (default 0).
	X(x int) DatascopeBuilder
	// XExpr set x offset (from 0 to INT_MAX) (default 0).
	XExpr(x expr.Expr) DatascopeBuilder
	// Y set y offset (from 0 to INT_MAX) (default 0).
	Y(y int) DatascopeBuilder
	// YExpr set y offset (from 0 to INT_MAX) (default 0).
	YExpr(y expr.Expr) DatascopeBuilder
	// Mode set scope mode (from 0 to 2) (default mono).
	Mode(mode int) DatascopeBuilder
	// ModeExpr set scope mode (from 0 to 2) (default mono).
	ModeExpr(mode expr.Expr) DatascopeBuilder
	// Axis draw column/row numbers (default false).
	Axis(axis bool) DatascopeBuilder
	// AxisExpr draw column/row numbers (default false).
	AxisExpr(axis expr.Expr) DatascopeBuilder
	// Opacity set background opacity (from 0 to 1) (default 0.75).
	Opacity(opacity float32) DatascopeBuilder
	// OpacityExpr set background opacity (from 0 to 1) (default 0.75).
	OpacityExpr(opacity expr.Expr) DatascopeBuilder
	// Format set display number format (from 0 to 1) (default hex).
	Format(format int) DatascopeBuilder
	// FormatExpr set display number format (from 0 to 1) (default hex).
	FormatExpr(format expr.Expr) DatascopeBuilder
	// Components set components to display (from 1 to 15) (default 15).
	Components(components int) DatascopeBuilder
	// ComponentsExpr set components to display (from 1 to 15) (default 15).
	ComponentsExpr(components expr.Expr) DatascopeBuilder
}

// Datascope creates a new DatascopeBuilder to configure the "datascope" filter.
func Datascope(opts ...filter.Option) DatascopeBuilder {
	return &implDatascopeBuilder{
		f: filter.New("datascope", 1, opts...),
	}
}

type implDatascopeBuilder struct {
	f filter.Filter
}

func (datascopeBuilder *implDatascopeBuilder) String() string {
	return datascopeBuilder.f.String()
}

func (datascopeBuilder *implDatascopeBuilder) Outputs() int {
	return datascopeBuilder.f.Outputs()
}

func (datascopeBuilder *implDatascopeBuilder) With(key string, value expr.Expr) filter.Filter {
	return datascopeBuilder.withOption(key, value)
}

func (datascopeBuilder *implDatascopeBuilder) withOption(key string, value expr.Expr) DatascopeBuilder {
	bCopy := *datascopeBuilder
	bCopy.f = datascopeBuilder.f.With(key, value)
	return &bCopy
}

func (datascopeBuilder *implDatascopeBuilder) Size(size expr.Size) DatascopeBuilder {
	return datascopeBuilder.withOption("size", size)
}

func (datascopeBuilder *implDatascopeBuilder) S(s expr.Size) DatascopeBuilder {
	return datascopeBuilder.withOption("s", s)
}

func (datascopeBuilder *implDatascopeBuilder) X(x int) DatascopeBuilder {
	return datascopeBuilder.withOption("x", expr.Int(x))
}

func (datascopeBuilder *implDatascopeBuilder) XExpr(x expr.Expr) DatascopeBuilder {
	return datascopeBuilder.withOption("x", x)
}

func (datascopeBuilder *implDatascopeBuilder) Y(y int) DatascopeBuilder {
	return datascopeBuilder.withOption("y", expr.Int(y))
}

func (datascopeBuilder *implDatascopeBuilder) YExpr(y expr.Expr) DatascopeBuilder {
	return datascopeBuilder.withOption("y", y)
}

func (datascopeBuilder *implDatascopeBuilder) Mode(mode int) DatascopeBuilder {
	return datascopeBuilder.withOption("mode", expr.Int(mode))
}

func (datascopeBuilder *implDatascopeBuilder) ModeExpr(mode expr.Expr) DatascopeBuilder {
	return datascopeBuilder.withOption("mode", mode)
}

func (datascopeBuilder *implDatascopeBuilder) Axis(axis bool) DatascopeBuilder {
	return datascopeBuilder.withOption("axis", expr.Bool(axis))
}

func (datascopeBuilder *implDatascopeBuilder) AxisExpr(axis expr.Expr) DatascopeBuilder {
	return datascopeBuilder.withOption("axis", axis)
}

func (datascopeBuilder *implDatascopeBuilder) Opacity(opacity float32) DatascopeBuilder {
	return datascopeBuilder.withOption("opacity", expr.Float(opacity))
}

func (datascopeBuilder *implDatascopeBuilder) OpacityExpr(opacity expr.Expr) DatascopeBuilder {
	return datascopeBuilder.withOption("opacity", opacity)
}

func (datascopeBuilder *implDatascopeBuilder) Format(format int) DatascopeBuilder {
	return datascopeBuilder.withOption("format", expr.Int(format))
}

func (datascopeBuilder *implDatascopeBuilder) FormatExpr(format expr.Expr) DatascopeBuilder {
	return datascopeBuilder.withOption("format", format)
}

func (datascopeBuilder *implDatascopeBuilder) Components(components int) DatascopeBuilder {
	return datascopeBuilder.withOption("components", expr.Int(components))
}

func (datascopeBuilder *implDatascopeBuilder) ComponentsExpr(components expr.Expr) DatascopeBuilder {
	return datascopeBuilder.withOption("components", components)
}
