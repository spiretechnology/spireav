// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// SpeechnormBuilder Speech Normalizer.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#speechnorm
type SpeechnormBuilder interface {
	filter.Filter
	// Peak set the peak value (from 0 to 1) (default 0.95).
	Peak(peak float64) SpeechnormBuilder
	// PeakExpr set the peak value (from 0 to 1) (default 0.95).
	PeakExpr(peak expr.Expr) SpeechnormBuilder
	// P set the peak value (from 0 to 1) (default 0.95).
	P(p float64) SpeechnormBuilder
	// PExpr set the peak value (from 0 to 1) (default 0.95).
	PExpr(p expr.Expr) SpeechnormBuilder
	// Expansion set the max expansion factor (from 1 to 50) (default 2).
	Expansion(expansion float64) SpeechnormBuilder
	// ExpansionExpr set the max expansion factor (from 1 to 50) (default 2).
	ExpansionExpr(expansion expr.Expr) SpeechnormBuilder
	// E set the max expansion factor (from 1 to 50) (default 2).
	E(e float64) SpeechnormBuilder
	// EExpr set the max expansion factor (from 1 to 50) (default 2).
	EExpr(e expr.Expr) SpeechnormBuilder
	// Compression set the max compression factor (from 1 to 50) (default 2).
	Compression(compression float64) SpeechnormBuilder
	// CompressionExpr set the max compression factor (from 1 to 50) (default 2).
	CompressionExpr(compression expr.Expr) SpeechnormBuilder
	// C set the max compression factor (from 1 to 50) (default 2).
	C(c float64) SpeechnormBuilder
	// CExpr set the max compression factor (from 1 to 50) (default 2).
	CExpr(c expr.Expr) SpeechnormBuilder
	// Threshold set the threshold value (from 0 to 1) (default 0).
	Threshold(threshold float64) SpeechnormBuilder
	// ThresholdExpr set the threshold value (from 0 to 1) (default 0).
	ThresholdExpr(threshold expr.Expr) SpeechnormBuilder
	// T set the threshold value (from 0 to 1) (default 0).
	T(t float64) SpeechnormBuilder
	// TExpr set the threshold value (from 0 to 1) (default 0).
	TExpr(t expr.Expr) SpeechnormBuilder
	// Raise set the expansion raising amount (from 0 to 1) (default 0.001).
	Raise(raise float64) SpeechnormBuilder
	// RaiseExpr set the expansion raising amount (from 0 to 1) (default 0.001).
	RaiseExpr(raise expr.Expr) SpeechnormBuilder
	// R set the expansion raising amount (from 0 to 1) (default 0.001).
	R(r float64) SpeechnormBuilder
	// RExpr set the expansion raising amount (from 0 to 1) (default 0.001).
	RExpr(r expr.Expr) SpeechnormBuilder
	// Fall set the compression raising amount (from 0 to 1) (default 0.001).
	Fall(fall float64) SpeechnormBuilder
	// FallExpr set the compression raising amount (from 0 to 1) (default 0.001).
	FallExpr(fall expr.Expr) SpeechnormBuilder
	// F set the compression raising amount (from 0 to 1) (default 0.001).
	F(f float64) SpeechnormBuilder
	// FExpr set the compression raising amount (from 0 to 1) (default 0.001).
	FExpr(f expr.Expr) SpeechnormBuilder
	// Channels set channels to filter (default "all").
	Channels(channels string) SpeechnormBuilder
	// ChannelsExpr set channels to filter (default "all").
	ChannelsExpr(channels expr.Expr) SpeechnormBuilder
	// H set channels to filter (default "all").
	H(h string) SpeechnormBuilder
	// HExpr set channels to filter (default "all").
	HExpr(h expr.Expr) SpeechnormBuilder
	// Invert set inverted filtering (default false).
	Invert(invert bool) SpeechnormBuilder
	// InvertExpr set inverted filtering (default false).
	InvertExpr(invert expr.Expr) SpeechnormBuilder
	// I set inverted filtering (default false).
	I(i bool) SpeechnormBuilder
	// IExpr set inverted filtering (default false).
	IExpr(i expr.Expr) SpeechnormBuilder
	// Link set linked channels filtering (default false).
	Link(link bool) SpeechnormBuilder
	// LinkExpr set linked channels filtering (default false).
	LinkExpr(link expr.Expr) SpeechnormBuilder
	// L set linked channels filtering (default false).
	L(l bool) SpeechnormBuilder
	// LExpr set linked channels filtering (default false).
	LExpr(l expr.Expr) SpeechnormBuilder
	// Rms set the RMS value (from 0 to 1) (default 0).
	Rms(rms float64) SpeechnormBuilder
	// RmsExpr set the RMS value (from 0 to 1) (default 0).
	RmsExpr(rms expr.Expr) SpeechnormBuilder
	// M set the RMS value (from 0 to 1) (default 0).
	M(m float64) SpeechnormBuilder
	// MExpr set the RMS value (from 0 to 1) (default 0).
	MExpr(m expr.Expr) SpeechnormBuilder
}

// Speechnorm creates a new SpeechnormBuilder to configure the "speechnorm" filter.
func Speechnorm(opts ...filter.Option) SpeechnormBuilder {
	return &implSpeechnormBuilder{
		f: filter.New("speechnorm", 1, opts...),
	}
}

type implSpeechnormBuilder struct {
	f filter.Filter
}

func (speechnormBuilder *implSpeechnormBuilder) String() string {
	return speechnormBuilder.f.String()
}

func (speechnormBuilder *implSpeechnormBuilder) Outputs() int {
	return speechnormBuilder.f.Outputs()
}

func (speechnormBuilder *implSpeechnormBuilder) With(key string, value expr.Expr) filter.Filter {
	return speechnormBuilder.withOption(key, value)
}

func (speechnormBuilder *implSpeechnormBuilder) withOption(key string, value expr.Expr) SpeechnormBuilder {
	bCopy := *speechnormBuilder
	bCopy.f = speechnormBuilder.f.With(key, value)
	return &bCopy
}

func (speechnormBuilder *implSpeechnormBuilder) Peak(peak float64) SpeechnormBuilder {
	return speechnormBuilder.withOption("peak", expr.Double(peak))
}

func (speechnormBuilder *implSpeechnormBuilder) PeakExpr(peak expr.Expr) SpeechnormBuilder {
	return speechnormBuilder.withOption("peak", peak)
}

func (speechnormBuilder *implSpeechnormBuilder) P(p float64) SpeechnormBuilder {
	return speechnormBuilder.withOption("p", expr.Double(p))
}

func (speechnormBuilder *implSpeechnormBuilder) PExpr(p expr.Expr) SpeechnormBuilder {
	return speechnormBuilder.withOption("p", p)
}

func (speechnormBuilder *implSpeechnormBuilder) Expansion(expansion float64) SpeechnormBuilder {
	return speechnormBuilder.withOption("expansion", expr.Double(expansion))
}

func (speechnormBuilder *implSpeechnormBuilder) ExpansionExpr(expansion expr.Expr) SpeechnormBuilder {
	return speechnormBuilder.withOption("expansion", expansion)
}

func (speechnormBuilder *implSpeechnormBuilder) E(e float64) SpeechnormBuilder {
	return speechnormBuilder.withOption("e", expr.Double(e))
}

func (speechnormBuilder *implSpeechnormBuilder) EExpr(e expr.Expr) SpeechnormBuilder {
	return speechnormBuilder.withOption("e", e)
}

func (speechnormBuilder *implSpeechnormBuilder) Compression(compression float64) SpeechnormBuilder {
	return speechnormBuilder.withOption("compression", expr.Double(compression))
}

func (speechnormBuilder *implSpeechnormBuilder) CompressionExpr(compression expr.Expr) SpeechnormBuilder {
	return speechnormBuilder.withOption("compression", compression)
}

func (speechnormBuilder *implSpeechnormBuilder) C(c float64) SpeechnormBuilder {
	return speechnormBuilder.withOption("c", expr.Double(c))
}

func (speechnormBuilder *implSpeechnormBuilder) CExpr(c expr.Expr) SpeechnormBuilder {
	return speechnormBuilder.withOption("c", c)
}

func (speechnormBuilder *implSpeechnormBuilder) Threshold(threshold float64) SpeechnormBuilder {
	return speechnormBuilder.withOption("threshold", expr.Double(threshold))
}

func (speechnormBuilder *implSpeechnormBuilder) ThresholdExpr(threshold expr.Expr) SpeechnormBuilder {
	return speechnormBuilder.withOption("threshold", threshold)
}

func (speechnormBuilder *implSpeechnormBuilder) T(t float64) SpeechnormBuilder {
	return speechnormBuilder.withOption("t", expr.Double(t))
}

func (speechnormBuilder *implSpeechnormBuilder) TExpr(t expr.Expr) SpeechnormBuilder {
	return speechnormBuilder.withOption("t", t)
}

func (speechnormBuilder *implSpeechnormBuilder) Raise(raise float64) SpeechnormBuilder {
	return speechnormBuilder.withOption("raise", expr.Double(raise))
}

func (speechnormBuilder *implSpeechnormBuilder) RaiseExpr(raise expr.Expr) SpeechnormBuilder {
	return speechnormBuilder.withOption("raise", raise)
}

func (speechnormBuilder *implSpeechnormBuilder) R(r float64) SpeechnormBuilder {
	return speechnormBuilder.withOption("r", expr.Double(r))
}

func (speechnormBuilder *implSpeechnormBuilder) RExpr(r expr.Expr) SpeechnormBuilder {
	return speechnormBuilder.withOption("r", r)
}

func (speechnormBuilder *implSpeechnormBuilder) Fall(fall float64) SpeechnormBuilder {
	return speechnormBuilder.withOption("fall", expr.Double(fall))
}

func (speechnormBuilder *implSpeechnormBuilder) FallExpr(fall expr.Expr) SpeechnormBuilder {
	return speechnormBuilder.withOption("fall", fall)
}

func (speechnormBuilder *implSpeechnormBuilder) F(f float64) SpeechnormBuilder {
	return speechnormBuilder.withOption("f", expr.Double(f))
}

func (speechnormBuilder *implSpeechnormBuilder) FExpr(f expr.Expr) SpeechnormBuilder {
	return speechnormBuilder.withOption("f", f)
}

func (speechnormBuilder *implSpeechnormBuilder) Channels(channels string) SpeechnormBuilder {
	return speechnormBuilder.withOption("channels", expr.String(channels))
}

func (speechnormBuilder *implSpeechnormBuilder) ChannelsExpr(channels expr.Expr) SpeechnormBuilder {
	return speechnormBuilder.withOption("channels", channels)
}

func (speechnormBuilder *implSpeechnormBuilder) H(h string) SpeechnormBuilder {
	return speechnormBuilder.withOption("h", expr.String(h))
}

func (speechnormBuilder *implSpeechnormBuilder) HExpr(h expr.Expr) SpeechnormBuilder {
	return speechnormBuilder.withOption("h", h)
}

func (speechnormBuilder *implSpeechnormBuilder) Invert(invert bool) SpeechnormBuilder {
	return speechnormBuilder.withOption("invert", expr.Bool(invert))
}

func (speechnormBuilder *implSpeechnormBuilder) InvertExpr(invert expr.Expr) SpeechnormBuilder {
	return speechnormBuilder.withOption("invert", invert)
}

func (speechnormBuilder *implSpeechnormBuilder) I(i bool) SpeechnormBuilder {
	return speechnormBuilder.withOption("i", expr.Bool(i))
}

func (speechnormBuilder *implSpeechnormBuilder) IExpr(i expr.Expr) SpeechnormBuilder {
	return speechnormBuilder.withOption("i", i)
}

func (speechnormBuilder *implSpeechnormBuilder) Link(link bool) SpeechnormBuilder {
	return speechnormBuilder.withOption("link", expr.Bool(link))
}

func (speechnormBuilder *implSpeechnormBuilder) LinkExpr(link expr.Expr) SpeechnormBuilder {
	return speechnormBuilder.withOption("link", link)
}

func (speechnormBuilder *implSpeechnormBuilder) L(l bool) SpeechnormBuilder {
	return speechnormBuilder.withOption("l", expr.Bool(l))
}

func (speechnormBuilder *implSpeechnormBuilder) LExpr(l expr.Expr) SpeechnormBuilder {
	return speechnormBuilder.withOption("l", l)
}

func (speechnormBuilder *implSpeechnormBuilder) Rms(rms float64) SpeechnormBuilder {
	return speechnormBuilder.withOption("rms", expr.Double(rms))
}

func (speechnormBuilder *implSpeechnormBuilder) RmsExpr(rms expr.Expr) SpeechnormBuilder {
	return speechnormBuilder.withOption("rms", rms)
}

func (speechnormBuilder *implSpeechnormBuilder) M(m float64) SpeechnormBuilder {
	return speechnormBuilder.withOption("m", expr.Double(m))
}

func (speechnormBuilder *implSpeechnormBuilder) MExpr(m expr.Expr) SpeechnormBuilder {
	return speechnormBuilder.withOption("m", m)
}
