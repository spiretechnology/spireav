// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// FsppBuilder Apply Fast Simple Post-processing filter.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#fspp
type FsppBuilder interface {
	filter.Filter
	// Quality set quality (from 4 to 5) (default 4).
	Quality(quality int) FsppBuilder
	// Qp force a constant quantizer parameter (from 0 to 64) (default 0).
	Qp(qp int) FsppBuilder
	// Strength set filter strength (from -15 to 32) (default 0).
	Strength(strength int) FsppBuilder
	// UseBframeQp use B-frames' QP (default false).
	UseBframeQp(useBframeQp bool) FsppBuilder
	// Enable expression to enable or disable the filter.
	Enable(enable expr.Expr) FsppBuilder
}

// Fspp creates a new FsppBuilder to configure the "fspp" filter.
func Fspp(opts ...filter.Option) FsppBuilder {
	return &implFsppBuilder{
		f: filter.New("fspp", 1, opts...),
	}
}

type implFsppBuilder struct {
	f filter.Filter
}

func (fsppBuilder *implFsppBuilder) String() string {
	return fsppBuilder.f.String()
}

func (fsppBuilder *implFsppBuilder) Outputs() int {
	return fsppBuilder.f.Outputs()
}

func (fsppBuilder *implFsppBuilder) With(key string, value expr.Expr) filter.Filter {
	return fsppBuilder.withOption(key, value)
}

func (fsppBuilder *implFsppBuilder) withOption(key string, value expr.Expr) FsppBuilder {
	bCopy := *fsppBuilder
	bCopy.f = fsppBuilder.f.With(key, value)
	return &bCopy
}

func (fsppBuilder *implFsppBuilder) Quality(quality int) FsppBuilder {
	return fsppBuilder.withOption("quality", expr.Int(quality))
}

func (fsppBuilder *implFsppBuilder) Qp(qp int) FsppBuilder {
	return fsppBuilder.withOption("qp", expr.Int(qp))
}

func (fsppBuilder *implFsppBuilder) Strength(strength int) FsppBuilder {
	return fsppBuilder.withOption("strength", expr.Int(strength))
}

func (fsppBuilder *implFsppBuilder) UseBframeQp(useBframeQp bool) FsppBuilder {
	return fsppBuilder.withOption("use_bframe_qp", expr.Bool(useBframeQp))
}

func (fsppBuilder *implFsppBuilder) Enable(enable expr.Expr) FsppBuilder {
	return fsppBuilder.withOption("enable", enable)
}
