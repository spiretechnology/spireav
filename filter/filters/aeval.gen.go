// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// AevalBuilder Filter audio signal according to a specified expression.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#aeval
type AevalBuilder interface {
	filter.Filter
	// Exprs set the '|'-separated list of channels expressions.
	Exprs(exprs expr.Expr) AevalBuilder
	// ChannelLayout set channel layout.
	ChannelLayout(channelLayout string) AevalBuilder
	// C set channel layout.
	C(c string) AevalBuilder
	// Enable expression to enable or disable the filter.
	Enable(enable expr.Expr) AevalBuilder
}

// Aeval creates a new AevalBuilder to configure the "aeval" filter.
func Aeval(opts ...filter.Option) AevalBuilder {
	return &implAevalBuilder{
		f: filter.New("aeval", 1, opts...),
	}
}

type implAevalBuilder struct {
	f filter.Filter
}

func (aevalBuilder *implAevalBuilder) String() string {
	return aevalBuilder.f.String()
}

func (aevalBuilder *implAevalBuilder) Outputs() int {
	return aevalBuilder.f.Outputs()
}

func (aevalBuilder *implAevalBuilder) With(key string, value expr.Expr) filter.Filter {
	return aevalBuilder.withOption(key, value)
}

func (aevalBuilder *implAevalBuilder) withOption(key string, value expr.Expr) AevalBuilder {
	bCopy := *aevalBuilder
	bCopy.f = aevalBuilder.f.With(key, value)
	return &bCopy
}

func (aevalBuilder *implAevalBuilder) Exprs(exprs expr.Expr) AevalBuilder {
	return aevalBuilder.withOption("exprs", exprs)
}

func (aevalBuilder *implAevalBuilder) ChannelLayout(channelLayout string) AevalBuilder {
	return aevalBuilder.withOption("channel_layout", expr.String(channelLayout))
}

func (aevalBuilder *implAevalBuilder) C(c string) AevalBuilder {
	return aevalBuilder.withOption("c", expr.String(c))
}

func (aevalBuilder *implAevalBuilder) Enable(enable expr.Expr) AevalBuilder {
	return aevalBuilder.withOption("enable", enable)
}
