// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// PseudocolorBuilder Make pseudocolored video frames.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#pseudocolor
type PseudocolorBuilder interface {
	filter.Filter
	// C0 set component #0 expression (default "val").
	C0(c0 expr.Expr) PseudocolorBuilder
	// C1 set component #1 expression (default "val").
	C1(c1 expr.Expr) PseudocolorBuilder
	// C2 set component #2 expression (default "val").
	C2(c2 expr.Expr) PseudocolorBuilder
	// C3 set component #3 expression (default "val").
	C3(c3 expr.Expr) PseudocolorBuilder
	// Index set component as base (from 0 to 3) (default 0).
	Index(index int) PseudocolorBuilder
	// IndexExpr set component as base (from 0 to 3) (default 0).
	IndexExpr(index expr.Expr) PseudocolorBuilder
	// I set component as base (from 0 to 3) (default 0).
	I(i int) PseudocolorBuilder
	// IExpr set component as base (from 0 to 3) (default 0).
	IExpr(i expr.Expr) PseudocolorBuilder
	// Preset set preset (from -1 to 20) (default none).
	Preset(preset int) PseudocolorBuilder
	// PresetExpr set preset (from -1 to 20) (default none).
	PresetExpr(preset expr.Expr) PseudocolorBuilder
	// P set preset (from -1 to 20) (default none).
	P(p int) PseudocolorBuilder
	// PExpr set preset (from -1 to 20) (default none).
	PExpr(p expr.Expr) PseudocolorBuilder
	// Opacity set pseudocolor opacity (from 0 to 1) (default 1).
	Opacity(opacity float32) PseudocolorBuilder
	// OpacityExpr set pseudocolor opacity (from 0 to 1) (default 1).
	OpacityExpr(opacity expr.Expr) PseudocolorBuilder
	// Enable expression to enable or disable the filter.
	Enable(enable expr.Expr) PseudocolorBuilder
}

// Pseudocolor creates a new PseudocolorBuilder to configure the "pseudocolor" filter.
func Pseudocolor(opts ...filter.Option) PseudocolorBuilder {
	return &implPseudocolorBuilder{
		f: filter.New("pseudocolor", 1, opts...),
	}
}

type implPseudocolorBuilder struct {
	f filter.Filter
}

func (pseudocolorBuilder *implPseudocolorBuilder) String() string {
	return pseudocolorBuilder.f.String()
}

func (pseudocolorBuilder *implPseudocolorBuilder) Outputs() int {
	return pseudocolorBuilder.f.Outputs()
}

func (pseudocolorBuilder *implPseudocolorBuilder) With(key string, value expr.Expr) filter.Filter {
	return pseudocolorBuilder.withOption(key, value)
}

func (pseudocolorBuilder *implPseudocolorBuilder) withOption(key string, value expr.Expr) PseudocolorBuilder {
	bCopy := *pseudocolorBuilder
	bCopy.f = pseudocolorBuilder.f.With(key, value)
	return &bCopy
}

func (pseudocolorBuilder *implPseudocolorBuilder) C0(c0 expr.Expr) PseudocolorBuilder {
	return pseudocolorBuilder.withOption("c0", c0)
}

func (pseudocolorBuilder *implPseudocolorBuilder) C1(c1 expr.Expr) PseudocolorBuilder {
	return pseudocolorBuilder.withOption("c1", c1)
}

func (pseudocolorBuilder *implPseudocolorBuilder) C2(c2 expr.Expr) PseudocolorBuilder {
	return pseudocolorBuilder.withOption("c2", c2)
}

func (pseudocolorBuilder *implPseudocolorBuilder) C3(c3 expr.Expr) PseudocolorBuilder {
	return pseudocolorBuilder.withOption("c3", c3)
}

func (pseudocolorBuilder *implPseudocolorBuilder) Index(index int) PseudocolorBuilder {
	return pseudocolorBuilder.withOption("index", expr.Int(index))
}

func (pseudocolorBuilder *implPseudocolorBuilder) IndexExpr(index expr.Expr) PseudocolorBuilder {
	return pseudocolorBuilder.withOption("index", index)
}

func (pseudocolorBuilder *implPseudocolorBuilder) I(i int) PseudocolorBuilder {
	return pseudocolorBuilder.withOption("i", expr.Int(i))
}

func (pseudocolorBuilder *implPseudocolorBuilder) IExpr(i expr.Expr) PseudocolorBuilder {
	return pseudocolorBuilder.withOption("i", i)
}

func (pseudocolorBuilder *implPseudocolorBuilder) Preset(preset int) PseudocolorBuilder {
	return pseudocolorBuilder.withOption("preset", expr.Int(preset))
}

func (pseudocolorBuilder *implPseudocolorBuilder) PresetExpr(preset expr.Expr) PseudocolorBuilder {
	return pseudocolorBuilder.withOption("preset", preset)
}

func (pseudocolorBuilder *implPseudocolorBuilder) P(p int) PseudocolorBuilder {
	return pseudocolorBuilder.withOption("p", expr.Int(p))
}

func (pseudocolorBuilder *implPseudocolorBuilder) PExpr(p expr.Expr) PseudocolorBuilder {
	return pseudocolorBuilder.withOption("p", p)
}

func (pseudocolorBuilder *implPseudocolorBuilder) Opacity(opacity float32) PseudocolorBuilder {
	return pseudocolorBuilder.withOption("opacity", expr.Float(opacity))
}

func (pseudocolorBuilder *implPseudocolorBuilder) OpacityExpr(opacity expr.Expr) PseudocolorBuilder {
	return pseudocolorBuilder.withOption("opacity", opacity)
}

func (pseudocolorBuilder *implPseudocolorBuilder) Enable(enable expr.Expr) PseudocolorBuilder {
	return pseudocolorBuilder.withOption("enable", enable)
}
