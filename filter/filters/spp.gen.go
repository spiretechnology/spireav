// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// SppBuilder Apply a simple post processing filter.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#spp
type SppBuilder interface {
	filter.Filter
	// Quality set quality (from 0 to 6) (default 3).
	Quality(quality int) SppBuilder
	// QualityExpr set quality (from 0 to 6) (default 3).
	QualityExpr(quality expr.Expr) SppBuilder
	// Qp force a constant quantizer parameter (from 0 to 63) (default 0).
	Qp(qp int) SppBuilder
	// Mode set thresholding mode (from 0 to 1) (default hard).
	Mode(mode int) SppBuilder
	// UseBframeQp use B-frames' QP (default false).
	UseBframeQp(useBframeQp bool) SppBuilder
}

// Spp creates a new SppBuilder to configure the "spp" filter.
func Spp(opts ...filter.Option) SppBuilder {
	return &implSppBuilder{
		f: filter.New("spp", 1, opts...),
	}
}

type implSppBuilder struct {
	f filter.Filter
}

func (sppBuilder *implSppBuilder) String() string {
	return sppBuilder.f.String()
}

func (sppBuilder *implSppBuilder) Outputs() int {
	return sppBuilder.f.Outputs()
}

func (sppBuilder *implSppBuilder) With(key string, value expr.Expr) filter.Filter {
	return sppBuilder.withOption(key, value)
}

func (sppBuilder *implSppBuilder) withOption(key string, value expr.Expr) SppBuilder {
	bCopy := *sppBuilder
	bCopy.f = sppBuilder.f.With(key, value)
	return &bCopy
}

func (sppBuilder *implSppBuilder) Quality(quality int) SppBuilder {
	return sppBuilder.withOption("quality", expr.Int(quality))
}

func (sppBuilder *implSppBuilder) QualityExpr(quality expr.Expr) SppBuilder {
	return sppBuilder.withOption("quality", quality)
}

func (sppBuilder *implSppBuilder) Qp(qp int) SppBuilder {
	return sppBuilder.withOption("qp", expr.Int(qp))
}

func (sppBuilder *implSppBuilder) Mode(mode int) SppBuilder {
	return sppBuilder.withOption("mode", expr.Int(mode))
}

func (sppBuilder *implSppBuilder) UseBframeQp(useBframeQp bool) SppBuilder {
	return sppBuilder.withOption("use_bframe_qp", expr.Bool(useBframeQp))
}
