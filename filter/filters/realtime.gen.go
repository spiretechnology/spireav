// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"time"

	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// RealtimeBuilder Slow down filtering to match realtime.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#realtime
type RealtimeBuilder interface {
	filter.Filter
	// Limit sleep time limit (default 2).
	Limit(limit time.Duration) RealtimeBuilder
	// LimitExpr sleep time limit (default 2).
	LimitExpr(limit expr.Expr) RealtimeBuilder
	// Speed speed factor (from DBL_MIN to DBL_MAX) (default 1).
	Speed(speed float64) RealtimeBuilder
	// SpeedExpr speed factor (from DBL_MIN to DBL_MAX) (default 1).
	SpeedExpr(speed expr.Expr) RealtimeBuilder
}

// Realtime creates a new RealtimeBuilder to configure the "realtime" filter.
func Realtime(opts ...filter.Option) RealtimeBuilder {
	return &implRealtimeBuilder{
		f: filter.New("realtime", 1, opts...),
	}
}

type implRealtimeBuilder struct {
	f filter.Filter
}

func (realtimeBuilder *implRealtimeBuilder) String() string {
	return realtimeBuilder.f.String()
}

func (realtimeBuilder *implRealtimeBuilder) Outputs() int {
	return realtimeBuilder.f.Outputs()
}

func (realtimeBuilder *implRealtimeBuilder) With(key string, value expr.Expr) filter.Filter {
	return realtimeBuilder.withOption(key, value)
}

func (realtimeBuilder *implRealtimeBuilder) withOption(key string, value expr.Expr) RealtimeBuilder {
	bCopy := *realtimeBuilder
	bCopy.f = realtimeBuilder.f.With(key, value)
	return &bCopy
}

func (realtimeBuilder *implRealtimeBuilder) Limit(limit time.Duration) RealtimeBuilder {
	return realtimeBuilder.withOption("limit", expr.Duration(limit))
}

func (realtimeBuilder *implRealtimeBuilder) LimitExpr(limit expr.Expr) RealtimeBuilder {
	return realtimeBuilder.withOption("limit", limit)
}

func (realtimeBuilder *implRealtimeBuilder) Speed(speed float64) RealtimeBuilder {
	return realtimeBuilder.withOption("speed", expr.Double(speed))
}

func (realtimeBuilder *implRealtimeBuilder) SpeedExpr(speed expr.Expr) RealtimeBuilder {
	return realtimeBuilder.withOption("speed", speed)
}
