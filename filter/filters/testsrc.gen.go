// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"time"

	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// TestsrcBuilder Generate test pattern.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#testsrc
type TestsrcBuilder interface {
	filter.Filter
	// Size set video size (default "320x240").
	Size(size expr.Size) TestsrcBuilder
	// S set video size (default "320x240").
	S(s expr.Size) TestsrcBuilder
	// Rate set video rate (default "25").
	Rate(rate expr.Rational) TestsrcBuilder
	// R set video rate (default "25").
	R(r expr.Rational) TestsrcBuilder
	// Duration set video duration (default -0.000001).
	Duration(duration time.Duration) TestsrcBuilder
	// D set video duration (default -0.000001).
	D(d time.Duration) TestsrcBuilder
	// Sar set video sample aspect ratio (from 0 to INT_MAX) (default 1/1).
	Sar(sar expr.Rational) TestsrcBuilder
	// Decimals set number of decimals to show (from 0 to 17) (default 0).
	Decimals(decimals int) TestsrcBuilder
	// N set number of decimals to show (from 0 to 17) (default 0).
	N(n int) TestsrcBuilder
}

// Testsrc creates a new TestsrcBuilder to configure the "testsrc" filter.
func Testsrc(opts ...filter.Option) TestsrcBuilder {
	return &implTestsrcBuilder{
		f: filter.New("testsrc", 1, opts...),
	}
}

type implTestsrcBuilder struct {
	f filter.Filter
}

func (testsrcBuilder *implTestsrcBuilder) String() string {
	return testsrcBuilder.f.String()
}

func (testsrcBuilder *implTestsrcBuilder) Outputs() int {
	return testsrcBuilder.f.Outputs()
}

func (testsrcBuilder *implTestsrcBuilder) With(key string, value expr.Expr) filter.Filter {
	return testsrcBuilder.withOption(key, value)
}

func (testsrcBuilder *implTestsrcBuilder) withOption(key string, value expr.Expr) TestsrcBuilder {
	bCopy := *testsrcBuilder
	bCopy.f = testsrcBuilder.f.With(key, value)
	return &bCopy
}

func (testsrcBuilder *implTestsrcBuilder) Size(size expr.Size) TestsrcBuilder {
	return testsrcBuilder.withOption("size", size)
}

func (testsrcBuilder *implTestsrcBuilder) S(s expr.Size) TestsrcBuilder {
	return testsrcBuilder.withOption("s", s)
}

func (testsrcBuilder *implTestsrcBuilder) Rate(rate expr.Rational) TestsrcBuilder {
	return testsrcBuilder.withOption("rate", rate)
}

func (testsrcBuilder *implTestsrcBuilder) R(r expr.Rational) TestsrcBuilder {
	return testsrcBuilder.withOption("r", r)
}

func (testsrcBuilder *implTestsrcBuilder) Duration(duration time.Duration) TestsrcBuilder {
	return testsrcBuilder.withOption("duration", expr.Duration(duration))
}

func (testsrcBuilder *implTestsrcBuilder) D(d time.Duration) TestsrcBuilder {
	return testsrcBuilder.withOption("d", expr.Duration(d))
}

func (testsrcBuilder *implTestsrcBuilder) Sar(sar expr.Rational) TestsrcBuilder {
	return testsrcBuilder.withOption("sar", sar)
}

func (testsrcBuilder *implTestsrcBuilder) Decimals(decimals int) TestsrcBuilder {
	return testsrcBuilder.withOption("decimals", expr.Int(decimals))
}

func (testsrcBuilder *implTestsrcBuilder) N(n int) TestsrcBuilder {
	return testsrcBuilder.withOption("n", expr.Int(n))
}
