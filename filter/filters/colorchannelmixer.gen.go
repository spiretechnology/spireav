// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// ColorchannelmixerBuilder Adjust colors by mixing color channels.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#colorchannelmixer
type ColorchannelmixerBuilder interface {
	filter.Filter
	// Rr set the red gain for the red channel (from -2 to 2) (default 1).
	Rr(rr float64) ColorchannelmixerBuilder
	// RrExpr set the red gain for the red channel (from -2 to 2) (default 1).
	RrExpr(rr expr.Expr) ColorchannelmixerBuilder
	// Rg set the green gain for the red channel (from -2 to 2) (default 0).
	Rg(rg float64) ColorchannelmixerBuilder
	// RgExpr set the green gain for the red channel (from -2 to 2) (default 0).
	RgExpr(rg expr.Expr) ColorchannelmixerBuilder
	// Rb set the blue gain for the red channel (from -2 to 2) (default 0).
	Rb(rb float64) ColorchannelmixerBuilder
	// RbExpr set the blue gain for the red channel (from -2 to 2) (default 0).
	RbExpr(rb expr.Expr) ColorchannelmixerBuilder
	// Ra set the alpha gain for the red channel (from -2 to 2) (default 0).
	Ra(ra float64) ColorchannelmixerBuilder
	// RaExpr set the alpha gain for the red channel (from -2 to 2) (default 0).
	RaExpr(ra expr.Expr) ColorchannelmixerBuilder
	// Gr set the red gain for the green channel (from -2 to 2) (default 0).
	Gr(gr float64) ColorchannelmixerBuilder
	// GrExpr set the red gain for the green channel (from -2 to 2) (default 0).
	GrExpr(gr expr.Expr) ColorchannelmixerBuilder
	// Gg set the green gain for the green channel (from -2 to 2) (default 1).
	Gg(gg float64) ColorchannelmixerBuilder
	// GgExpr set the green gain for the green channel (from -2 to 2) (default 1).
	GgExpr(gg expr.Expr) ColorchannelmixerBuilder
	// Gb set the blue gain for the green channel (from -2 to 2) (default 0).
	Gb(gb float64) ColorchannelmixerBuilder
	// GbExpr set the blue gain for the green channel (from -2 to 2) (default 0).
	GbExpr(gb expr.Expr) ColorchannelmixerBuilder
	// Ga set the alpha gain for the green channel (from -2 to 2) (default 0).
	Ga(ga float64) ColorchannelmixerBuilder
	// GaExpr set the alpha gain for the green channel (from -2 to 2) (default 0).
	GaExpr(ga expr.Expr) ColorchannelmixerBuilder
	// Br set the red gain for the blue channel (from -2 to 2) (default 0).
	Br(br float64) ColorchannelmixerBuilder
	// BrExpr set the red gain for the blue channel (from -2 to 2) (default 0).
	BrExpr(br expr.Expr) ColorchannelmixerBuilder
	// Bg set the green gain for the blue channel (from -2 to 2) (default 0).
	Bg(bg float64) ColorchannelmixerBuilder
	// BgExpr set the green gain for the blue channel (from -2 to 2) (default 0).
	BgExpr(bg expr.Expr) ColorchannelmixerBuilder
	// Bb set the blue gain for the blue channel (from -2 to 2) (default 1).
	Bb(bb float64) ColorchannelmixerBuilder
	// BbExpr set the blue gain for the blue channel (from -2 to 2) (default 1).
	BbExpr(bb expr.Expr) ColorchannelmixerBuilder
	// Ba set the alpha gain for the blue channel (from -2 to 2) (default 0).
	Ba(ba float64) ColorchannelmixerBuilder
	// BaExpr set the alpha gain for the blue channel (from -2 to 2) (default 0).
	BaExpr(ba expr.Expr) ColorchannelmixerBuilder
	// Ar set the red gain for the alpha channel (from -2 to 2) (default 0).
	Ar(ar float64) ColorchannelmixerBuilder
	// ArExpr set the red gain for the alpha channel (from -2 to 2) (default 0).
	ArExpr(ar expr.Expr) ColorchannelmixerBuilder
	// Ag set the green gain for the alpha channel (from -2 to 2) (default 0).
	Ag(ag float64) ColorchannelmixerBuilder
	// AgExpr set the green gain for the alpha channel (from -2 to 2) (default 0).
	AgExpr(ag expr.Expr) ColorchannelmixerBuilder
	// Ab set the blue gain for the alpha channel (from -2 to 2) (default 0).
	Ab(ab float64) ColorchannelmixerBuilder
	// AbExpr set the blue gain for the alpha channel (from -2 to 2) (default 0).
	AbExpr(ab expr.Expr) ColorchannelmixerBuilder
	// Aa set the alpha gain for the alpha channel (from -2 to 2) (default 1).
	Aa(aa float64) ColorchannelmixerBuilder
	// AaExpr set the alpha gain for the alpha channel (from -2 to 2) (default 1).
	AaExpr(aa expr.Expr) ColorchannelmixerBuilder
	// Pc set the preserve color mode (from 0 to 6) (default none).
	Pc(pc int) ColorchannelmixerBuilder
	// PcExpr set the preserve color mode (from 0 to 6) (default none).
	PcExpr(pc expr.Expr) ColorchannelmixerBuilder
	// Pa set the preserve color amount (from 0 to 1) (default 0).
	Pa(pa float64) ColorchannelmixerBuilder
	// PaExpr set the preserve color amount (from 0 to 1) (default 0).
	PaExpr(pa expr.Expr) ColorchannelmixerBuilder
}

// Colorchannelmixer creates a new ColorchannelmixerBuilder to configure the "colorchannelmixer" filter.
func Colorchannelmixer(opts ...filter.Option) ColorchannelmixerBuilder {
	return &implColorchannelmixerBuilder{
		f: filter.New("colorchannelmixer", 1, opts...),
	}
}

type implColorchannelmixerBuilder struct {
	f filter.Filter
}

func (colorchannelmixerBuilder *implColorchannelmixerBuilder) String() string {
	return colorchannelmixerBuilder.f.String()
}

func (colorchannelmixerBuilder *implColorchannelmixerBuilder) Outputs() int {
	return colorchannelmixerBuilder.f.Outputs()
}

func (colorchannelmixerBuilder *implColorchannelmixerBuilder) With(key string, value expr.Expr) filter.Filter {
	return colorchannelmixerBuilder.withOption(key, value)
}

func (colorchannelmixerBuilder *implColorchannelmixerBuilder) withOption(key string, value expr.Expr) ColorchannelmixerBuilder {
	bCopy := *colorchannelmixerBuilder
	bCopy.f = colorchannelmixerBuilder.f.With(key, value)
	return &bCopy
}

func (colorchannelmixerBuilder *implColorchannelmixerBuilder) Rr(rr float64) ColorchannelmixerBuilder {
	return colorchannelmixerBuilder.withOption("rr", expr.Double(rr))
}

func (colorchannelmixerBuilder *implColorchannelmixerBuilder) RrExpr(rr expr.Expr) ColorchannelmixerBuilder {
	return colorchannelmixerBuilder.withOption("rr", rr)
}

func (colorchannelmixerBuilder *implColorchannelmixerBuilder) Rg(rg float64) ColorchannelmixerBuilder {
	return colorchannelmixerBuilder.withOption("rg", expr.Double(rg))
}

func (colorchannelmixerBuilder *implColorchannelmixerBuilder) RgExpr(rg expr.Expr) ColorchannelmixerBuilder {
	return colorchannelmixerBuilder.withOption("rg", rg)
}

func (colorchannelmixerBuilder *implColorchannelmixerBuilder) Rb(rb float64) ColorchannelmixerBuilder {
	return colorchannelmixerBuilder.withOption("rb", expr.Double(rb))
}

func (colorchannelmixerBuilder *implColorchannelmixerBuilder) RbExpr(rb expr.Expr) ColorchannelmixerBuilder {
	return colorchannelmixerBuilder.withOption("rb", rb)
}

func (colorchannelmixerBuilder *implColorchannelmixerBuilder) Ra(ra float64) ColorchannelmixerBuilder {
	return colorchannelmixerBuilder.withOption("ra", expr.Double(ra))
}

func (colorchannelmixerBuilder *implColorchannelmixerBuilder) RaExpr(ra expr.Expr) ColorchannelmixerBuilder {
	return colorchannelmixerBuilder.withOption("ra", ra)
}

func (colorchannelmixerBuilder *implColorchannelmixerBuilder) Gr(gr float64) ColorchannelmixerBuilder {
	return colorchannelmixerBuilder.withOption("gr", expr.Double(gr))
}

func (colorchannelmixerBuilder *implColorchannelmixerBuilder) GrExpr(gr expr.Expr) ColorchannelmixerBuilder {
	return colorchannelmixerBuilder.withOption("gr", gr)
}

func (colorchannelmixerBuilder *implColorchannelmixerBuilder) Gg(gg float64) ColorchannelmixerBuilder {
	return colorchannelmixerBuilder.withOption("gg", expr.Double(gg))
}

func (colorchannelmixerBuilder *implColorchannelmixerBuilder) GgExpr(gg expr.Expr) ColorchannelmixerBuilder {
	return colorchannelmixerBuilder.withOption("gg", gg)
}

func (colorchannelmixerBuilder *implColorchannelmixerBuilder) Gb(gb float64) ColorchannelmixerBuilder {
	return colorchannelmixerBuilder.withOption("gb", expr.Double(gb))
}

func (colorchannelmixerBuilder *implColorchannelmixerBuilder) GbExpr(gb expr.Expr) ColorchannelmixerBuilder {
	return colorchannelmixerBuilder.withOption("gb", gb)
}

func (colorchannelmixerBuilder *implColorchannelmixerBuilder) Ga(ga float64) ColorchannelmixerBuilder {
	return colorchannelmixerBuilder.withOption("ga", expr.Double(ga))
}

func (colorchannelmixerBuilder *implColorchannelmixerBuilder) GaExpr(ga expr.Expr) ColorchannelmixerBuilder {
	return colorchannelmixerBuilder.withOption("ga", ga)
}

func (colorchannelmixerBuilder *implColorchannelmixerBuilder) Br(br float64) ColorchannelmixerBuilder {
	return colorchannelmixerBuilder.withOption("br", expr.Double(br))
}

func (colorchannelmixerBuilder *implColorchannelmixerBuilder) BrExpr(br expr.Expr) ColorchannelmixerBuilder {
	return colorchannelmixerBuilder.withOption("br", br)
}

func (colorchannelmixerBuilder *implColorchannelmixerBuilder) Bg(bg float64) ColorchannelmixerBuilder {
	return colorchannelmixerBuilder.withOption("bg", expr.Double(bg))
}

func (colorchannelmixerBuilder *implColorchannelmixerBuilder) BgExpr(bg expr.Expr) ColorchannelmixerBuilder {
	return colorchannelmixerBuilder.withOption("bg", bg)
}

func (colorchannelmixerBuilder *implColorchannelmixerBuilder) Bb(bb float64) ColorchannelmixerBuilder {
	return colorchannelmixerBuilder.withOption("bb", expr.Double(bb))
}

func (colorchannelmixerBuilder *implColorchannelmixerBuilder) BbExpr(bb expr.Expr) ColorchannelmixerBuilder {
	return colorchannelmixerBuilder.withOption("bb", bb)
}

func (colorchannelmixerBuilder *implColorchannelmixerBuilder) Ba(ba float64) ColorchannelmixerBuilder {
	return colorchannelmixerBuilder.withOption("ba", expr.Double(ba))
}

func (colorchannelmixerBuilder *implColorchannelmixerBuilder) BaExpr(ba expr.Expr) ColorchannelmixerBuilder {
	return colorchannelmixerBuilder.withOption("ba", ba)
}

func (colorchannelmixerBuilder *implColorchannelmixerBuilder) Ar(ar float64) ColorchannelmixerBuilder {
	return colorchannelmixerBuilder.withOption("ar", expr.Double(ar))
}

func (colorchannelmixerBuilder *implColorchannelmixerBuilder) ArExpr(ar expr.Expr) ColorchannelmixerBuilder {
	return colorchannelmixerBuilder.withOption("ar", ar)
}

func (colorchannelmixerBuilder *implColorchannelmixerBuilder) Ag(ag float64) ColorchannelmixerBuilder {
	return colorchannelmixerBuilder.withOption("ag", expr.Double(ag))
}

func (colorchannelmixerBuilder *implColorchannelmixerBuilder) AgExpr(ag expr.Expr) ColorchannelmixerBuilder {
	return colorchannelmixerBuilder.withOption("ag", ag)
}

func (colorchannelmixerBuilder *implColorchannelmixerBuilder) Ab(ab float64) ColorchannelmixerBuilder {
	return colorchannelmixerBuilder.withOption("ab", expr.Double(ab))
}

func (colorchannelmixerBuilder *implColorchannelmixerBuilder) AbExpr(ab expr.Expr) ColorchannelmixerBuilder {
	return colorchannelmixerBuilder.withOption("ab", ab)
}

func (colorchannelmixerBuilder *implColorchannelmixerBuilder) Aa(aa float64) ColorchannelmixerBuilder {
	return colorchannelmixerBuilder.withOption("aa", expr.Double(aa))
}

func (colorchannelmixerBuilder *implColorchannelmixerBuilder) AaExpr(aa expr.Expr) ColorchannelmixerBuilder {
	return colorchannelmixerBuilder.withOption("aa", aa)
}

func (colorchannelmixerBuilder *implColorchannelmixerBuilder) Pc(pc int) ColorchannelmixerBuilder {
	return colorchannelmixerBuilder.withOption("pc", expr.Int(pc))
}

func (colorchannelmixerBuilder *implColorchannelmixerBuilder) PcExpr(pc expr.Expr) ColorchannelmixerBuilder {
	return colorchannelmixerBuilder.withOption("pc", pc)
}

func (colorchannelmixerBuilder *implColorchannelmixerBuilder) Pa(pa float64) ColorchannelmixerBuilder {
	return colorchannelmixerBuilder.withOption("pa", expr.Double(pa))
}

func (colorchannelmixerBuilder *implColorchannelmixerBuilder) PaExpr(pa expr.Expr) ColorchannelmixerBuilder {
	return colorchannelmixerBuilder.withOption("pa", pa)
}
