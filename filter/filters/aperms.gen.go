// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// ApermsBuilder Set permissions for the output audio frame.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#aperms
type ApermsBuilder interface {
	filter.Filter
	// Mode select permissions mode (from 0 to 4) (default none).
	Mode(mode int) ApermsBuilder
	// ModeExpr select permissions mode (from 0 to 4) (default none).
	ModeExpr(mode expr.Expr) ApermsBuilder
	// Seed set the seed for the random mode (from -1 to UINT32_MAX) (default -1).
	Seed(seed int64) ApermsBuilder
	// Enable expression to enable or disable the filter.
	Enable(enable expr.Expr) ApermsBuilder
}

// Aperms creates a new ApermsBuilder to configure the "aperms" filter.
func Aperms(opts ...filter.Option) ApermsBuilder {
	return &implApermsBuilder{
		f: filter.New("aperms", 1, opts...),
	}
}

type implApermsBuilder struct {
	f filter.Filter
}

func (apermsBuilder *implApermsBuilder) String() string {
	return apermsBuilder.f.String()
}

func (apermsBuilder *implApermsBuilder) Outputs() int {
	return apermsBuilder.f.Outputs()
}

func (apermsBuilder *implApermsBuilder) With(key string, value expr.Expr) filter.Filter {
	return apermsBuilder.withOption(key, value)
}

func (apermsBuilder *implApermsBuilder) withOption(key string, value expr.Expr) ApermsBuilder {
	bCopy := *apermsBuilder
	bCopy.f = apermsBuilder.f.With(key, value)
	return &bCopy
}

func (apermsBuilder *implApermsBuilder) Mode(mode int) ApermsBuilder {
	return apermsBuilder.withOption("mode", expr.Int(mode))
}

func (apermsBuilder *implApermsBuilder) ModeExpr(mode expr.Expr) ApermsBuilder {
	return apermsBuilder.withOption("mode", mode)
}

func (apermsBuilder *implApermsBuilder) Seed(seed int64) ApermsBuilder {
	return apermsBuilder.withOption("seed", expr.Int64(seed))
}

func (apermsBuilder *implApermsBuilder) Enable(enable expr.Expr) ApermsBuilder {
	return apermsBuilder.withOption("enable", enable)
}
