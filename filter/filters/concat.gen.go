// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// ConcatBuilder Concatenate audio and video streams.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#concat
type ConcatBuilder interface {
	filter.Filter
	// N specify the number of segments (from 1 to INT_MAX) (default 2).
	N(n int) ConcatBuilder
	// V specify the number of video streams (from 0 to INT_MAX) (default 1).
	V(v int) ConcatBuilder
	// A specify the number of audio streams (from 0 to INT_MAX) (default 0).
	A(a int) ConcatBuilder
	// Unsafe enable unsafe mode (default false).
	Unsafe(unsafe bool) ConcatBuilder
}

// Concat creates a new ConcatBuilder to configure the "concat" filter.
func Concat(outputs int, opts ...filter.Option) ConcatBuilder {
	f := filter.New("concat", outputs, opts...)
	f = f.With("outputs", expr.Int(outputs))
	return &implConcatBuilder{f: f}
}

type implConcatBuilder struct {
	f filter.Filter
}

func (concatBuilder *implConcatBuilder) String() string {
	return concatBuilder.f.String()
}

func (concatBuilder *implConcatBuilder) Outputs() int {
	return concatBuilder.f.Outputs()
}

func (concatBuilder *implConcatBuilder) With(key string, value expr.Expr) filter.Filter {
	return concatBuilder.withOption(key, value)
}

func (concatBuilder *implConcatBuilder) withOption(key string, value expr.Expr) ConcatBuilder {
	bCopy := *concatBuilder
	bCopy.f = concatBuilder.f.With(key, value)
	return &bCopy
}

func (concatBuilder *implConcatBuilder) N(n int) ConcatBuilder {
	return concatBuilder.withOption("n", expr.Int(n))
}

func (concatBuilder *implConcatBuilder) V(v int) ConcatBuilder {
	return concatBuilder.withOption("v", expr.Int(v))
}

func (concatBuilder *implConcatBuilder) A(a int) ConcatBuilder {
	return concatBuilder.withOption("a", expr.Int(a))
}

func (concatBuilder *implConcatBuilder) Unsafe(unsafe bool) ConcatBuilder {
	return concatBuilder.withOption("unsafe", expr.Bool(unsafe))
}
