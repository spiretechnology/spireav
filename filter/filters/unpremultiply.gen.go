// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// UnpremultiplyBuilder UnPreMultiply first stream with first plane of second stream.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#unpremultiply
type UnpremultiplyBuilder interface {
	filter.Filter
	// Planes set planes (from 0 to 15) (default 15).
	Planes(planes int) UnpremultiplyBuilder
	// Inplace enable inplace mode (default false).
	Inplace(inplace bool) UnpremultiplyBuilder
	// Enable expression to enable or disable the filter.
	Enable(enable expr.Expr) UnpremultiplyBuilder
}

// Unpremultiply creates a new UnpremultiplyBuilder to configure the "unpremultiply" filter.
func Unpremultiply(opts ...filter.Option) UnpremultiplyBuilder {
	return &implUnpremultiplyBuilder{
		f: filter.New("unpremultiply", 1, opts...),
	}
}

type implUnpremultiplyBuilder struct {
	f filter.Filter
}

func (unpremultiplyBuilder *implUnpremultiplyBuilder) String() string {
	return unpremultiplyBuilder.f.String()
}

func (unpremultiplyBuilder *implUnpremultiplyBuilder) Outputs() int {
	return unpremultiplyBuilder.f.Outputs()
}

func (unpremultiplyBuilder *implUnpremultiplyBuilder) With(key string, value expr.Expr) filter.Filter {
	return unpremultiplyBuilder.withOption(key, value)
}

func (unpremultiplyBuilder *implUnpremultiplyBuilder) withOption(key string, value expr.Expr) UnpremultiplyBuilder {
	bCopy := *unpremultiplyBuilder
	bCopy.f = unpremultiplyBuilder.f.With(key, value)
	return &bCopy
}

func (unpremultiplyBuilder *implUnpremultiplyBuilder) Planes(planes int) UnpremultiplyBuilder {
	return unpremultiplyBuilder.withOption("planes", expr.Int(planes))
}

func (unpremultiplyBuilder *implUnpremultiplyBuilder) Inplace(inplace bool) UnpremultiplyBuilder {
	return unpremultiplyBuilder.withOption("inplace", expr.Bool(inplace))
}

func (unpremultiplyBuilder *implUnpremultiplyBuilder) Enable(enable expr.Expr) UnpremultiplyBuilder {
	return unpremultiplyBuilder.withOption("enable", enable)
}
