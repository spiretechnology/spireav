// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// AmetadataBuilder Manipulate audio frame metadata.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#ametadata
type AmetadataBuilder interface {
	filter.Filter
	// Mode set a mode of operation (from 0 to 4) (default select).
	Mode(mode int) AmetadataBuilder
	// Key set metadata key.
	Key(key string) AmetadataBuilder
	// Value set metadata value.
	Value(value string) AmetadataBuilder
	// Function function for comparing values (from 0 to 6) (default same_str).
	Function(function int) AmetadataBuilder
	// Expr set expression for expr function.
	Expr(expression string) AmetadataBuilder
	// File set file where to print metadata information.
	File(file string) AmetadataBuilder
	// Direct reduce buffering when printing to user-set file or pipe (default false).
	Direct(direct bool) AmetadataBuilder
}

// Ametadata creates a new AmetadataBuilder to configure the "ametadata" filter.
func Ametadata(opts ...filter.Option) AmetadataBuilder {
	return &implAmetadataBuilder{
		f: filter.New("ametadata", 1, opts...),
	}
}

type implAmetadataBuilder struct {
	f filter.Filter
}

func (ametadataBuilder *implAmetadataBuilder) String() string {
	return ametadataBuilder.f.String()
}

func (ametadataBuilder *implAmetadataBuilder) Outputs() int {
	return ametadataBuilder.f.Outputs()
}

func (ametadataBuilder *implAmetadataBuilder) With(key string, value expr.Expr) filter.Filter {
	return ametadataBuilder.withOption(key, value)
}

func (ametadataBuilder *implAmetadataBuilder) withOption(key string, value expr.Expr) AmetadataBuilder {
	bCopy := *ametadataBuilder
	bCopy.f = ametadataBuilder.f.With(key, value)
	return &bCopy
}

func (ametadataBuilder *implAmetadataBuilder) Mode(mode int) AmetadataBuilder {
	return ametadataBuilder.withOption("mode", expr.Int(mode))
}

func (ametadataBuilder *implAmetadataBuilder) Key(key string) AmetadataBuilder {
	return ametadataBuilder.withOption("key", expr.String(key))
}

func (ametadataBuilder *implAmetadataBuilder) Value(value string) AmetadataBuilder {
	return ametadataBuilder.withOption("value", expr.String(value))
}

func (ametadataBuilder *implAmetadataBuilder) Function(function int) AmetadataBuilder {
	return ametadataBuilder.withOption("function", expr.Int(function))
}

func (ametadataBuilder *implAmetadataBuilder) Expr(expression string) AmetadataBuilder {
	return ametadataBuilder.withOption("expr", expr.String(expression))
}

func (ametadataBuilder *implAmetadataBuilder) File(file string) AmetadataBuilder {
	return ametadataBuilder.withOption("file", expr.String(file))
}

func (ametadataBuilder *implAmetadataBuilder) Direct(direct bool) AmetadataBuilder {
	return ametadataBuilder.withOption("direct", expr.Bool(direct))
}
