// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// DrawTextBuilder corresponds to the "drawtext" FFmpeg filter.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#drawtext
type DrawTextBuilder interface {
	filter.Filter
	// PosX sets the "x" option on the filter.
	PosX(posX expr.Expr) DrawTextBuilder
	// PosXInt sets the "x" option on the filter.
	PosXInt(posX int) DrawTextBuilder
	// PosY sets the "y" option on the filter.
	PosY(posY expr.Expr) DrawTextBuilder
	// PosYInt sets the "y" option on the filter.
	PosYInt(posY int) DrawTextBuilder
	// FontColor sets the "fontcolor" option on the filter.
	FontColor(fontColor expr.Expr) DrawTextBuilder
	// FontColorString sets the "fontcolor" option on the filter.
	FontColorString(fontColor string) DrawTextBuilder
	// FontFile sets the "fontfile" option on the filter.
	FontFile(fontFile string) DrawTextBuilder
	// FontSize sets the "fontsize" option on the filter.
	FontSize(fontSize expr.Expr) DrawTextBuilder
	// FontSizeInt sets the "fontsize" option on the filter.
	FontSizeInt(fontSize int) DrawTextBuilder
	// Text sets the "text" option on the filter.
	Text(text string) DrawTextBuilder
	// Timecode sets the "timecode" option on the filter.
	Timecode(timecode string) DrawTextBuilder
	// TimecodeRate sets the "timecode_rate" option on the filter.
	TimecodeRate(timecodeRate string) DrawTextBuilder
	// Box sets the "box" option on the filter.
	Box(box bool) DrawTextBuilder
	// BoxColor sets the "boxcolor" option on the filter.
	BoxColor(boxColor expr.Expr) DrawTextBuilder
	// BoxColorString sets the "boxcolor" option on the filter.
	BoxColorString(boxColor string) DrawTextBuilder
}

// DrawText creates a new DrawTextBuilder to configure the "drawtext" filter.
func DrawText(opts ...filter.Option) DrawTextBuilder {
	return &implDrawTextBuilder{
		f: filter.New("drawtext", 1, opts...),
	}
}

type implDrawTextBuilder struct {
	f filter.Filter
}

func (b *implDrawTextBuilder) String() string {
	return b.f.String()
}

func (b *implDrawTextBuilder) Outputs() int {
	return b.f.Outputs()
}

func (b *implDrawTextBuilder) With(key string, value expr.Expr) filter.Filter {
	return b.withOption(key, value)
}

func (b *implDrawTextBuilder) withOption(key string, value expr.Expr) DrawTextBuilder {
	bCopy := *b
	bCopy.f = b.f.With(key, value)
	return &bCopy
}

func (b *implDrawTextBuilder) PosX(posX expr.Expr) DrawTextBuilder {
	return b.withOption("x", posX)
}

func (b *implDrawTextBuilder) PosXInt(posX int) DrawTextBuilder {
	return b.withOption("x", expr.Int(posX))
}

func (b *implDrawTextBuilder) PosY(posY expr.Expr) DrawTextBuilder {
	return b.withOption("y", posY)
}

func (b *implDrawTextBuilder) PosYInt(posY int) DrawTextBuilder {
	return b.withOption("y", expr.Int(posY))
}

func (b *implDrawTextBuilder) FontColor(fontColor expr.Expr) DrawTextBuilder {
	return b.withOption("fontcolor", fontColor)
}

func (b *implDrawTextBuilder) FontColorString(fontColor string) DrawTextBuilder {
	return b.withOption("fontcolor", expr.String(fontColor))
}

func (b *implDrawTextBuilder) FontFile(fontFile string) DrawTextBuilder {
	return b.withOption("fontfile", expr.String(fontFile))
}

func (b *implDrawTextBuilder) FontSize(fontSize expr.Expr) DrawTextBuilder {
	return b.withOption("fontsize", fontSize)
}

func (b *implDrawTextBuilder) FontSizeInt(fontSize int) DrawTextBuilder {
	return b.withOption("fontsize", expr.Int(fontSize))
}

func (b *implDrawTextBuilder) Text(text string) DrawTextBuilder {
	return b.withOption("text", expr.String(text))
}

func (b *implDrawTextBuilder) Timecode(timecode string) DrawTextBuilder {
	return b.withOption("timecode", expr.String(timecode))
}

func (b *implDrawTextBuilder) TimecodeRate(timecodeRate string) DrawTextBuilder {
	return b.withOption("timecode_rate", expr.String(timecodeRate))
}

func (b *implDrawTextBuilder) Box(box bool) DrawTextBuilder {
	return b.withOption("box", expr.Bool(box))
}

func (b *implDrawTextBuilder) BoxColor(boxColor expr.Expr) DrawTextBuilder {
	return b.withOption("boxcolor", boxColor)
}

func (b *implDrawTextBuilder) BoxColorString(boxColor string) DrawTextBuilder {
	return b.withOption("boxcolor", expr.String(boxColor))
}
