// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// HaasBuilder Apply Haas Stereo Enhancer.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#haas
type HaasBuilder interface {
	filter.Filter
	// LevelIn set level in (from 0.015625 to 64) (default 1).
	LevelIn(levelIn float64) HaasBuilder
	// LevelOut set level out (from 0.015625 to 64) (default 1).
	LevelOut(levelOut float64) HaasBuilder
	// SideGain set side gain (from 0.015625 to 64) (default 1).
	SideGain(sideGain float64) HaasBuilder
	// MiddleSource set middle source (from 0 to 3) (default mid).
	MiddleSource(middleSource int) HaasBuilder
	// MiddlePhase set middle phase (default false).
	MiddlePhase(middlePhase bool) HaasBuilder
	// LeftDelay set left delay (from 0 to 40) (default 2.05).
	LeftDelay(leftDelay float64) HaasBuilder
	// LeftBalance set left balance (from -1 to 1) (default -1).
	LeftBalance(leftBalance float64) HaasBuilder
	// LeftGain set left gain (from 0.015625 to 64) (default 1).
	LeftGain(leftGain float64) HaasBuilder
	// LeftPhase set left phase (default false).
	LeftPhase(leftPhase bool) HaasBuilder
	// RightDelay set right delay (from 0 to 40) (default 2.12).
	RightDelay(rightDelay float64) HaasBuilder
	// RightBalance set right balance (from -1 to 1) (default 1).
	RightBalance(rightBalance float64) HaasBuilder
	// RightGain set right gain (from 0.015625 to 64) (default 1).
	RightGain(rightGain float64) HaasBuilder
	// RightPhase set right phase (default true).
	RightPhase(rightPhase bool) HaasBuilder
}

// Haas creates a new HaasBuilder to configure the "haas" filter.
func Haas(opts ...filter.Option) HaasBuilder {
	return &implHaasBuilder{
		f: filter.New("haas", 1, opts...),
	}
}

type implHaasBuilder struct {
	f filter.Filter
}

func (haasBuilder *implHaasBuilder) String() string {
	return haasBuilder.f.String()
}

func (haasBuilder *implHaasBuilder) Outputs() int {
	return haasBuilder.f.Outputs()
}

func (haasBuilder *implHaasBuilder) With(key string, value expr.Expr) filter.Filter {
	return haasBuilder.withOption(key, value)
}

func (haasBuilder *implHaasBuilder) withOption(key string, value expr.Expr) HaasBuilder {
	bCopy := *haasBuilder
	bCopy.f = haasBuilder.f.With(key, value)
	return &bCopy
}

func (haasBuilder *implHaasBuilder) LevelIn(levelIn float64) HaasBuilder {
	return haasBuilder.withOption("level_in", expr.Double(levelIn))
}

func (haasBuilder *implHaasBuilder) LevelOut(levelOut float64) HaasBuilder {
	return haasBuilder.withOption("level_out", expr.Double(levelOut))
}

func (haasBuilder *implHaasBuilder) SideGain(sideGain float64) HaasBuilder {
	return haasBuilder.withOption("side_gain", expr.Double(sideGain))
}

func (haasBuilder *implHaasBuilder) MiddleSource(middleSource int) HaasBuilder {
	return haasBuilder.withOption("middle_source", expr.Int(middleSource))
}

func (haasBuilder *implHaasBuilder) MiddlePhase(middlePhase bool) HaasBuilder {
	return haasBuilder.withOption("middle_phase", expr.Bool(middlePhase))
}

func (haasBuilder *implHaasBuilder) LeftDelay(leftDelay float64) HaasBuilder {
	return haasBuilder.withOption("left_delay", expr.Double(leftDelay))
}

func (haasBuilder *implHaasBuilder) LeftBalance(leftBalance float64) HaasBuilder {
	return haasBuilder.withOption("left_balance", expr.Double(leftBalance))
}

func (haasBuilder *implHaasBuilder) LeftGain(leftGain float64) HaasBuilder {
	return haasBuilder.withOption("left_gain", expr.Double(leftGain))
}

func (haasBuilder *implHaasBuilder) LeftPhase(leftPhase bool) HaasBuilder {
	return haasBuilder.withOption("left_phase", expr.Bool(leftPhase))
}

func (haasBuilder *implHaasBuilder) RightDelay(rightDelay float64) HaasBuilder {
	return haasBuilder.withOption("right_delay", expr.Double(rightDelay))
}

func (haasBuilder *implHaasBuilder) RightBalance(rightBalance float64) HaasBuilder {
	return haasBuilder.withOption("right_balance", expr.Double(rightBalance))
}

func (haasBuilder *implHaasBuilder) RightGain(rightGain float64) HaasBuilder {
	return haasBuilder.withOption("right_gain", expr.Double(rightGain))
}

func (haasBuilder *implHaasBuilder) RightPhase(rightPhase bool) HaasBuilder {
	return haasBuilder.withOption("right_phase", expr.Bool(rightPhase))
}
