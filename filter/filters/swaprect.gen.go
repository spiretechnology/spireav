// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// SwaprectBuilder Swap 2 rectangular objects in video.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#swaprect
type SwaprectBuilder interface {
	filter.Filter
	// W set rect width (default "w/2").
	W(w string) SwaprectBuilder
	// WExpr set rect width (default "w/2").
	WExpr(w expr.Expr) SwaprectBuilder
	// H set rect height (default "h/2").
	H(h string) SwaprectBuilder
	// HExpr set rect height (default "h/2").
	HExpr(h expr.Expr) SwaprectBuilder
	// X1 set 1st rect x top left coordinate (default "w/2").
	X1(x1 string) SwaprectBuilder
	// X1Expr set 1st rect x top left coordinate (default "w/2").
	X1Expr(x1 expr.Expr) SwaprectBuilder
	// Y1 set 1st rect y top left coordinate (default "h/2").
	Y1(y1 string) SwaprectBuilder
	// Y1Expr set 1st rect y top left coordinate (default "h/2").
	Y1Expr(y1 expr.Expr) SwaprectBuilder
	// X2 set 2nd rect x top left coordinate (default "0").
	X2(x2 string) SwaprectBuilder
	// X2Expr set 2nd rect x top left coordinate (default "0").
	X2Expr(x2 expr.Expr) SwaprectBuilder
	// Y2 set 2nd rect y top left coordinate (default "0").
	Y2(y2 string) SwaprectBuilder
	// Y2Expr set 2nd rect y top left coordinate (default "0").
	Y2Expr(y2 expr.Expr) SwaprectBuilder
	// Enable expression to enable or disable the filter.
	Enable(enable expr.Expr) SwaprectBuilder
}

// Swaprect creates a new SwaprectBuilder to configure the "swaprect" filter.
func Swaprect(opts ...filter.Option) SwaprectBuilder {
	return &implSwaprectBuilder{
		f: filter.New("swaprect", 1, opts...),
	}
}

type implSwaprectBuilder struct {
	f filter.Filter
}

func (swaprectBuilder *implSwaprectBuilder) String() string {
	return swaprectBuilder.f.String()
}

func (swaprectBuilder *implSwaprectBuilder) Outputs() int {
	return swaprectBuilder.f.Outputs()
}

func (swaprectBuilder *implSwaprectBuilder) With(key string, value expr.Expr) filter.Filter {
	return swaprectBuilder.withOption(key, value)
}

func (swaprectBuilder *implSwaprectBuilder) withOption(key string, value expr.Expr) SwaprectBuilder {
	bCopy := *swaprectBuilder
	bCopy.f = swaprectBuilder.f.With(key, value)
	return &bCopy
}

func (swaprectBuilder *implSwaprectBuilder) W(w string) SwaprectBuilder {
	return swaprectBuilder.withOption("w", expr.String(w))
}

func (swaprectBuilder *implSwaprectBuilder) WExpr(w expr.Expr) SwaprectBuilder {
	return swaprectBuilder.withOption("w", w)
}

func (swaprectBuilder *implSwaprectBuilder) H(h string) SwaprectBuilder {
	return swaprectBuilder.withOption("h", expr.String(h))
}

func (swaprectBuilder *implSwaprectBuilder) HExpr(h expr.Expr) SwaprectBuilder {
	return swaprectBuilder.withOption("h", h)
}

func (swaprectBuilder *implSwaprectBuilder) X1(x1 string) SwaprectBuilder {
	return swaprectBuilder.withOption("x1", expr.String(x1))
}

func (swaprectBuilder *implSwaprectBuilder) X1Expr(x1 expr.Expr) SwaprectBuilder {
	return swaprectBuilder.withOption("x1", x1)
}

func (swaprectBuilder *implSwaprectBuilder) Y1(y1 string) SwaprectBuilder {
	return swaprectBuilder.withOption("y1", expr.String(y1))
}

func (swaprectBuilder *implSwaprectBuilder) Y1Expr(y1 expr.Expr) SwaprectBuilder {
	return swaprectBuilder.withOption("y1", y1)
}

func (swaprectBuilder *implSwaprectBuilder) X2(x2 string) SwaprectBuilder {
	return swaprectBuilder.withOption("x2", expr.String(x2))
}

func (swaprectBuilder *implSwaprectBuilder) X2Expr(x2 expr.Expr) SwaprectBuilder {
	return swaprectBuilder.withOption("x2", x2)
}

func (swaprectBuilder *implSwaprectBuilder) Y2(y2 string) SwaprectBuilder {
	return swaprectBuilder.withOption("y2", expr.String(y2))
}

func (swaprectBuilder *implSwaprectBuilder) Y2Expr(y2 expr.Expr) SwaprectBuilder {
	return swaprectBuilder.withOption("y2", y2)
}

func (swaprectBuilder *implSwaprectBuilder) Enable(enable expr.Expr) SwaprectBuilder {
	return swaprectBuilder.withOption("enable", enable)
}
