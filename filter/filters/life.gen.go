// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// LifeBuilder Create life.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#life
type LifeBuilder interface {
	filter.Filter
	// Filename set source file.
	Filename(filename string) LifeBuilder
	// F set source file.
	F(f string) LifeBuilder
	// Size set video size.
	Size(size expr.Size) LifeBuilder
	// S set video size.
	S(s expr.Size) LifeBuilder
	// Rate set video rate (default "25").
	Rate(rate expr.Rational) LifeBuilder
	// R set video rate (default "25").
	R(r expr.Rational) LifeBuilder
	// Rule set rule (default "B3/S23").
	Rule(rule string) LifeBuilder
	// RandomFillRatio set fill ratio for filling initial grid randomly (from 0 to 1) (default 0.618034).
	RandomFillRatio(randomFillRatio float64) LifeBuilder
	// Ratio set fill ratio for filling initial grid randomly (from 0 to 1) (default 0.618034).
	Ratio(ratio float64) LifeBuilder
	// RandomSeed set the seed for filling the initial grid randomly (from -1 to UINT32_MAX) (default -1).
	RandomSeed(randomSeed int64) LifeBuilder
	// Seed set the seed for filling the initial grid randomly (from -1 to UINT32_MAX) (default -1).
	Seed(seed int64) LifeBuilder
	// Stitch stitch boundaries (default true).
	Stitch(stitch bool) LifeBuilder
	// Mold set mold speed for dead cells (from 0 to 255) (default 0).
	Mold(mold int) LifeBuilder
	// LifeColor set life color (default "white").
	LifeColor(lifeColor expr.Color) LifeBuilder
	// DeathColor set death color (default "black").
	DeathColor(deathColor expr.Color) LifeBuilder
	// MoldColor set mold color (default "black").
	MoldColor(moldColor expr.Color) LifeBuilder
}

// Life creates a new LifeBuilder to configure the "life" filter.
func Life(opts ...filter.Option) LifeBuilder {
	return &implLifeBuilder{
		f: filter.New("life", 1, opts...),
	}
}

type implLifeBuilder struct {
	f filter.Filter
}

func (lifeBuilder *implLifeBuilder) String() string {
	return lifeBuilder.f.String()
}

func (lifeBuilder *implLifeBuilder) Outputs() int {
	return lifeBuilder.f.Outputs()
}

func (lifeBuilder *implLifeBuilder) With(key string, value expr.Expr) filter.Filter {
	return lifeBuilder.withOption(key, value)
}

func (lifeBuilder *implLifeBuilder) withOption(key string, value expr.Expr) LifeBuilder {
	bCopy := *lifeBuilder
	bCopy.f = lifeBuilder.f.With(key, value)
	return &bCopy
}

func (lifeBuilder *implLifeBuilder) Filename(filename string) LifeBuilder {
	return lifeBuilder.withOption("filename", expr.String(filename))
}

func (lifeBuilder *implLifeBuilder) F(f string) LifeBuilder {
	return lifeBuilder.withOption("f", expr.String(f))
}

func (lifeBuilder *implLifeBuilder) Size(size expr.Size) LifeBuilder {
	return lifeBuilder.withOption("size", size)
}

func (lifeBuilder *implLifeBuilder) S(s expr.Size) LifeBuilder {
	return lifeBuilder.withOption("s", s)
}

func (lifeBuilder *implLifeBuilder) Rate(rate expr.Rational) LifeBuilder {
	return lifeBuilder.withOption("rate", rate)
}

func (lifeBuilder *implLifeBuilder) R(r expr.Rational) LifeBuilder {
	return lifeBuilder.withOption("r", r)
}

func (lifeBuilder *implLifeBuilder) Rule(rule string) LifeBuilder {
	return lifeBuilder.withOption("rule", expr.String(rule))
}

func (lifeBuilder *implLifeBuilder) RandomFillRatio(randomFillRatio float64) LifeBuilder {
	return lifeBuilder.withOption("random_fill_ratio", expr.Double(randomFillRatio))
}

func (lifeBuilder *implLifeBuilder) Ratio(ratio float64) LifeBuilder {
	return lifeBuilder.withOption("ratio", expr.Double(ratio))
}

func (lifeBuilder *implLifeBuilder) RandomSeed(randomSeed int64) LifeBuilder {
	return lifeBuilder.withOption("random_seed", expr.Int64(randomSeed))
}

func (lifeBuilder *implLifeBuilder) Seed(seed int64) LifeBuilder {
	return lifeBuilder.withOption("seed", expr.Int64(seed))
}

func (lifeBuilder *implLifeBuilder) Stitch(stitch bool) LifeBuilder {
	return lifeBuilder.withOption("stitch", expr.Bool(stitch))
}

func (lifeBuilder *implLifeBuilder) Mold(mold int) LifeBuilder {
	return lifeBuilder.withOption("mold", expr.Int(mold))
}

func (lifeBuilder *implLifeBuilder) LifeColor(lifeColor expr.Color) LifeBuilder {
	return lifeBuilder.withOption("life_color", lifeColor)
}

func (lifeBuilder *implLifeBuilder) DeathColor(deathColor expr.Color) LifeBuilder {
	return lifeBuilder.withOption("death_color", deathColor)
}

func (lifeBuilder *implLifeBuilder) MoldColor(moldColor expr.Color) LifeBuilder {
	return lifeBuilder.withOption("mold_color", moldColor)
}
