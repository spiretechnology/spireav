// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// SabBuilder Apply shape adaptive blur.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#sab
type SabBuilder interface {
	filter.Filter
	// LumaRadius set luma radius (from 0.1 to 4) (default 1).
	LumaRadius(lumaRadius float32) SabBuilder
	// Lr set luma radius (from 0.1 to 4) (default 1).
	Lr(lr float32) SabBuilder
	// LumaPreFilterRadius set luma pre-filter radius (from 0.1 to 2) (default 1).
	LumaPreFilterRadius(lumaPreFilterRadius float32) SabBuilder
	// Lpfr set luma pre-filter radius (from 0.1 to 2) (default 1).
	Lpfr(lpfr float32) SabBuilder
	// LumaStrength set luma strength (from 0.1 to 100) (default 1).
	LumaStrength(lumaStrength float32) SabBuilder
	// Ls set luma strength (from 0.1 to 100) (default 1).
	Ls(ls float32) SabBuilder
	// ChromaRadius set chroma radius (from -0.9 to 4) (default -0.9).
	ChromaRadius(chromaRadius float32) SabBuilder
	// Cr set chroma radius (from -0.9 to 4) (default -0.9).
	Cr(cr float32) SabBuilder
	// ChromaPreFilterRadius set chroma pre-filter radius (from -0.9 to 2) (default -0.9).
	ChromaPreFilterRadius(chromaPreFilterRadius float32) SabBuilder
	// Cpfr set chroma pre-filter radius (from -0.9 to 2) (default -0.9).
	Cpfr(cpfr float32) SabBuilder
	// ChromaStrength set chroma strength (from -0.9 to 100) (default -0.9).
	ChromaStrength(chromaStrength float32) SabBuilder
	// Cs set chroma strength (from -0.9 to 100) (default -0.9).
	Cs(cs float32) SabBuilder
	// Enable expression to enable or disable the filter.
	Enable(enable expr.Expr) SabBuilder
}

// Sab creates a new SabBuilder to configure the "sab" filter.
func Sab(opts ...filter.Option) SabBuilder {
	return &implSabBuilder{
		f: filter.New("sab", 1, opts...),
	}
}

type implSabBuilder struct {
	f filter.Filter
}

func (sabBuilder *implSabBuilder) String() string {
	return sabBuilder.f.String()
}

func (sabBuilder *implSabBuilder) Outputs() int {
	return sabBuilder.f.Outputs()
}

func (sabBuilder *implSabBuilder) With(key string, value expr.Expr) filter.Filter {
	return sabBuilder.withOption(key, value)
}

func (sabBuilder *implSabBuilder) withOption(key string, value expr.Expr) SabBuilder {
	bCopy := *sabBuilder
	bCopy.f = sabBuilder.f.With(key, value)
	return &bCopy
}

func (sabBuilder *implSabBuilder) LumaRadius(lumaRadius float32) SabBuilder {
	return sabBuilder.withOption("luma_radius", expr.Float(lumaRadius))
}

func (sabBuilder *implSabBuilder) Lr(lr float32) SabBuilder {
	return sabBuilder.withOption("lr", expr.Float(lr))
}

func (sabBuilder *implSabBuilder) LumaPreFilterRadius(lumaPreFilterRadius float32) SabBuilder {
	return sabBuilder.withOption("luma_pre_filter_radius", expr.Float(lumaPreFilterRadius))
}

func (sabBuilder *implSabBuilder) Lpfr(lpfr float32) SabBuilder {
	return sabBuilder.withOption("lpfr", expr.Float(lpfr))
}

func (sabBuilder *implSabBuilder) LumaStrength(lumaStrength float32) SabBuilder {
	return sabBuilder.withOption("luma_strength", expr.Float(lumaStrength))
}

func (sabBuilder *implSabBuilder) Ls(ls float32) SabBuilder {
	return sabBuilder.withOption("ls", expr.Float(ls))
}

func (sabBuilder *implSabBuilder) ChromaRadius(chromaRadius float32) SabBuilder {
	return sabBuilder.withOption("chroma_radius", expr.Float(chromaRadius))
}

func (sabBuilder *implSabBuilder) Cr(cr float32) SabBuilder {
	return sabBuilder.withOption("cr", expr.Float(cr))
}

func (sabBuilder *implSabBuilder) ChromaPreFilterRadius(chromaPreFilterRadius float32) SabBuilder {
	return sabBuilder.withOption("chroma_pre_filter_radius", expr.Float(chromaPreFilterRadius))
}

func (sabBuilder *implSabBuilder) Cpfr(cpfr float32) SabBuilder {
	return sabBuilder.withOption("cpfr", expr.Float(cpfr))
}

func (sabBuilder *implSabBuilder) ChromaStrength(chromaStrength float32) SabBuilder {
	return sabBuilder.withOption("chroma_strength", expr.Float(chromaStrength))
}

func (sabBuilder *implSabBuilder) Cs(cs float32) SabBuilder {
	return sabBuilder.withOption("cs", expr.Float(cs))
}

func (sabBuilder *implSabBuilder) Enable(enable expr.Expr) SabBuilder {
	return sabBuilder.withOption("enable", enable)
}
