// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// YUVTestSourceBuilder corresponds to the "yuvtestsrc" FFmpeg filter.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#yuvtestsrc
type YUVTestSourceBuilder interface {
	filter.Filter
	// Size sets the "s" option on the filter.
	Size(width, height int) YUVTestSourceBuilder
	// FrameRate sets the "r" option on the filter.
	FrameRate(frameRate expr.Expr) YUVTestSourceBuilder
	// Duration sets the "d" option on the filter.
	Duration(duration string) YUVTestSourceBuilder
}

// YUVTestSource creates a new YUVTestSourceBuilder to configure the "yuvtestsrc" filter.
func YUVTestSource(opts ...filter.Option) YUVTestSourceBuilder {
	return &implYUVTestSourceBuilder{
		f: filter.New("yuvtestsrc", 1, opts...),
	}
}

type implYUVTestSourceBuilder struct {
	f filter.Filter
}

func (b *implYUVTestSourceBuilder) String() string {
	return b.f.String()
}

func (b *implYUVTestSourceBuilder) Outputs() int {
	return b.f.Outputs()
}

func (b *implYUVTestSourceBuilder) With(key string, value expr.Expr) filter.Filter {
	return b.withOption(key, value)
}

func (b *implYUVTestSourceBuilder) withOption(key string, value expr.Expr) YUVTestSourceBuilder {
	bCopy := *b
	bCopy.f = b.f.With(key, value)
	return &bCopy
}

func (b *implYUVTestSourceBuilder) Size(width, height int) YUVTestSourceBuilder {
	return b.withOption("s", expr.Size(width, height))
}

func (b *implYUVTestSourceBuilder) FrameRate(frameRate expr.Expr) YUVTestSourceBuilder {
	return b.withOption("r", frameRate)
}

func (b *implYUVTestSourceBuilder) Duration(duration string) YUVTestSourceBuilder {
	return b.withOption("d", expr.String(duration))
}
