// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// DelogoBuilder Remove logo from input video.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#delogo
type DelogoBuilder interface {
	filter.Filter
	// X set logo x position (default "-1").
	X(x string) DelogoBuilder
	// Y set logo y position (default "-1").
	Y(y string) DelogoBuilder
	// W set logo width (default "-1").
	W(w string) DelogoBuilder
	// H set logo height (default "-1").
	H(h string) DelogoBuilder
	// Show show delogo area (default false).
	Show(show bool) DelogoBuilder
	// Enable expression to enable or disable the filter.
	Enable(enable expr.Expr) DelogoBuilder
}

// Delogo creates a new DelogoBuilder to configure the "delogo" filter.
func Delogo(opts ...filter.Option) DelogoBuilder {
	return &implDelogoBuilder{
		f: filter.New("delogo", 1, opts...),
	}
}

type implDelogoBuilder struct {
	f filter.Filter
}

func (delogoBuilder *implDelogoBuilder) String() string {
	return delogoBuilder.f.String()
}

func (delogoBuilder *implDelogoBuilder) Outputs() int {
	return delogoBuilder.f.Outputs()
}

func (delogoBuilder *implDelogoBuilder) With(key string, value expr.Expr) filter.Filter {
	return delogoBuilder.withOption(key, value)
}

func (delogoBuilder *implDelogoBuilder) withOption(key string, value expr.Expr) DelogoBuilder {
	bCopy := *delogoBuilder
	bCopy.f = delogoBuilder.f.With(key, value)
	return &bCopy
}

func (delogoBuilder *implDelogoBuilder) X(x string) DelogoBuilder {
	return delogoBuilder.withOption("x", expr.String(x))
}

func (delogoBuilder *implDelogoBuilder) Y(y string) DelogoBuilder {
	return delogoBuilder.withOption("y", expr.String(y))
}

func (delogoBuilder *implDelogoBuilder) W(w string) DelogoBuilder {
	return delogoBuilder.withOption("w", expr.String(w))
}

func (delogoBuilder *implDelogoBuilder) H(h string) DelogoBuilder {
	return delogoBuilder.withOption("h", expr.String(h))
}

func (delogoBuilder *implDelogoBuilder) Show(show bool) DelogoBuilder {
	return delogoBuilder.withOption("show", expr.Bool(show))
}

func (delogoBuilder *implDelogoBuilder) Enable(enable expr.Expr) DelogoBuilder {
	return delogoBuilder.withOption("enable", enable)
}
