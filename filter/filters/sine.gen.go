// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// SineSourceBuilder corresponds to the "sine" FFmpeg filter.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#sine
type SineSourceBuilder interface {
	filter.Filter
	// Duration sets the "d" option on the filter.
	Duration(duration string) SineSourceBuilder
	// Frequency sets the "f" option on the filter.
	Frequency(frequency expr.Expr) SineSourceBuilder
	// FrequencyInt sets the "f" option on the filter.
	FrequencyInt(frequency int) SineSourceBuilder
}

// SineSource creates a new SineSourceBuilder to configure the "sine" filter.
func SineSource(opts ...filter.Option) SineSourceBuilder {
	return &implSineSourceBuilder{
		f: filter.New("sine", 1, opts...),
	}
}

type implSineSourceBuilder struct {
	f filter.Filter
}

func (b *implSineSourceBuilder) String() string {
	return b.f.String()
}

func (b *implSineSourceBuilder) Outputs() int {
	return b.f.Outputs()
}

func (b *implSineSourceBuilder) With(key string, value expr.Expr) filter.Filter {
	return b.withOption(key, value)
}

func (b *implSineSourceBuilder) withOption(key string, value expr.Expr) SineSourceBuilder {
	bCopy := *b
	bCopy.f = b.f.With(key, value)
	return &bCopy
}

func (b *implSineSourceBuilder) Duration(duration string) SineSourceBuilder {
	return b.withOption("d", expr.String(duration))
}

func (b *implSineSourceBuilder) Frequency(frequency expr.Expr) SineSourceBuilder {
	return b.withOption("f", frequency)
}

func (b *implSineSourceBuilder) FrequencyInt(frequency int) SineSourceBuilder {
	return b.withOption("f", expr.Int(frequency))
}
