// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// AsetrateBuilder Change the sample rate without altering the data.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#asetrate
type AsetrateBuilder interface {
	filter.Filter
	// SampleRate set the sample rate (from 1 to INT_MAX) (default 44100).
	SampleRate(sampleRate int) AsetrateBuilder
	// R set the sample rate (from 1 to INT_MAX) (default 44100).
	R(r int) AsetrateBuilder
}

// Asetrate creates a new AsetrateBuilder to configure the "asetrate" filter.
func Asetrate(opts ...filter.Option) AsetrateBuilder {
	return &implAsetrateBuilder{
		f: filter.New("asetrate", 1, opts...),
	}
}

type implAsetrateBuilder struct {
	f filter.Filter
}

func (asetrateBuilder *implAsetrateBuilder) String() string {
	return asetrateBuilder.f.String()
}

func (asetrateBuilder *implAsetrateBuilder) Outputs() int {
	return asetrateBuilder.f.Outputs()
}

func (asetrateBuilder *implAsetrateBuilder) With(key string, value expr.Expr) filter.Filter {
	return asetrateBuilder.withOption(key, value)
}

func (asetrateBuilder *implAsetrateBuilder) withOption(key string, value expr.Expr) AsetrateBuilder {
	bCopy := *asetrateBuilder
	bCopy.f = asetrateBuilder.f.With(key, value)
	return &bCopy
}

func (asetrateBuilder *implAsetrateBuilder) SampleRate(sampleRate int) AsetrateBuilder {
	return asetrateBuilder.withOption("sample_rate", expr.Int(sampleRate))
}

func (asetrateBuilder *implAsetrateBuilder) R(r int) AsetrateBuilder {
	return asetrateBuilder.withOption("r", expr.Int(r))
}
