// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// CodecviewBuilder Visualize information about some codecs.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#codecview
type CodecviewBuilder interface {
	filter.Filter
	// Mv set motion vectors to visualize (default 0).
	Mv(mv string) CodecviewBuilder
	// Qp (default false).
	Qp(qp bool) CodecviewBuilder
	// MvType set motion vectors type (default 0).
	MvType(mvType string) CodecviewBuilder
	// Mvt set motion vectors type (default 0).
	Mvt(mvt string) CodecviewBuilder
	// FrameType set frame types to visualize motion vectors of (default 0).
	FrameType(frameType string) CodecviewBuilder
	// Ft set frame types to visualize motion vectors of (default 0).
	Ft(ft string) CodecviewBuilder
	// Block set block partitioning structure to visualize (default false).
	Block(block bool) CodecviewBuilder
}

// Codecview creates a new CodecviewBuilder to configure the "codecview" filter.
func Codecview(opts ...filter.Option) CodecviewBuilder {
	return &implCodecviewBuilder{
		f: filter.New("codecview", 1, opts...),
	}
}

type implCodecviewBuilder struct {
	f filter.Filter
}

func (codecviewBuilder *implCodecviewBuilder) String() string {
	return codecviewBuilder.f.String()
}

func (codecviewBuilder *implCodecviewBuilder) Outputs() int {
	return codecviewBuilder.f.Outputs()
}

func (codecviewBuilder *implCodecviewBuilder) With(key string, value expr.Expr) filter.Filter {
	return codecviewBuilder.withOption(key, value)
}

func (codecviewBuilder *implCodecviewBuilder) withOption(key string, value expr.Expr) CodecviewBuilder {
	bCopy := *codecviewBuilder
	bCopy.f = codecviewBuilder.f.With(key, value)
	return &bCopy
}

func (codecviewBuilder *implCodecviewBuilder) Mv(mv string) CodecviewBuilder {
	return codecviewBuilder.withOption("mv", expr.String(mv))
}

func (codecviewBuilder *implCodecviewBuilder) Qp(qp bool) CodecviewBuilder {
	return codecviewBuilder.withOption("qp", expr.Bool(qp))
}

func (codecviewBuilder *implCodecviewBuilder) MvType(mvType string) CodecviewBuilder {
	return codecviewBuilder.withOption("mv_type", expr.String(mvType))
}

func (codecviewBuilder *implCodecviewBuilder) Mvt(mvt string) CodecviewBuilder {
	return codecviewBuilder.withOption("mvt", expr.String(mvt))
}

func (codecviewBuilder *implCodecviewBuilder) FrameType(frameType string) CodecviewBuilder {
	return codecviewBuilder.withOption("frame_type", expr.String(frameType))
}

func (codecviewBuilder *implCodecviewBuilder) Ft(ft string) CodecviewBuilder {
	return codecviewBuilder.withOption("ft", expr.String(ft))
}

func (codecviewBuilder *implCodecviewBuilder) Block(block bool) CodecviewBuilder {
	return codecviewBuilder.withOption("block", expr.Bool(block))
}
