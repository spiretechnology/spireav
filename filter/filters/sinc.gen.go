// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// SincBuilder Generate a sinc kaiser-windowed low-pass, high-pass, band-pass, or band-reject FIR coefficients.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#sinc
type SincBuilder interface {
	filter.Filter
	// SampleRate set sample rate (from 1 to INT_MAX) (default 44100).
	SampleRate(sampleRate int) SincBuilder
	// R set sample rate (from 1 to INT_MAX) (default 44100).
	R(r int) SincBuilder
	// NbSamples set the number of samples per requested frame (from 1 to INT_MAX) (default 1024).
	NbSamples(nbSamples int) SincBuilder
	// N set the number of samples per requested frame (from 1 to INT_MAX) (default 1024).
	N(n int) SincBuilder
	// Hp set high-pass filter frequency (from 0 to INT_MAX) (default 0).
	Hp(hp float32) SincBuilder
	// Lp set low-pass filter frequency (from 0 to INT_MAX) (default 0).
	Lp(lp float32) SincBuilder
	// Phase set filter phase response (from 0 to 100) (default 50).
	Phase(phase float32) SincBuilder
	// Beta set kaiser window beta (from -1 to 256) (default -1).
	Beta(beta float32) SincBuilder
	// Att set stop-band attenuation (from 40 to 180) (default 120).
	Att(att float32) SincBuilder
	// Round enable rounding (default false).
	Round(round bool) SincBuilder
	// Hptaps set number of taps for high-pass filter (from 0 to 32768) (default 0).
	Hptaps(hptaps int) SincBuilder
	// Lptaps set number of taps for low-pass filter (from 0 to 32768) (default 0).
	Lptaps(lptaps int) SincBuilder
}

// Sinc creates a new SincBuilder to configure the "sinc" filter.
func Sinc(opts ...filter.Option) SincBuilder {
	return &implSincBuilder{
		f: filter.New("sinc", 1, opts...),
	}
}

type implSincBuilder struct {
	f filter.Filter
}

func (sincBuilder *implSincBuilder) String() string {
	return sincBuilder.f.String()
}

func (sincBuilder *implSincBuilder) Outputs() int {
	return sincBuilder.f.Outputs()
}

func (sincBuilder *implSincBuilder) With(key string, value expr.Expr) filter.Filter {
	return sincBuilder.withOption(key, value)
}

func (sincBuilder *implSincBuilder) withOption(key string, value expr.Expr) SincBuilder {
	bCopy := *sincBuilder
	bCopy.f = sincBuilder.f.With(key, value)
	return &bCopy
}

func (sincBuilder *implSincBuilder) SampleRate(sampleRate int) SincBuilder {
	return sincBuilder.withOption("sample_rate", expr.Int(sampleRate))
}

func (sincBuilder *implSincBuilder) R(r int) SincBuilder {
	return sincBuilder.withOption("r", expr.Int(r))
}

func (sincBuilder *implSincBuilder) NbSamples(nbSamples int) SincBuilder {
	return sincBuilder.withOption("nb_samples", expr.Int(nbSamples))
}

func (sincBuilder *implSincBuilder) N(n int) SincBuilder {
	return sincBuilder.withOption("n", expr.Int(n))
}

func (sincBuilder *implSincBuilder) Hp(hp float32) SincBuilder {
	return sincBuilder.withOption("hp", expr.Float(hp))
}

func (sincBuilder *implSincBuilder) Lp(lp float32) SincBuilder {
	return sincBuilder.withOption("lp", expr.Float(lp))
}

func (sincBuilder *implSincBuilder) Phase(phase float32) SincBuilder {
	return sincBuilder.withOption("phase", expr.Float(phase))
}

func (sincBuilder *implSincBuilder) Beta(beta float32) SincBuilder {
	return sincBuilder.withOption("beta", expr.Float(beta))
}

func (sincBuilder *implSincBuilder) Att(att float32) SincBuilder {
	return sincBuilder.withOption("att", expr.Float(att))
}

func (sincBuilder *implSincBuilder) Round(round bool) SincBuilder {
	return sincBuilder.withOption("round", expr.Bool(round))
}

func (sincBuilder *implSincBuilder) Hptaps(hptaps int) SincBuilder {
	return sincBuilder.withOption("hptaps", expr.Int(hptaps))
}

func (sincBuilder *implSincBuilder) Lptaps(lptaps int) SincBuilder {
	return sincBuilder.withOption("lptaps", expr.Int(lptaps))
}
