// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// MaskedmergeBuilder Merge first stream with second stream using third stream as mask.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#maskedmerge
type MaskedmergeBuilder interface {
	filter.Filter
	// Planes set planes (from 0 to 15) (default 15).
	Planes(planes int) MaskedmergeBuilder
	// PlanesExpr set planes (from 0 to 15) (default 15).
	PlanesExpr(planes expr.Expr) MaskedmergeBuilder
	// Enable expression to enable or disable the filter.
	Enable(enable expr.Expr) MaskedmergeBuilder
}

// Maskedmerge creates a new MaskedmergeBuilder to configure the "maskedmerge" filter.
func Maskedmerge(opts ...filter.Option) MaskedmergeBuilder {
	return &implMaskedmergeBuilder{
		f: filter.New("maskedmerge", 1, opts...),
	}
}

type implMaskedmergeBuilder struct {
	f filter.Filter
}

func (maskedmergeBuilder *implMaskedmergeBuilder) String() string {
	return maskedmergeBuilder.f.String()
}

func (maskedmergeBuilder *implMaskedmergeBuilder) Outputs() int {
	return maskedmergeBuilder.f.Outputs()
}

func (maskedmergeBuilder *implMaskedmergeBuilder) With(key string, value expr.Expr) filter.Filter {
	return maskedmergeBuilder.withOption(key, value)
}

func (maskedmergeBuilder *implMaskedmergeBuilder) withOption(key string, value expr.Expr) MaskedmergeBuilder {
	bCopy := *maskedmergeBuilder
	bCopy.f = maskedmergeBuilder.f.With(key, value)
	return &bCopy
}

func (maskedmergeBuilder *implMaskedmergeBuilder) Planes(planes int) MaskedmergeBuilder {
	return maskedmergeBuilder.withOption("planes", expr.Int(planes))
}

func (maskedmergeBuilder *implMaskedmergeBuilder) PlanesExpr(planes expr.Expr) MaskedmergeBuilder {
	return maskedmergeBuilder.withOption("planes", planes)
}

func (maskedmergeBuilder *implMaskedmergeBuilder) Enable(enable expr.Expr) MaskedmergeBuilder {
	return maskedmergeBuilder.withOption("enable", enable)
}
