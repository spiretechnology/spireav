// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// AspectralstatsBuilder Show frequency domain statistics about audio frames.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#aspectralstats
type AspectralstatsBuilder interface {
	filter.Filter
	// WinSize set the window size (from 32 to 65536) (default 2048).
	WinSize(winSize int) AspectralstatsBuilder
	// WinFunc set window function (from 0 to 20) (default hann).
	WinFunc(winFunc int) AspectralstatsBuilder
	// Overlap set window overlap (from 0 to 1) (default 0.5).
	Overlap(overlap float32) AspectralstatsBuilder
	// Measure select the parameters which are measured (default all+mean+variance+centroid+spread+skewness+kurtosis+entropy+flatness+crest+flux+slope+decrease+rolloff).
	Measure(measure string) AspectralstatsBuilder
}

// Aspectralstats creates a new AspectralstatsBuilder to configure the "aspectralstats" filter.
func Aspectralstats(opts ...filter.Option) AspectralstatsBuilder {
	return &implAspectralstatsBuilder{
		f: filter.New("aspectralstats", 1, opts...),
	}
}

type implAspectralstatsBuilder struct {
	f filter.Filter
}

func (aspectralstatsBuilder *implAspectralstatsBuilder) String() string {
	return aspectralstatsBuilder.f.String()
}

func (aspectralstatsBuilder *implAspectralstatsBuilder) Outputs() int {
	return aspectralstatsBuilder.f.Outputs()
}

func (aspectralstatsBuilder *implAspectralstatsBuilder) With(key string, value expr.Expr) filter.Filter {
	return aspectralstatsBuilder.withOption(key, value)
}

func (aspectralstatsBuilder *implAspectralstatsBuilder) withOption(key string, value expr.Expr) AspectralstatsBuilder {
	bCopy := *aspectralstatsBuilder
	bCopy.f = aspectralstatsBuilder.f.With(key, value)
	return &bCopy
}

func (aspectralstatsBuilder *implAspectralstatsBuilder) WinSize(winSize int) AspectralstatsBuilder {
	return aspectralstatsBuilder.withOption("win_size", expr.Int(winSize))
}

func (aspectralstatsBuilder *implAspectralstatsBuilder) WinFunc(winFunc int) AspectralstatsBuilder {
	return aspectralstatsBuilder.withOption("win_func", expr.Int(winFunc))
}

func (aspectralstatsBuilder *implAspectralstatsBuilder) Overlap(overlap float32) AspectralstatsBuilder {
	return aspectralstatsBuilder.withOption("overlap", expr.Float(overlap))
}

func (aspectralstatsBuilder *implAspectralstatsBuilder) Measure(measure string) AspectralstatsBuilder {
	return aspectralstatsBuilder.withOption("measure", expr.String(measure))
}
