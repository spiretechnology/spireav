// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// TmixBuilder Mix successive video frames.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#tmix
type TmixBuilder interface {
	filter.Filter
	// Frames set number of successive frames to mix (from 1 to 1024) (default 3).
	Frames(frames int) TmixBuilder
	// Weights set weight for each frame (default "1 1 1").
	Weights(weights string) TmixBuilder
	// WeightsExpr set weight for each frame (default "1 1 1").
	WeightsExpr(weights expr.Expr) TmixBuilder
	// Scale set scale (from 0 to 32767) (default 0).
	Scale(scale float32) TmixBuilder
	// ScaleExpr set scale (from 0 to 32767) (default 0).
	ScaleExpr(scale expr.Expr) TmixBuilder
	// Planes set what planes to filter (default F).
	Planes(planes string) TmixBuilder
	// PlanesExpr set what planes to filter (default F).
	PlanesExpr(planes expr.Expr) TmixBuilder
}

// Tmix creates a new TmixBuilder to configure the "tmix" filter.
func Tmix(opts ...filter.Option) TmixBuilder {
	return &implTmixBuilder{
		f: filter.New("tmix", 1, opts...),
	}
}

type implTmixBuilder struct {
	f filter.Filter
}

func (tmixBuilder *implTmixBuilder) String() string {
	return tmixBuilder.f.String()
}

func (tmixBuilder *implTmixBuilder) Outputs() int {
	return tmixBuilder.f.Outputs()
}

func (tmixBuilder *implTmixBuilder) With(key string, value expr.Expr) filter.Filter {
	return tmixBuilder.withOption(key, value)
}

func (tmixBuilder *implTmixBuilder) withOption(key string, value expr.Expr) TmixBuilder {
	bCopy := *tmixBuilder
	bCopy.f = tmixBuilder.f.With(key, value)
	return &bCopy
}

func (tmixBuilder *implTmixBuilder) Frames(frames int) TmixBuilder {
	return tmixBuilder.withOption("frames", expr.Int(frames))
}

func (tmixBuilder *implTmixBuilder) Weights(weights string) TmixBuilder {
	return tmixBuilder.withOption("weights", expr.String(weights))
}

func (tmixBuilder *implTmixBuilder) WeightsExpr(weights expr.Expr) TmixBuilder {
	return tmixBuilder.withOption("weights", weights)
}

func (tmixBuilder *implTmixBuilder) Scale(scale float32) TmixBuilder {
	return tmixBuilder.withOption("scale", expr.Float(scale))
}

func (tmixBuilder *implTmixBuilder) ScaleExpr(scale expr.Expr) TmixBuilder {
	return tmixBuilder.withOption("scale", scale)
}

func (tmixBuilder *implTmixBuilder) Planes(planes string) TmixBuilder {
	return tmixBuilder.withOption("planes", expr.String(planes))
}

func (tmixBuilder *implTmixBuilder) PlanesExpr(planes expr.Expr) TmixBuilder {
	return tmixBuilder.withOption("planes", planes)
}
