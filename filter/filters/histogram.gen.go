// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// HistogramBuilder Compute and draw a histogram.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#histogram
type HistogramBuilder interface {
	filter.Filter
	// LevelHeight set level height (from 50 to 2048) (default 200).
	LevelHeight(levelHeight int) HistogramBuilder
	// ScaleHeight set scale height (from 0 to 40) (default 12).
	ScaleHeight(scaleHeight int) HistogramBuilder
	// DisplayMode set display mode (from 0 to 2) (default stack).
	DisplayMode(displayMode int) HistogramBuilder
	// D set display mode (from 0 to 2) (default stack).
	D(d int) HistogramBuilder
	// LevelsMode set levels mode (from 0 to 1) (default linear).
	LevelsMode(levelsMode int) HistogramBuilder
	// M set levels mode (from 0 to 1) (default linear).
	M(m int) HistogramBuilder
	// Components set color components to display (from 1 to 15) (default 7).
	Components(components int) HistogramBuilder
	// C set color components to display (from 1 to 15) (default 7).
	C(c int) HistogramBuilder
	// Fgopacity set foreground opacity (from 0 to 1) (default 0.7).
	Fgopacity(fgopacity float32) HistogramBuilder
	// F set foreground opacity (from 0 to 1) (default 0.7).
	F(f float32) HistogramBuilder
	// Bgopacity set background opacity (from 0 to 1) (default 0.5).
	Bgopacity(bgopacity float32) HistogramBuilder
	// B set background opacity (from 0 to 1) (default 0.5).
	B(b float32) HistogramBuilder
	// ColorsMode set colors mode (from 0 to 9) (default whiteonblack).
	ColorsMode(colorsMode int) HistogramBuilder
	// L set colors mode (from 0 to 9) (default whiteonblack).
	L(l int) HistogramBuilder
}

// Histogram creates a new HistogramBuilder to configure the "histogram" filter.
func Histogram(opts ...filter.Option) HistogramBuilder {
	return &implHistogramBuilder{
		f: filter.New("histogram", 1, opts...),
	}
}

type implHistogramBuilder struct {
	f filter.Filter
}

func (histogramBuilder *implHistogramBuilder) String() string {
	return histogramBuilder.f.String()
}

func (histogramBuilder *implHistogramBuilder) Outputs() int {
	return histogramBuilder.f.Outputs()
}

func (histogramBuilder *implHistogramBuilder) With(key string, value expr.Expr) filter.Filter {
	return histogramBuilder.withOption(key, value)
}

func (histogramBuilder *implHistogramBuilder) withOption(key string, value expr.Expr) HistogramBuilder {
	bCopy := *histogramBuilder
	bCopy.f = histogramBuilder.f.With(key, value)
	return &bCopy
}

func (histogramBuilder *implHistogramBuilder) LevelHeight(levelHeight int) HistogramBuilder {
	return histogramBuilder.withOption("level_height", expr.Int(levelHeight))
}

func (histogramBuilder *implHistogramBuilder) ScaleHeight(scaleHeight int) HistogramBuilder {
	return histogramBuilder.withOption("scale_height", expr.Int(scaleHeight))
}

func (histogramBuilder *implHistogramBuilder) DisplayMode(displayMode int) HistogramBuilder {
	return histogramBuilder.withOption("display_mode", expr.Int(displayMode))
}

func (histogramBuilder *implHistogramBuilder) D(d int) HistogramBuilder {
	return histogramBuilder.withOption("d", expr.Int(d))
}

func (histogramBuilder *implHistogramBuilder) LevelsMode(levelsMode int) HistogramBuilder {
	return histogramBuilder.withOption("levels_mode", expr.Int(levelsMode))
}

func (histogramBuilder *implHistogramBuilder) M(m int) HistogramBuilder {
	return histogramBuilder.withOption("m", expr.Int(m))
}

func (histogramBuilder *implHistogramBuilder) Components(components int) HistogramBuilder {
	return histogramBuilder.withOption("components", expr.Int(components))
}

func (histogramBuilder *implHistogramBuilder) C(c int) HistogramBuilder {
	return histogramBuilder.withOption("c", expr.Int(c))
}

func (histogramBuilder *implHistogramBuilder) Fgopacity(fgopacity float32) HistogramBuilder {
	return histogramBuilder.withOption("fgopacity", expr.Float(fgopacity))
}

func (histogramBuilder *implHistogramBuilder) F(f float32) HistogramBuilder {
	return histogramBuilder.withOption("f", expr.Float(f))
}

func (histogramBuilder *implHistogramBuilder) Bgopacity(bgopacity float32) HistogramBuilder {
	return histogramBuilder.withOption("bgopacity", expr.Float(bgopacity))
}

func (histogramBuilder *implHistogramBuilder) B(b float32) HistogramBuilder {
	return histogramBuilder.withOption("b", expr.Float(b))
}

func (histogramBuilder *implHistogramBuilder) ColorsMode(colorsMode int) HistogramBuilder {
	return histogramBuilder.withOption("colors_mode", expr.Int(colorsMode))
}

func (histogramBuilder *implHistogramBuilder) L(l int) HistogramBuilder {
	return histogramBuilder.withOption("l", expr.Int(l))
}
