// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// HighpassBuilder Apply a high-pass filter with 3dB point frequency.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#highpass
type HighpassBuilder interface {
	filter.Filter
	// Frequency set frequency (from 0 to 999999) (default 3000).
	Frequency(frequency float64) HighpassBuilder
	// FrequencyExpr set frequency (from 0 to 999999) (default 3000).
	FrequencyExpr(frequency expr.Expr) HighpassBuilder
	// F set frequency (from 0 to 999999) (default 3000).
	F(f float64) HighpassBuilder
	// FExpr set frequency (from 0 to 999999) (default 3000).
	FExpr(f expr.Expr) HighpassBuilder
	// WidthType set filter-width type (from 1 to 5) (default q).
	WidthType(widthType int) HighpassBuilder
	// WidthTypeExpr set filter-width type (from 1 to 5) (default q).
	WidthTypeExpr(widthType expr.Expr) HighpassBuilder
	// T set filter-width type (from 1 to 5) (default q).
	T(t int) HighpassBuilder
	// TExpr set filter-width type (from 1 to 5) (default q).
	TExpr(t expr.Expr) HighpassBuilder
	// Width set width (from 0 to 99999) (default 0.707).
	Width(width float64) HighpassBuilder
	// WidthExpr set width (from 0 to 99999) (default 0.707).
	WidthExpr(width expr.Expr) HighpassBuilder
	// W set width (from 0 to 99999) (default 0.707).
	W(w float64) HighpassBuilder
	// WExpr set width (from 0 to 99999) (default 0.707).
	WExpr(w expr.Expr) HighpassBuilder
	// Poles set number of poles (from 1 to 2) (default 2).
	Poles(poles int) HighpassBuilder
	// P set number of poles (from 1 to 2) (default 2).
	P(p int) HighpassBuilder
	// Mix set mix (from 0 to 1) (default 1).
	Mix(mix float64) HighpassBuilder
	// MixExpr set mix (from 0 to 1) (default 1).
	MixExpr(mix expr.Expr) HighpassBuilder
	// M set mix (from 0 to 1) (default 1).
	M(m float64) HighpassBuilder
	// MExpr set mix (from 0 to 1) (default 1).
	MExpr(m expr.Expr) HighpassBuilder
	// Channels set channels to filter (default "all").
	Channels(channels string) HighpassBuilder
	// ChannelsExpr set channels to filter (default "all").
	ChannelsExpr(channels expr.Expr) HighpassBuilder
	// C set channels to filter (default "all").
	C(c string) HighpassBuilder
	// CExpr set channels to filter (default "all").
	CExpr(c expr.Expr) HighpassBuilder
	// Normalize normalize coefficients (default false).
	Normalize(normalize bool) HighpassBuilder
	// NormalizeExpr normalize coefficients (default false).
	NormalizeExpr(normalize expr.Expr) HighpassBuilder
	// N normalize coefficients (default false).
	N(n bool) HighpassBuilder
	// NExpr normalize coefficients (default false).
	NExpr(n expr.Expr) HighpassBuilder
	// Transform set transform type (from 0 to 6) (default di).
	Transform(transform int) HighpassBuilder
	// A set transform type (from 0 to 6) (default di).
	A(a int) HighpassBuilder
	// Precision set filtering precision (from -1 to 3) (default auto).
	Precision(precision int) HighpassBuilder
	// R set filtering precision (from -1 to 3) (default auto).
	R(r int) HighpassBuilder
	// Blocksize set the block size (from 0 to 32768) (default 0).
	Blocksize(blocksize int) HighpassBuilder
	// B set the block size (from 0 to 32768) (default 0).
	B(b int) HighpassBuilder
	// Enable expression to enable or disable the filter.
	Enable(enable expr.Expr) HighpassBuilder
}

// Highpass creates a new HighpassBuilder to configure the "highpass" filter.
func Highpass(opts ...filter.Option) HighpassBuilder {
	return &implHighpassBuilder{
		f: filter.New("highpass", 1, opts...),
	}
}

type implHighpassBuilder struct {
	f filter.Filter
}

func (highpassBuilder *implHighpassBuilder) String() string {
	return highpassBuilder.f.String()
}

func (highpassBuilder *implHighpassBuilder) Outputs() int {
	return highpassBuilder.f.Outputs()
}

func (highpassBuilder *implHighpassBuilder) With(key string, value expr.Expr) filter.Filter {
	return highpassBuilder.withOption(key, value)
}

func (highpassBuilder *implHighpassBuilder) withOption(key string, value expr.Expr) HighpassBuilder {
	bCopy := *highpassBuilder
	bCopy.f = highpassBuilder.f.With(key, value)
	return &bCopy
}

func (highpassBuilder *implHighpassBuilder) Frequency(frequency float64) HighpassBuilder {
	return highpassBuilder.withOption("frequency", expr.Double(frequency))
}

func (highpassBuilder *implHighpassBuilder) FrequencyExpr(frequency expr.Expr) HighpassBuilder {
	return highpassBuilder.withOption("frequency", frequency)
}

func (highpassBuilder *implHighpassBuilder) F(f float64) HighpassBuilder {
	return highpassBuilder.withOption("f", expr.Double(f))
}

func (highpassBuilder *implHighpassBuilder) FExpr(f expr.Expr) HighpassBuilder {
	return highpassBuilder.withOption("f", f)
}

func (highpassBuilder *implHighpassBuilder) WidthType(widthType int) HighpassBuilder {
	return highpassBuilder.withOption("width_type", expr.Int(widthType))
}

func (highpassBuilder *implHighpassBuilder) WidthTypeExpr(widthType expr.Expr) HighpassBuilder {
	return highpassBuilder.withOption("width_type", widthType)
}

func (highpassBuilder *implHighpassBuilder) T(t int) HighpassBuilder {
	return highpassBuilder.withOption("t", expr.Int(t))
}

func (highpassBuilder *implHighpassBuilder) TExpr(t expr.Expr) HighpassBuilder {
	return highpassBuilder.withOption("t", t)
}

func (highpassBuilder *implHighpassBuilder) Width(width float64) HighpassBuilder {
	return highpassBuilder.withOption("width", expr.Double(width))
}

func (highpassBuilder *implHighpassBuilder) WidthExpr(width expr.Expr) HighpassBuilder {
	return highpassBuilder.withOption("width", width)
}

func (highpassBuilder *implHighpassBuilder) W(w float64) HighpassBuilder {
	return highpassBuilder.withOption("w", expr.Double(w))
}

func (highpassBuilder *implHighpassBuilder) WExpr(w expr.Expr) HighpassBuilder {
	return highpassBuilder.withOption("w", w)
}

func (highpassBuilder *implHighpassBuilder) Poles(poles int) HighpassBuilder {
	return highpassBuilder.withOption("poles", expr.Int(poles))
}

func (highpassBuilder *implHighpassBuilder) P(p int) HighpassBuilder {
	return highpassBuilder.withOption("p", expr.Int(p))
}

func (highpassBuilder *implHighpassBuilder) Mix(mix float64) HighpassBuilder {
	return highpassBuilder.withOption("mix", expr.Double(mix))
}

func (highpassBuilder *implHighpassBuilder) MixExpr(mix expr.Expr) HighpassBuilder {
	return highpassBuilder.withOption("mix", mix)
}

func (highpassBuilder *implHighpassBuilder) M(m float64) HighpassBuilder {
	return highpassBuilder.withOption("m", expr.Double(m))
}

func (highpassBuilder *implHighpassBuilder) MExpr(m expr.Expr) HighpassBuilder {
	return highpassBuilder.withOption("m", m)
}

func (highpassBuilder *implHighpassBuilder) Channels(channels string) HighpassBuilder {
	return highpassBuilder.withOption("channels", expr.String(channels))
}

func (highpassBuilder *implHighpassBuilder) ChannelsExpr(channels expr.Expr) HighpassBuilder {
	return highpassBuilder.withOption("channels", channels)
}

func (highpassBuilder *implHighpassBuilder) C(c string) HighpassBuilder {
	return highpassBuilder.withOption("c", expr.String(c))
}

func (highpassBuilder *implHighpassBuilder) CExpr(c expr.Expr) HighpassBuilder {
	return highpassBuilder.withOption("c", c)
}

func (highpassBuilder *implHighpassBuilder) Normalize(normalize bool) HighpassBuilder {
	return highpassBuilder.withOption("normalize", expr.Bool(normalize))
}

func (highpassBuilder *implHighpassBuilder) NormalizeExpr(normalize expr.Expr) HighpassBuilder {
	return highpassBuilder.withOption("normalize", normalize)
}

func (highpassBuilder *implHighpassBuilder) N(n bool) HighpassBuilder {
	return highpassBuilder.withOption("n", expr.Bool(n))
}

func (highpassBuilder *implHighpassBuilder) NExpr(n expr.Expr) HighpassBuilder {
	return highpassBuilder.withOption("n", n)
}

func (highpassBuilder *implHighpassBuilder) Transform(transform int) HighpassBuilder {
	return highpassBuilder.withOption("transform", expr.Int(transform))
}

func (highpassBuilder *implHighpassBuilder) A(a int) HighpassBuilder {
	return highpassBuilder.withOption("a", expr.Int(a))
}

func (highpassBuilder *implHighpassBuilder) Precision(precision int) HighpassBuilder {
	return highpassBuilder.withOption("precision", expr.Int(precision))
}

func (highpassBuilder *implHighpassBuilder) R(r int) HighpassBuilder {
	return highpassBuilder.withOption("r", expr.Int(r))
}

func (highpassBuilder *implHighpassBuilder) Blocksize(blocksize int) HighpassBuilder {
	return highpassBuilder.withOption("blocksize", expr.Int(blocksize))
}

func (highpassBuilder *implHighpassBuilder) B(b int) HighpassBuilder {
	return highpassBuilder.withOption("b", expr.Int(b))
}

func (highpassBuilder *implHighpassBuilder) Enable(enable expr.Expr) HighpassBuilder {
	return highpassBuilder.withOption("enable", enable)
}
