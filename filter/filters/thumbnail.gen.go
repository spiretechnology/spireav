// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// ThumbnailBuilder Select the most representative frame in a given sequence of consecutive frames.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#thumbnail
type ThumbnailBuilder interface {
	filter.Filter
	// N set the frames batch size (from 2 to INT_MAX) (default 100).
	N(n int) ThumbnailBuilder
	// Log force stats logging level (from INT_MIN to INT_MAX) (default info).
	Log(log int) ThumbnailBuilder
}

// Thumbnail creates a new ThumbnailBuilder to configure the "thumbnail" filter.
func Thumbnail(opts ...filter.Option) ThumbnailBuilder {
	return &implThumbnailBuilder{
		f: filter.New("thumbnail", 1, opts...),
	}
}

type implThumbnailBuilder struct {
	f filter.Filter
}

func (thumbnailBuilder *implThumbnailBuilder) String() string {
	return thumbnailBuilder.f.String()
}

func (thumbnailBuilder *implThumbnailBuilder) Outputs() int {
	return thumbnailBuilder.f.Outputs()
}

func (thumbnailBuilder *implThumbnailBuilder) With(key string, value expr.Expr) filter.Filter {
	return thumbnailBuilder.withOption(key, value)
}

func (thumbnailBuilder *implThumbnailBuilder) withOption(key string, value expr.Expr) ThumbnailBuilder {
	bCopy := *thumbnailBuilder
	bCopy.f = thumbnailBuilder.f.With(key, value)
	return &bCopy
}

func (thumbnailBuilder *implThumbnailBuilder) N(n int) ThumbnailBuilder {
	return thumbnailBuilder.withOption("n", expr.Int(n))
}

func (thumbnailBuilder *implThumbnailBuilder) Log(log int) ThumbnailBuilder {
	return thumbnailBuilder.withOption("log", expr.Int(log))
}
