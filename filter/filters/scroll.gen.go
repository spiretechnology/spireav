// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// ScrollBuilder Scroll input video.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#scroll
type ScrollBuilder interface {
	filter.Filter
	// Horizontal set the horizontal scrolling speed (from -1 to 1) (default 0).
	Horizontal(horizontal float32) ScrollBuilder
	// HorizontalExpr set the horizontal scrolling speed (from -1 to 1) (default 0).
	HorizontalExpr(horizontal expr.Expr) ScrollBuilder
	// H set the horizontal scrolling speed (from -1 to 1) (default 0).
	H(h float32) ScrollBuilder
	// HExpr set the horizontal scrolling speed (from -1 to 1) (default 0).
	HExpr(h expr.Expr) ScrollBuilder
	// Vertical set the vertical scrolling speed (from -1 to 1) (default 0).
	Vertical(vertical float32) ScrollBuilder
	// VerticalExpr set the vertical scrolling speed (from -1 to 1) (default 0).
	VerticalExpr(vertical expr.Expr) ScrollBuilder
	// V set the vertical scrolling speed (from -1 to 1) (default 0).
	V(v float32) ScrollBuilder
	// VExpr set the vertical scrolling speed (from -1 to 1) (default 0).
	VExpr(v expr.Expr) ScrollBuilder
	// Hpos set initial horizontal position (from 0 to 1) (default 0).
	Hpos(hpos float32) ScrollBuilder
	// Vpos set initial vertical position (from 0 to 1) (default 0).
	Vpos(vpos float32) ScrollBuilder
}

// Scroll creates a new ScrollBuilder to configure the "scroll" filter.
func Scroll(opts ...filter.Option) ScrollBuilder {
	return &implScrollBuilder{
		f: filter.New("scroll", 1, opts...),
	}
}

type implScrollBuilder struct {
	f filter.Filter
}

func (scrollBuilder *implScrollBuilder) String() string {
	return scrollBuilder.f.String()
}

func (scrollBuilder *implScrollBuilder) Outputs() int {
	return scrollBuilder.f.Outputs()
}

func (scrollBuilder *implScrollBuilder) With(key string, value expr.Expr) filter.Filter {
	return scrollBuilder.withOption(key, value)
}

func (scrollBuilder *implScrollBuilder) withOption(key string, value expr.Expr) ScrollBuilder {
	bCopy := *scrollBuilder
	bCopy.f = scrollBuilder.f.With(key, value)
	return &bCopy
}

func (scrollBuilder *implScrollBuilder) Horizontal(horizontal float32) ScrollBuilder {
	return scrollBuilder.withOption("horizontal", expr.Float(horizontal))
}

func (scrollBuilder *implScrollBuilder) HorizontalExpr(horizontal expr.Expr) ScrollBuilder {
	return scrollBuilder.withOption("horizontal", horizontal)
}

func (scrollBuilder *implScrollBuilder) H(h float32) ScrollBuilder {
	return scrollBuilder.withOption("h", expr.Float(h))
}

func (scrollBuilder *implScrollBuilder) HExpr(h expr.Expr) ScrollBuilder {
	return scrollBuilder.withOption("h", h)
}

func (scrollBuilder *implScrollBuilder) Vertical(vertical float32) ScrollBuilder {
	return scrollBuilder.withOption("vertical", expr.Float(vertical))
}

func (scrollBuilder *implScrollBuilder) VerticalExpr(vertical expr.Expr) ScrollBuilder {
	return scrollBuilder.withOption("vertical", vertical)
}

func (scrollBuilder *implScrollBuilder) V(v float32) ScrollBuilder {
	return scrollBuilder.withOption("v", expr.Float(v))
}

func (scrollBuilder *implScrollBuilder) VExpr(v expr.Expr) ScrollBuilder {
	return scrollBuilder.withOption("v", v)
}

func (scrollBuilder *implScrollBuilder) Hpos(hpos float32) ScrollBuilder {
	return scrollBuilder.withOption("hpos", expr.Float(hpos))
}

func (scrollBuilder *implScrollBuilder) Vpos(vpos float32) ScrollBuilder {
	return scrollBuilder.withOption("vpos", expr.Float(vpos))
}
