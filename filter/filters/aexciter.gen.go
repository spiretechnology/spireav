// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// AexciterBuilder Enhance high frequency part of audio.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#aexciter
type AexciterBuilder interface {
	filter.Filter
	// LevelIn set level in (from 0 to 64) (default 1).
	LevelIn(levelIn float64) AexciterBuilder
	// LevelInExpr set level in (from 0 to 64) (default 1).
	LevelInExpr(levelIn expr.Expr) AexciterBuilder
	// LevelOut set level out (from 0 to 64) (default 1).
	LevelOut(levelOut float64) AexciterBuilder
	// LevelOutExpr set level out (from 0 to 64) (default 1).
	LevelOutExpr(levelOut expr.Expr) AexciterBuilder
	// Amount set amount (from 0 to 64) (default 1).
	Amount(amount float64) AexciterBuilder
	// AmountExpr set amount (from 0 to 64) (default 1).
	AmountExpr(amount expr.Expr) AexciterBuilder
	// Drive set harmonics (from 0.1 to 10) (default 8.5).
	Drive(drive float64) AexciterBuilder
	// DriveExpr set harmonics (from 0.1 to 10) (default 8.5).
	DriveExpr(drive expr.Expr) AexciterBuilder
	// Blend set blend harmonics (from -10 to 10) (default 0).
	Blend(blend float64) AexciterBuilder
	// BlendExpr set blend harmonics (from -10 to 10) (default 0).
	BlendExpr(blend expr.Expr) AexciterBuilder
	// Freq set scope (from 2000 to 12000) (default 7500).
	Freq(freq float64) AexciterBuilder
	// FreqExpr set scope (from 2000 to 12000) (default 7500).
	FreqExpr(freq expr.Expr) AexciterBuilder
	// Ceil set ceiling (from 9999 to 20000) (default 9999).
	Ceil(ceil float64) AexciterBuilder
	// CeilExpr set ceiling (from 9999 to 20000) (default 9999).
	CeilExpr(ceil expr.Expr) AexciterBuilder
	// Listen enable listen mode (default false).
	Listen(listen bool) AexciterBuilder
	// ListenExpr enable listen mode (default false).
	ListenExpr(listen expr.Expr) AexciterBuilder
	// Enable expression to enable or disable the filter.
	Enable(enable expr.Expr) AexciterBuilder
}

// Aexciter creates a new AexciterBuilder to configure the "aexciter" filter.
func Aexciter(opts ...filter.Option) AexciterBuilder {
	return &implAexciterBuilder{
		f: filter.New("aexciter", 1, opts...),
	}
}

type implAexciterBuilder struct {
	f filter.Filter
}

func (aexciterBuilder *implAexciterBuilder) String() string {
	return aexciterBuilder.f.String()
}

func (aexciterBuilder *implAexciterBuilder) Outputs() int {
	return aexciterBuilder.f.Outputs()
}

func (aexciterBuilder *implAexciterBuilder) With(key string, value expr.Expr) filter.Filter {
	return aexciterBuilder.withOption(key, value)
}

func (aexciterBuilder *implAexciterBuilder) withOption(key string, value expr.Expr) AexciterBuilder {
	bCopy := *aexciterBuilder
	bCopy.f = aexciterBuilder.f.With(key, value)
	return &bCopy
}

func (aexciterBuilder *implAexciterBuilder) LevelIn(levelIn float64) AexciterBuilder {
	return aexciterBuilder.withOption("level_in", expr.Double(levelIn))
}

func (aexciterBuilder *implAexciterBuilder) LevelInExpr(levelIn expr.Expr) AexciterBuilder {
	return aexciterBuilder.withOption("level_in", levelIn)
}

func (aexciterBuilder *implAexciterBuilder) LevelOut(levelOut float64) AexciterBuilder {
	return aexciterBuilder.withOption("level_out", expr.Double(levelOut))
}

func (aexciterBuilder *implAexciterBuilder) LevelOutExpr(levelOut expr.Expr) AexciterBuilder {
	return aexciterBuilder.withOption("level_out", levelOut)
}

func (aexciterBuilder *implAexciterBuilder) Amount(amount float64) AexciterBuilder {
	return aexciterBuilder.withOption("amount", expr.Double(amount))
}

func (aexciterBuilder *implAexciterBuilder) AmountExpr(amount expr.Expr) AexciterBuilder {
	return aexciterBuilder.withOption("amount", amount)
}

func (aexciterBuilder *implAexciterBuilder) Drive(drive float64) AexciterBuilder {
	return aexciterBuilder.withOption("drive", expr.Double(drive))
}

func (aexciterBuilder *implAexciterBuilder) DriveExpr(drive expr.Expr) AexciterBuilder {
	return aexciterBuilder.withOption("drive", drive)
}

func (aexciterBuilder *implAexciterBuilder) Blend(blend float64) AexciterBuilder {
	return aexciterBuilder.withOption("blend", expr.Double(blend))
}

func (aexciterBuilder *implAexciterBuilder) BlendExpr(blend expr.Expr) AexciterBuilder {
	return aexciterBuilder.withOption("blend", blend)
}

func (aexciterBuilder *implAexciterBuilder) Freq(freq float64) AexciterBuilder {
	return aexciterBuilder.withOption("freq", expr.Double(freq))
}

func (aexciterBuilder *implAexciterBuilder) FreqExpr(freq expr.Expr) AexciterBuilder {
	return aexciterBuilder.withOption("freq", freq)
}

func (aexciterBuilder *implAexciterBuilder) Ceil(ceil float64) AexciterBuilder {
	return aexciterBuilder.withOption("ceil", expr.Double(ceil))
}

func (aexciterBuilder *implAexciterBuilder) CeilExpr(ceil expr.Expr) AexciterBuilder {
	return aexciterBuilder.withOption("ceil", ceil)
}

func (aexciterBuilder *implAexciterBuilder) Listen(listen bool) AexciterBuilder {
	return aexciterBuilder.withOption("listen", expr.Bool(listen))
}

func (aexciterBuilder *implAexciterBuilder) ListenExpr(listen expr.Expr) AexciterBuilder {
	return aexciterBuilder.withOption("listen", listen)
}

func (aexciterBuilder *implAexciterBuilder) Enable(enable expr.Expr) AexciterBuilder {
	return aexciterBuilder.withOption("enable", enable)
}
