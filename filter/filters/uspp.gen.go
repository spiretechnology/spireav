// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// UsppBuilder Apply Ultra Simple / Slow Post-processing filter.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#uspp
type UsppBuilder interface {
	filter.Filter
	// Quality set quality (from 0 to 8) (default 3).
	Quality(quality int) UsppBuilder
	// Qp force a constant quantizer parameter (from 0 to 63) (default 0).
	Qp(qp int) UsppBuilder
	// UseBframeQp use B-frames' QP (default false).
	UseBframeQp(useBframeQp bool) UsppBuilder
	// Codec Codec name (default "snow").
	Codec(codec string) UsppBuilder
}

// Uspp creates a new UsppBuilder to configure the "uspp" filter.
func Uspp(opts ...filter.Option) UsppBuilder {
	return &implUsppBuilder{
		f: filter.New("uspp", 1, opts...),
	}
}

type implUsppBuilder struct {
	f filter.Filter
}

func (usppBuilder *implUsppBuilder) String() string {
	return usppBuilder.f.String()
}

func (usppBuilder *implUsppBuilder) Outputs() int {
	return usppBuilder.f.Outputs()
}

func (usppBuilder *implUsppBuilder) With(key string, value expr.Expr) filter.Filter {
	return usppBuilder.withOption(key, value)
}

func (usppBuilder *implUsppBuilder) withOption(key string, value expr.Expr) UsppBuilder {
	bCopy := *usppBuilder
	bCopy.f = usppBuilder.f.With(key, value)
	return &bCopy
}

func (usppBuilder *implUsppBuilder) Quality(quality int) UsppBuilder {
	return usppBuilder.withOption("quality", expr.Int(quality))
}

func (usppBuilder *implUsppBuilder) Qp(qp int) UsppBuilder {
	return usppBuilder.withOption("qp", expr.Int(qp))
}

func (usppBuilder *implUsppBuilder) UseBframeQp(useBframeQp bool) UsppBuilder {
	return usppBuilder.withOption("use_bframe_qp", expr.Bool(useBframeQp))
}

func (usppBuilder *implUsppBuilder) Codec(codec string) UsppBuilder {
	return usppBuilder.withOption("codec", expr.String(codec))
}
