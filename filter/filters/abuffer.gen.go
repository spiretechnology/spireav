// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// AbufferBuilder Buffer audio frames, and make them accessible to the filterchain.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#abuffer
type AbufferBuilder interface {
	filter.Filter
	// TimeBase (from 0 to INT_MAX) (default 0/1).
	TimeBase(timeBase expr.Rational) AbufferBuilder
	// SampleRate (from 0 to INT_MAX) (default 0).
	SampleRate(sampleRate int) AbufferBuilder
	// SampleFmt (default none).
	SampleFmt(sampleFmt expr.SampleFmt) AbufferBuilder
	// Channels (from 0 to INT_MAX) (default 0).
	Channels(channels int) AbufferBuilder
}

// Abuffer creates a new AbufferBuilder to configure the "abuffer" filter.
func Abuffer(opts ...filter.Option) AbufferBuilder {
	return &implAbufferBuilder{
		f: filter.New("abuffer", 1, opts...),
	}
}

type implAbufferBuilder struct {
	f filter.Filter
}

func (abufferBuilder *implAbufferBuilder) String() string {
	return abufferBuilder.f.String()
}

func (abufferBuilder *implAbufferBuilder) Outputs() int {
	return abufferBuilder.f.Outputs()
}

func (abufferBuilder *implAbufferBuilder) With(key string, value expr.Expr) filter.Filter {
	return abufferBuilder.withOption(key, value)
}

func (abufferBuilder *implAbufferBuilder) withOption(key string, value expr.Expr) AbufferBuilder {
	bCopy := *abufferBuilder
	bCopy.f = abufferBuilder.f.With(key, value)
	return &bCopy
}

func (abufferBuilder *implAbufferBuilder) TimeBase(timeBase expr.Rational) AbufferBuilder {
	return abufferBuilder.withOption("time_base", timeBase)
}

func (abufferBuilder *implAbufferBuilder) SampleRate(sampleRate int) AbufferBuilder {
	return abufferBuilder.withOption("sample_rate", expr.Int(sampleRate))
}

func (abufferBuilder *implAbufferBuilder) SampleFmt(sampleFmt expr.SampleFmt) AbufferBuilder {
	return abufferBuilder.withOption("sample_fmt", sampleFmt)
}

func (abufferBuilder *implAbufferBuilder) Channels(channels int) AbufferBuilder {
	return abufferBuilder.withOption("channels", expr.Int(channels))
}
