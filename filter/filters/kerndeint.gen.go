// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// KerndeintBuilder Apply kernel deinterlacing to the input.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#kerndeint
type KerndeintBuilder interface {
	filter.Filter
	// Thresh set the threshold (from 0 to 255) (default 10).
	Thresh(thresh int) KerndeintBuilder
	// Map set the map (default false).
	Map(mapVal bool) KerndeintBuilder
	// Order set the order (default false).
	Order(order bool) KerndeintBuilder
	// Sharp set sharpening (default false).
	Sharp(sharp bool) KerndeintBuilder
	// Twoway set twoway (default false).
	Twoway(twoway bool) KerndeintBuilder
}

// Kerndeint creates a new KerndeintBuilder to configure the "kerndeint" filter.
func Kerndeint(opts ...filter.Option) KerndeintBuilder {
	return &implKerndeintBuilder{
		f: filter.New("kerndeint", 1, opts...),
	}
}

type implKerndeintBuilder struct {
	f filter.Filter
}

func (kerndeintBuilder *implKerndeintBuilder) String() string {
	return kerndeintBuilder.f.String()
}

func (kerndeintBuilder *implKerndeintBuilder) Outputs() int {
	return kerndeintBuilder.f.Outputs()
}

func (kerndeintBuilder *implKerndeintBuilder) With(key string, value expr.Expr) filter.Filter {
	return kerndeintBuilder.withOption(key, value)
}

func (kerndeintBuilder *implKerndeintBuilder) withOption(key string, value expr.Expr) KerndeintBuilder {
	bCopy := *kerndeintBuilder
	bCopy.f = kerndeintBuilder.f.With(key, value)
	return &bCopy
}

func (kerndeintBuilder *implKerndeintBuilder) Thresh(thresh int) KerndeintBuilder {
	return kerndeintBuilder.withOption("thresh", expr.Int(thresh))
}

func (kerndeintBuilder *implKerndeintBuilder) Map(mapVal bool) KerndeintBuilder {
	return kerndeintBuilder.withOption("map", expr.Bool(mapVal))
}

func (kerndeintBuilder *implKerndeintBuilder) Order(order bool) KerndeintBuilder {
	return kerndeintBuilder.withOption("order", expr.Bool(order))
}

func (kerndeintBuilder *implKerndeintBuilder) Sharp(sharp bool) KerndeintBuilder {
	return kerndeintBuilder.withOption("sharp", expr.Bool(sharp))
}

func (kerndeintBuilder *implKerndeintBuilder) Twoway(twoway bool) KerndeintBuilder {
	return kerndeintBuilder.withOption("twoway", expr.Bool(twoway))
}
