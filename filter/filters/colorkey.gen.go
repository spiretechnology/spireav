// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// ColorkeyBuilder Turns a certain color into transparency. Operates on RGB colors.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#colorkey
type ColorkeyBuilder interface {
	filter.Filter
	// Color set the colorkey key color (default "black").
	Color(color expr.Color) ColorkeyBuilder
	// ColorExpr set the colorkey key color (default "black").
	ColorExpr(color expr.Expr) ColorkeyBuilder
	// Similarity set the colorkey similarity value (from 1e-05 to 1) (default 0.01).
	Similarity(similarity float32) ColorkeyBuilder
	// SimilarityExpr set the colorkey similarity value (from 1e-05 to 1) (default 0.01).
	SimilarityExpr(similarity expr.Expr) ColorkeyBuilder
	// Blend set the colorkey key blend value (from 0 to 1) (default 0).
	Blend(blend float32) ColorkeyBuilder
	// BlendExpr set the colorkey key blend value (from 0 to 1) (default 0).
	BlendExpr(blend expr.Expr) ColorkeyBuilder
	// Enable expression to enable or disable the filter.
	Enable(enable expr.Expr) ColorkeyBuilder
}

// Colorkey creates a new ColorkeyBuilder to configure the "colorkey" filter.
func Colorkey(opts ...filter.Option) ColorkeyBuilder {
	return &implColorkeyBuilder{
		f: filter.New("colorkey", 1, opts...),
	}
}

type implColorkeyBuilder struct {
	f filter.Filter
}

func (colorkeyBuilder *implColorkeyBuilder) String() string {
	return colorkeyBuilder.f.String()
}

func (colorkeyBuilder *implColorkeyBuilder) Outputs() int {
	return colorkeyBuilder.f.Outputs()
}

func (colorkeyBuilder *implColorkeyBuilder) With(key string, value expr.Expr) filter.Filter {
	return colorkeyBuilder.withOption(key, value)
}

func (colorkeyBuilder *implColorkeyBuilder) withOption(key string, value expr.Expr) ColorkeyBuilder {
	bCopy := *colorkeyBuilder
	bCopy.f = colorkeyBuilder.f.With(key, value)
	return &bCopy
}

func (colorkeyBuilder *implColorkeyBuilder) Color(color expr.Color) ColorkeyBuilder {
	return colorkeyBuilder.withOption("color", color)
}

func (colorkeyBuilder *implColorkeyBuilder) ColorExpr(color expr.Expr) ColorkeyBuilder {
	return colorkeyBuilder.withOption("color", color)
}

func (colorkeyBuilder *implColorkeyBuilder) Similarity(similarity float32) ColorkeyBuilder {
	return colorkeyBuilder.withOption("similarity", expr.Float(similarity))
}

func (colorkeyBuilder *implColorkeyBuilder) SimilarityExpr(similarity expr.Expr) ColorkeyBuilder {
	return colorkeyBuilder.withOption("similarity", similarity)
}

func (colorkeyBuilder *implColorkeyBuilder) Blend(blend float32) ColorkeyBuilder {
	return colorkeyBuilder.withOption("blend", expr.Float(blend))
}

func (colorkeyBuilder *implColorkeyBuilder) BlendExpr(blend expr.Expr) ColorkeyBuilder {
	return colorkeyBuilder.withOption("blend", blend)
}

func (colorkeyBuilder *implColorkeyBuilder) Enable(enable expr.Expr) ColorkeyBuilder {
	return colorkeyBuilder.withOption("enable", enable)
}
