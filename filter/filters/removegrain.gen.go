// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// RemovegrainBuilder Remove grain.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#removegrain
type RemovegrainBuilder interface {
	filter.Filter
	// M0 set mode for 1st plane (from 0 to 24) (default 0).
	M0(m0 int) RemovegrainBuilder
	// M1 set mode for 2nd plane (from 0 to 24) (default 0).
	M1(m1 int) RemovegrainBuilder
	// M2 set mode for 3rd plane (from 0 to 24) (default 0).
	M2(m2 int) RemovegrainBuilder
	// M3 set mode for 4th plane (from 0 to 24) (default 0).
	M3(m3 int) RemovegrainBuilder
	// Enable expression to enable or disable the filter.
	Enable(enable expr.Expr) RemovegrainBuilder
}

// Removegrain creates a new RemovegrainBuilder to configure the "removegrain" filter.
func Removegrain(opts ...filter.Option) RemovegrainBuilder {
	return &implRemovegrainBuilder{
		f: filter.New("removegrain", 1, opts...),
	}
}

type implRemovegrainBuilder struct {
	f filter.Filter
}

func (removegrainBuilder *implRemovegrainBuilder) String() string {
	return removegrainBuilder.f.String()
}

func (removegrainBuilder *implRemovegrainBuilder) Outputs() int {
	return removegrainBuilder.f.Outputs()
}

func (removegrainBuilder *implRemovegrainBuilder) With(key string, value expr.Expr) filter.Filter {
	return removegrainBuilder.withOption(key, value)
}

func (removegrainBuilder *implRemovegrainBuilder) withOption(key string, value expr.Expr) RemovegrainBuilder {
	bCopy := *removegrainBuilder
	bCopy.f = removegrainBuilder.f.With(key, value)
	return &bCopy
}

func (removegrainBuilder *implRemovegrainBuilder) M0(m0 int) RemovegrainBuilder {
	return removegrainBuilder.withOption("m0", expr.Int(m0))
}

func (removegrainBuilder *implRemovegrainBuilder) M1(m1 int) RemovegrainBuilder {
	return removegrainBuilder.withOption("m1", expr.Int(m1))
}

func (removegrainBuilder *implRemovegrainBuilder) M2(m2 int) RemovegrainBuilder {
	return removegrainBuilder.withOption("m2", expr.Int(m2))
}

func (removegrainBuilder *implRemovegrainBuilder) M3(m3 int) RemovegrainBuilder {
	return removegrainBuilder.withOption("m3", expr.Int(m3))
}

func (removegrainBuilder *implRemovegrainBuilder) Enable(enable expr.Expr) RemovegrainBuilder {
	return removegrainBuilder.withOption("enable", enable)
}
