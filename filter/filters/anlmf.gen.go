// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// AnlmfBuilder Apply Normalized Least-Mean-Fourth algorithm to first audio stream.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#anlmf
type AnlmfBuilder interface {
	filter.Filter
	// Order set the filter order (from 1 to 32767) (default 256).
	Order(order int) AnlmfBuilder
	// Mu set the filter mu (from 0 to 2) (default 0.75).
	Mu(mu float32) AnlmfBuilder
	// MuExpr set the filter mu (from 0 to 2) (default 0.75).
	MuExpr(mu expr.Expr) AnlmfBuilder
	// Eps set the filter eps (from 0 to 1) (default 1).
	Eps(eps float32) AnlmfBuilder
	// EpsExpr set the filter eps (from 0 to 1) (default 1).
	EpsExpr(eps expr.Expr) AnlmfBuilder
	// Leakage set the filter leakage (from 0 to 1) (default 0).
	Leakage(leakage float32) AnlmfBuilder
	// LeakageExpr set the filter leakage (from 0 to 1) (default 0).
	LeakageExpr(leakage expr.Expr) AnlmfBuilder
	// OutMode set output mode (from 0 to 4) (default o).
	OutMode(outMode int) AnlmfBuilder
	// OutModeExpr set output mode (from 0 to 4) (default o).
	OutModeExpr(outMode expr.Expr) AnlmfBuilder
	// Precision set processing precision (from 0 to 2) (default auto).
	Precision(precision int) AnlmfBuilder
	// Enable expression to enable or disable the filter.
	Enable(enable expr.Expr) AnlmfBuilder
}

// Anlmf creates a new AnlmfBuilder to configure the "anlmf" filter.
func Anlmf(opts ...filter.Option) AnlmfBuilder {
	return &implAnlmfBuilder{
		f: filter.New("anlmf", 1, opts...),
	}
}

type implAnlmfBuilder struct {
	f filter.Filter
}

func (anlmfBuilder *implAnlmfBuilder) String() string {
	return anlmfBuilder.f.String()
}

func (anlmfBuilder *implAnlmfBuilder) Outputs() int {
	return anlmfBuilder.f.Outputs()
}

func (anlmfBuilder *implAnlmfBuilder) With(key string, value expr.Expr) filter.Filter {
	return anlmfBuilder.withOption(key, value)
}

func (anlmfBuilder *implAnlmfBuilder) withOption(key string, value expr.Expr) AnlmfBuilder {
	bCopy := *anlmfBuilder
	bCopy.f = anlmfBuilder.f.With(key, value)
	return &bCopy
}

func (anlmfBuilder *implAnlmfBuilder) Order(order int) AnlmfBuilder {
	return anlmfBuilder.withOption("order", expr.Int(order))
}

func (anlmfBuilder *implAnlmfBuilder) Mu(mu float32) AnlmfBuilder {
	return anlmfBuilder.withOption("mu", expr.Float(mu))
}

func (anlmfBuilder *implAnlmfBuilder) MuExpr(mu expr.Expr) AnlmfBuilder {
	return anlmfBuilder.withOption("mu", mu)
}

func (anlmfBuilder *implAnlmfBuilder) Eps(eps float32) AnlmfBuilder {
	return anlmfBuilder.withOption("eps", expr.Float(eps))
}

func (anlmfBuilder *implAnlmfBuilder) EpsExpr(eps expr.Expr) AnlmfBuilder {
	return anlmfBuilder.withOption("eps", eps)
}

func (anlmfBuilder *implAnlmfBuilder) Leakage(leakage float32) AnlmfBuilder {
	return anlmfBuilder.withOption("leakage", expr.Float(leakage))
}

func (anlmfBuilder *implAnlmfBuilder) LeakageExpr(leakage expr.Expr) AnlmfBuilder {
	return anlmfBuilder.withOption("leakage", leakage)
}

func (anlmfBuilder *implAnlmfBuilder) OutMode(outMode int) AnlmfBuilder {
	return anlmfBuilder.withOption("out_mode", expr.Int(outMode))
}

func (anlmfBuilder *implAnlmfBuilder) OutModeExpr(outMode expr.Expr) AnlmfBuilder {
	return anlmfBuilder.withOption("out_mode", outMode)
}

func (anlmfBuilder *implAnlmfBuilder) Precision(precision int) AnlmfBuilder {
	return anlmfBuilder.withOption("precision", expr.Int(precision))
}

func (anlmfBuilder *implAnlmfBuilder) Enable(enable expr.Expr) AnlmfBuilder {
	return anlmfBuilder.withOption("enable", enable)
}
