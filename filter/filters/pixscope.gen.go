// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// PixscopeBuilder Pixel data analysis.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#pixscope
type PixscopeBuilder interface {
	filter.Filter
	// X set scope x offset (from 0 to 1) (default 0.5).
	X(x float32) PixscopeBuilder
	// XExpr set scope x offset (from 0 to 1) (default 0.5).
	XExpr(x expr.Expr) PixscopeBuilder
	// Y set scope y offset (from 0 to 1) (default 0.5).
	Y(y float32) PixscopeBuilder
	// YExpr set scope y offset (from 0 to 1) (default 0.5).
	YExpr(y expr.Expr) PixscopeBuilder
	// W set scope width (from 1 to 80) (default 7).
	W(w int) PixscopeBuilder
	// WExpr set scope width (from 1 to 80) (default 7).
	WExpr(w expr.Expr) PixscopeBuilder
	// H set scope height (from 1 to 80) (default 7).
	H(h int) PixscopeBuilder
	// HExpr set scope height (from 1 to 80) (default 7).
	HExpr(h expr.Expr) PixscopeBuilder
	// O set window opacity (from 0 to 1) (default 0.5).
	O(o float32) PixscopeBuilder
	// OExpr set window opacity (from 0 to 1) (default 0.5).
	OExpr(o expr.Expr) PixscopeBuilder
	// Wx set window x offset (from -1 to 1) (default -1).
	Wx(wx float32) PixscopeBuilder
	// WxExpr set window x offset (from -1 to 1) (default -1).
	WxExpr(wx expr.Expr) PixscopeBuilder
	// Wy set window y offset (from -1 to 1) (default -1).
	Wy(wy float32) PixscopeBuilder
	// WyExpr set window y offset (from -1 to 1) (default -1).
	WyExpr(wy expr.Expr) PixscopeBuilder
	// Enable expression to enable or disable the filter.
	Enable(enable expr.Expr) PixscopeBuilder
}

// Pixscope creates a new PixscopeBuilder to configure the "pixscope" filter.
func Pixscope(opts ...filter.Option) PixscopeBuilder {
	return &implPixscopeBuilder{
		f: filter.New("pixscope", 1, opts...),
	}
}

type implPixscopeBuilder struct {
	f filter.Filter
}

func (pixscopeBuilder *implPixscopeBuilder) String() string {
	return pixscopeBuilder.f.String()
}

func (pixscopeBuilder *implPixscopeBuilder) Outputs() int {
	return pixscopeBuilder.f.Outputs()
}

func (pixscopeBuilder *implPixscopeBuilder) With(key string, value expr.Expr) filter.Filter {
	return pixscopeBuilder.withOption(key, value)
}

func (pixscopeBuilder *implPixscopeBuilder) withOption(key string, value expr.Expr) PixscopeBuilder {
	bCopy := *pixscopeBuilder
	bCopy.f = pixscopeBuilder.f.With(key, value)
	return &bCopy
}

func (pixscopeBuilder *implPixscopeBuilder) X(x float32) PixscopeBuilder {
	return pixscopeBuilder.withOption("x", expr.Float(x))
}

func (pixscopeBuilder *implPixscopeBuilder) XExpr(x expr.Expr) PixscopeBuilder {
	return pixscopeBuilder.withOption("x", x)
}

func (pixscopeBuilder *implPixscopeBuilder) Y(y float32) PixscopeBuilder {
	return pixscopeBuilder.withOption("y", expr.Float(y))
}

func (pixscopeBuilder *implPixscopeBuilder) YExpr(y expr.Expr) PixscopeBuilder {
	return pixscopeBuilder.withOption("y", y)
}

func (pixscopeBuilder *implPixscopeBuilder) W(w int) PixscopeBuilder {
	return pixscopeBuilder.withOption("w", expr.Int(w))
}

func (pixscopeBuilder *implPixscopeBuilder) WExpr(w expr.Expr) PixscopeBuilder {
	return pixscopeBuilder.withOption("w", w)
}

func (pixscopeBuilder *implPixscopeBuilder) H(h int) PixscopeBuilder {
	return pixscopeBuilder.withOption("h", expr.Int(h))
}

func (pixscopeBuilder *implPixscopeBuilder) HExpr(h expr.Expr) PixscopeBuilder {
	return pixscopeBuilder.withOption("h", h)
}

func (pixscopeBuilder *implPixscopeBuilder) O(o float32) PixscopeBuilder {
	return pixscopeBuilder.withOption("o", expr.Float(o))
}

func (pixscopeBuilder *implPixscopeBuilder) OExpr(o expr.Expr) PixscopeBuilder {
	return pixscopeBuilder.withOption("o", o)
}

func (pixscopeBuilder *implPixscopeBuilder) Wx(wx float32) PixscopeBuilder {
	return pixscopeBuilder.withOption("wx", expr.Float(wx))
}

func (pixscopeBuilder *implPixscopeBuilder) WxExpr(wx expr.Expr) PixscopeBuilder {
	return pixscopeBuilder.withOption("wx", wx)
}

func (pixscopeBuilder *implPixscopeBuilder) Wy(wy float32) PixscopeBuilder {
	return pixscopeBuilder.withOption("wy", expr.Float(wy))
}

func (pixscopeBuilder *implPixscopeBuilder) WyExpr(wy expr.Expr) PixscopeBuilder {
	return pixscopeBuilder.withOption("wy", wy)
}

func (pixscopeBuilder *implPixscopeBuilder) Enable(enable expr.Expr) PixscopeBuilder {
	return pixscopeBuilder.withOption("enable", enable)
}
