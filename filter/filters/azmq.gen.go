// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// AzmqBuilder Receive commands through ZMQ and broker them to filters.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#azmq
type AzmqBuilder interface {
	filter.Filter
	// BindAddress set bind address (default "tcp://*:5555").
	BindAddress(bindAddress string) AzmqBuilder
	// B set bind address (default "tcp://*:5555").
	B(b string) AzmqBuilder
}

// Azmq creates a new AzmqBuilder to configure the "azmq" filter.
func Azmq(opts ...filter.Option) AzmqBuilder {
	return &implAzmqBuilder{
		f: filter.New("azmq", 1, opts...),
	}
}

type implAzmqBuilder struct {
	f filter.Filter
}

func (azmqBuilder *implAzmqBuilder) String() string {
	return azmqBuilder.f.String()
}

func (azmqBuilder *implAzmqBuilder) Outputs() int {
	return azmqBuilder.f.Outputs()
}

func (azmqBuilder *implAzmqBuilder) With(key string, value expr.Expr) filter.Filter {
	return azmqBuilder.withOption(key, value)
}

func (azmqBuilder *implAzmqBuilder) withOption(key string, value expr.Expr) AzmqBuilder {
	bCopy := *azmqBuilder
	bCopy.f = azmqBuilder.f.With(key, value)
	return &bCopy
}

func (azmqBuilder *implAzmqBuilder) BindAddress(bindAddress string) AzmqBuilder {
	return azmqBuilder.withOption("bind_address", expr.String(bindAddress))
}

func (azmqBuilder *implAzmqBuilder) B(b string) AzmqBuilder {
	return azmqBuilder.withOption("b", expr.String(b))
}
