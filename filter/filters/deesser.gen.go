// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// DeesserBuilder Apply de-essing to the audio.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#deesser
type DeesserBuilder interface {
	filter.Filter
	// I set intensity (from 0 to 1) (default 0).
	I(i float64) DeesserBuilder
	// M set max deessing (from 0 to 1) (default 0.5).
	M(m float64) DeesserBuilder
	// F set frequency (from 0 to 1) (default 0.5).
	F(f float64) DeesserBuilder
	// S set output mode (from 0 to 2) (default o).
	S(s int) DeesserBuilder
}

// Deesser creates a new DeesserBuilder to configure the "deesser" filter.
func Deesser(opts ...filter.Option) DeesserBuilder {
	return &implDeesserBuilder{
		f: filter.New("deesser", 1, opts...),
	}
}

type implDeesserBuilder struct {
	f filter.Filter
}

func (deesserBuilder *implDeesserBuilder) String() string {
	return deesserBuilder.f.String()
}

func (deesserBuilder *implDeesserBuilder) Outputs() int {
	return deesserBuilder.f.Outputs()
}

func (deesserBuilder *implDeesserBuilder) With(key string, value expr.Expr) filter.Filter {
	return deesserBuilder.withOption(key, value)
}

func (deesserBuilder *implDeesserBuilder) withOption(key string, value expr.Expr) DeesserBuilder {
	bCopy := *deesserBuilder
	bCopy.f = deesserBuilder.f.With(key, value)
	return &bCopy
}

func (deesserBuilder *implDeesserBuilder) I(i float64) DeesserBuilder {
	return deesserBuilder.withOption("i", expr.Double(i))
}

func (deesserBuilder *implDeesserBuilder) M(m float64) DeesserBuilder {
	return deesserBuilder.withOption("m", expr.Double(m))
}

func (deesserBuilder *implDeesserBuilder) F(f float64) DeesserBuilder {
	return deesserBuilder.withOption("f", expr.Double(f))
}

func (deesserBuilder *implDeesserBuilder) S(s int) DeesserBuilder {
	return deesserBuilder.withOption("s", expr.Int(s))
}
