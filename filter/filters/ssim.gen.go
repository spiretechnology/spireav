// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// SsimBuilder Calculate the SSIM between two video streams.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#ssim
type SsimBuilder interface {
	filter.Filter
	// StatsFile Set file where to store per-frame difference information.
	StatsFile(statsFile string) SsimBuilder
	// F Set file where to store per-frame difference information.
	F(f string) SsimBuilder
	// EofAction Action to take when encountering EOF from secondary input  (from 0 to 2) (default repeat).
	EofAction(eofAction int) SsimBuilder
	// Shortest force termination when the shortest input terminates (default false).
	Shortest(shortest bool) SsimBuilder
	// Repeatlast extend last frame of secondary streams beyond EOF (default true).
	Repeatlast(repeatlast bool) SsimBuilder
	// TsSyncMode How strictly to sync streams based on secondary input timestamps (from 0 to 1) (default default).
	TsSyncMode(tsSyncMode int) SsimBuilder
}

// Ssim creates a new SsimBuilder to configure the "ssim" filter.
func Ssim(opts ...filter.Option) SsimBuilder {
	return &implSsimBuilder{
		f: filter.New("ssim", 1, opts...),
	}
}

type implSsimBuilder struct {
	f filter.Filter
}

func (ssimBuilder *implSsimBuilder) String() string {
	return ssimBuilder.f.String()
}

func (ssimBuilder *implSsimBuilder) Outputs() int {
	return ssimBuilder.f.Outputs()
}

func (ssimBuilder *implSsimBuilder) With(key string, value expr.Expr) filter.Filter {
	return ssimBuilder.withOption(key, value)
}

func (ssimBuilder *implSsimBuilder) withOption(key string, value expr.Expr) SsimBuilder {
	bCopy := *ssimBuilder
	bCopy.f = ssimBuilder.f.With(key, value)
	return &bCopy
}

func (ssimBuilder *implSsimBuilder) StatsFile(statsFile string) SsimBuilder {
	return ssimBuilder.withOption("stats_file", expr.String(statsFile))
}

func (ssimBuilder *implSsimBuilder) F(f string) SsimBuilder {
	return ssimBuilder.withOption("f", expr.String(f))
}

func (ssimBuilder *implSsimBuilder) EofAction(eofAction int) SsimBuilder {
	return ssimBuilder.withOption("eof_action", expr.Int(eofAction))
}

func (ssimBuilder *implSsimBuilder) Shortest(shortest bool) SsimBuilder {
	return ssimBuilder.withOption("shortest", expr.Bool(shortest))
}

func (ssimBuilder *implSsimBuilder) Repeatlast(repeatlast bool) SsimBuilder {
	return ssimBuilder.withOption("repeatlast", expr.Bool(repeatlast))
}

func (ssimBuilder *implSsimBuilder) TsSyncMode(tsSyncMode int) SsimBuilder {
	return ssimBuilder.withOption("ts_sync_mode", expr.Int(tsSyncMode))
}
