// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// AtiltBuilder Apply spectral tilt to audio.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#atilt
type AtiltBuilder interface {
	filter.Filter
	// Freq set central frequency (from 20 to 192000) (default 10000).
	Freq(freq float64) AtiltBuilder
	// FreqExpr set central frequency (from 20 to 192000) (default 10000).
	FreqExpr(freq expr.Expr) AtiltBuilder
	// Slope set filter slope (from -1 to 1) (default 0).
	Slope(slope float64) AtiltBuilder
	// SlopeExpr set filter slope (from -1 to 1) (default 0).
	SlopeExpr(slope expr.Expr) AtiltBuilder
	// Width set filter width (from 100 to 10000) (default 1000).
	Width(width float64) AtiltBuilder
	// WidthExpr set filter width (from 100 to 10000) (default 1000).
	WidthExpr(width expr.Expr) AtiltBuilder
	// Order set filter order (from 2 to 30) (default 5).
	Order(order int) AtiltBuilder
	// OrderExpr set filter order (from 2 to 30) (default 5).
	OrderExpr(order expr.Expr) AtiltBuilder
	// Level set input level (from 0 to 4) (default 1).
	Level(level float64) AtiltBuilder
	// LevelExpr set input level (from 0 to 4) (default 1).
	LevelExpr(level expr.Expr) AtiltBuilder
	// Enable expression to enable or disable the filter.
	Enable(enable expr.Expr) AtiltBuilder
}

// Atilt creates a new AtiltBuilder to configure the "atilt" filter.
func Atilt(opts ...filter.Option) AtiltBuilder {
	return &implAtiltBuilder{
		f: filter.New("atilt", 1, opts...),
	}
}

type implAtiltBuilder struct {
	f filter.Filter
}

func (atiltBuilder *implAtiltBuilder) String() string {
	return atiltBuilder.f.String()
}

func (atiltBuilder *implAtiltBuilder) Outputs() int {
	return atiltBuilder.f.Outputs()
}

func (atiltBuilder *implAtiltBuilder) With(key string, value expr.Expr) filter.Filter {
	return atiltBuilder.withOption(key, value)
}

func (atiltBuilder *implAtiltBuilder) withOption(key string, value expr.Expr) AtiltBuilder {
	bCopy := *atiltBuilder
	bCopy.f = atiltBuilder.f.With(key, value)
	return &bCopy
}

func (atiltBuilder *implAtiltBuilder) Freq(freq float64) AtiltBuilder {
	return atiltBuilder.withOption("freq", expr.Double(freq))
}

func (atiltBuilder *implAtiltBuilder) FreqExpr(freq expr.Expr) AtiltBuilder {
	return atiltBuilder.withOption("freq", freq)
}

func (atiltBuilder *implAtiltBuilder) Slope(slope float64) AtiltBuilder {
	return atiltBuilder.withOption("slope", expr.Double(slope))
}

func (atiltBuilder *implAtiltBuilder) SlopeExpr(slope expr.Expr) AtiltBuilder {
	return atiltBuilder.withOption("slope", slope)
}

func (atiltBuilder *implAtiltBuilder) Width(width float64) AtiltBuilder {
	return atiltBuilder.withOption("width", expr.Double(width))
}

func (atiltBuilder *implAtiltBuilder) WidthExpr(width expr.Expr) AtiltBuilder {
	return atiltBuilder.withOption("width", width)
}

func (atiltBuilder *implAtiltBuilder) Order(order int) AtiltBuilder {
	return atiltBuilder.withOption("order", expr.Int(order))
}

func (atiltBuilder *implAtiltBuilder) OrderExpr(order expr.Expr) AtiltBuilder {
	return atiltBuilder.withOption("order", order)
}

func (atiltBuilder *implAtiltBuilder) Level(level float64) AtiltBuilder {
	return atiltBuilder.withOption("level", expr.Double(level))
}

func (atiltBuilder *implAtiltBuilder) LevelExpr(level expr.Expr) AtiltBuilder {
	return atiltBuilder.withOption("level", level)
}

func (atiltBuilder *implAtiltBuilder) Enable(enable expr.Expr) AtiltBuilder {
	return atiltBuilder.withOption("enable", enable)
}
