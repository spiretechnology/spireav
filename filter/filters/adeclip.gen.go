// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// AdeclipBuilder Remove clipping from input audio.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#adeclip
type AdeclipBuilder interface {
	filter.Filter
	// Window set window size (from 10 to 100) (default 55).
	Window(window float64) AdeclipBuilder
	// W set window size (from 10 to 100) (default 55).
	W(w float64) AdeclipBuilder
	// Overlap set window overlap (from 50 to 95) (default 75).
	Overlap(overlap float64) AdeclipBuilder
	// O set window overlap (from 50 to 95) (default 75).
	O(o float64) AdeclipBuilder
	// Arorder set autoregression order (from 0 to 25) (default 8).
	Arorder(arorder float64) AdeclipBuilder
	// A set autoregression order (from 0 to 25) (default 8).
	A(a float64) AdeclipBuilder
	// Threshold set threshold (from 1 to 100) (default 10).
	Threshold(threshold float64) AdeclipBuilder
	// T set threshold (from 1 to 100) (default 10).
	T(t float64) AdeclipBuilder
	// Hsize set histogram size (from 100 to 9999) (default 1000).
	Hsize(hsize int) AdeclipBuilder
	// N set histogram size (from 100 to 9999) (default 1000).
	N(n int) AdeclipBuilder
	// Method set overlap method (from 0 to 1) (default add).
	Method(method int) AdeclipBuilder
	// M set overlap method (from 0 to 1) (default add).
	M(m int) AdeclipBuilder
	// Enable expression to enable or disable the filter.
	Enable(enable expr.Expr) AdeclipBuilder
}

// Adeclip creates a new AdeclipBuilder to configure the "adeclip" filter.
func Adeclip(opts ...filter.Option) AdeclipBuilder {
	return &implAdeclipBuilder{
		f: filter.New("adeclip", 1, opts...),
	}
}

type implAdeclipBuilder struct {
	f filter.Filter
}

func (adeclipBuilder *implAdeclipBuilder) String() string {
	return adeclipBuilder.f.String()
}

func (adeclipBuilder *implAdeclipBuilder) Outputs() int {
	return adeclipBuilder.f.Outputs()
}

func (adeclipBuilder *implAdeclipBuilder) With(key string, value expr.Expr) filter.Filter {
	return adeclipBuilder.withOption(key, value)
}

func (adeclipBuilder *implAdeclipBuilder) withOption(key string, value expr.Expr) AdeclipBuilder {
	bCopy := *adeclipBuilder
	bCopy.f = adeclipBuilder.f.With(key, value)
	return &bCopy
}

func (adeclipBuilder *implAdeclipBuilder) Window(window float64) AdeclipBuilder {
	return adeclipBuilder.withOption("window", expr.Double(window))
}

func (adeclipBuilder *implAdeclipBuilder) W(w float64) AdeclipBuilder {
	return adeclipBuilder.withOption("w", expr.Double(w))
}

func (adeclipBuilder *implAdeclipBuilder) Overlap(overlap float64) AdeclipBuilder {
	return adeclipBuilder.withOption("overlap", expr.Double(overlap))
}

func (adeclipBuilder *implAdeclipBuilder) O(o float64) AdeclipBuilder {
	return adeclipBuilder.withOption("o", expr.Double(o))
}

func (adeclipBuilder *implAdeclipBuilder) Arorder(arorder float64) AdeclipBuilder {
	return adeclipBuilder.withOption("arorder", expr.Double(arorder))
}

func (adeclipBuilder *implAdeclipBuilder) A(a float64) AdeclipBuilder {
	return adeclipBuilder.withOption("a", expr.Double(a))
}

func (adeclipBuilder *implAdeclipBuilder) Threshold(threshold float64) AdeclipBuilder {
	return adeclipBuilder.withOption("threshold", expr.Double(threshold))
}

func (adeclipBuilder *implAdeclipBuilder) T(t float64) AdeclipBuilder {
	return adeclipBuilder.withOption("t", expr.Double(t))
}

func (adeclipBuilder *implAdeclipBuilder) Hsize(hsize int) AdeclipBuilder {
	return adeclipBuilder.withOption("hsize", expr.Int(hsize))
}

func (adeclipBuilder *implAdeclipBuilder) N(n int) AdeclipBuilder {
	return adeclipBuilder.withOption("n", expr.Int(n))
}

func (adeclipBuilder *implAdeclipBuilder) Method(method int) AdeclipBuilder {
	return adeclipBuilder.withOption("method", expr.Int(method))
}

func (adeclipBuilder *implAdeclipBuilder) M(m int) AdeclipBuilder {
	return adeclipBuilder.withOption("m", expr.Int(m))
}

func (adeclipBuilder *implAdeclipBuilder) Enable(enable expr.Expr) AdeclipBuilder {
	return adeclipBuilder.withOption("enable", enable)
}
