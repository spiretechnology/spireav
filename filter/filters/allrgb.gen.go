// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"time"

	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// AllrgbBuilder Generate all RGB colors.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#allrgb
type AllrgbBuilder interface {
	filter.Filter
	// Rate set video rate (default "25").
	Rate(rate expr.Rational) AllrgbBuilder
	// R set video rate (default "25").
	R(r expr.Rational) AllrgbBuilder
	// Duration set video duration (default -0.000001).
	Duration(duration time.Duration) AllrgbBuilder
	// D set video duration (default -0.000001).
	D(d time.Duration) AllrgbBuilder
	// Sar set video sample aspect ratio (from 0 to INT_MAX) (default 1/1).
	Sar(sar expr.Rational) AllrgbBuilder
}

// Allrgb creates a new AllrgbBuilder to configure the "allrgb" filter.
func Allrgb(opts ...filter.Option) AllrgbBuilder {
	return &implAllrgbBuilder{
		f: filter.New("allrgb", 1, opts...),
	}
}

type implAllrgbBuilder struct {
	f filter.Filter
}

func (allrgbBuilder *implAllrgbBuilder) String() string {
	return allrgbBuilder.f.String()
}

func (allrgbBuilder *implAllrgbBuilder) Outputs() int {
	return allrgbBuilder.f.Outputs()
}

func (allrgbBuilder *implAllrgbBuilder) With(key string, value expr.Expr) filter.Filter {
	return allrgbBuilder.withOption(key, value)
}

func (allrgbBuilder *implAllrgbBuilder) withOption(key string, value expr.Expr) AllrgbBuilder {
	bCopy := *allrgbBuilder
	bCopy.f = allrgbBuilder.f.With(key, value)
	return &bCopy
}

func (allrgbBuilder *implAllrgbBuilder) Rate(rate expr.Rational) AllrgbBuilder {
	return allrgbBuilder.withOption("rate", rate)
}

func (allrgbBuilder *implAllrgbBuilder) R(r expr.Rational) AllrgbBuilder {
	return allrgbBuilder.withOption("r", r)
}

func (allrgbBuilder *implAllrgbBuilder) Duration(duration time.Duration) AllrgbBuilder {
	return allrgbBuilder.withOption("duration", expr.Duration(duration))
}

func (allrgbBuilder *implAllrgbBuilder) D(d time.Duration) AllrgbBuilder {
	return allrgbBuilder.withOption("d", expr.Duration(d))
}

func (allrgbBuilder *implAllrgbBuilder) Sar(sar expr.Rational) AllrgbBuilder {
	return allrgbBuilder.withOption("sar", sar)
}
