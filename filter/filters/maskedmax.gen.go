// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// MaskedmaxBuilder Apply filtering with maximum difference of two streams.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#maskedmax
type MaskedmaxBuilder interface {
	filter.Filter
	// Planes set planes (from 0 to 15) (default 15).
	Planes(planes int) MaskedmaxBuilder
	// PlanesExpr set planes (from 0 to 15) (default 15).
	PlanesExpr(planes expr.Expr) MaskedmaxBuilder
	// Enable expression to enable or disable the filter.
	Enable(enable expr.Expr) MaskedmaxBuilder
}

// Maskedmax creates a new MaskedmaxBuilder to configure the "maskedmax" filter.
func Maskedmax(opts ...filter.Option) MaskedmaxBuilder {
	return &implMaskedmaxBuilder{
		f: filter.New("maskedmax", 1, opts...),
	}
}

type implMaskedmaxBuilder struct {
	f filter.Filter
}

func (maskedmaxBuilder *implMaskedmaxBuilder) String() string {
	return maskedmaxBuilder.f.String()
}

func (maskedmaxBuilder *implMaskedmaxBuilder) Outputs() int {
	return maskedmaxBuilder.f.Outputs()
}

func (maskedmaxBuilder *implMaskedmaxBuilder) With(key string, value expr.Expr) filter.Filter {
	return maskedmaxBuilder.withOption(key, value)
}

func (maskedmaxBuilder *implMaskedmaxBuilder) withOption(key string, value expr.Expr) MaskedmaxBuilder {
	bCopy := *maskedmaxBuilder
	bCopy.f = maskedmaxBuilder.f.With(key, value)
	return &bCopy
}

func (maskedmaxBuilder *implMaskedmaxBuilder) Planes(planes int) MaskedmaxBuilder {
	return maskedmaxBuilder.withOption("planes", expr.Int(planes))
}

func (maskedmaxBuilder *implMaskedmaxBuilder) PlanesExpr(planes expr.Expr) MaskedmaxBuilder {
	return maskedmaxBuilder.withOption("planes", planes)
}

func (maskedmaxBuilder *implMaskedmaxBuilder) Enable(enable expr.Expr) MaskedmaxBuilder {
	return maskedmaxBuilder.withOption("enable", enable)
}
