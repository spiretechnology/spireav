// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// FsyncBuilder Synchronize video frames from external source.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#fsync
type FsyncBuilder interface {
	filter.Filter
	// File set the file name to use for frame sync (default "").
	File(file string) FsyncBuilder
	// F set the file name to use for frame sync (default "").
	F(f string) FsyncBuilder
}

// Fsync creates a new FsyncBuilder to configure the "fsync" filter.
func Fsync(opts ...filter.Option) FsyncBuilder {
	return &implFsyncBuilder{
		f: filter.New("fsync", 1, opts...),
	}
}

type implFsyncBuilder struct {
	f filter.Filter
}

func (fsyncBuilder *implFsyncBuilder) String() string {
	return fsyncBuilder.f.String()
}

func (fsyncBuilder *implFsyncBuilder) Outputs() int {
	return fsyncBuilder.f.Outputs()
}

func (fsyncBuilder *implFsyncBuilder) With(key string, value expr.Expr) filter.Filter {
	return fsyncBuilder.withOption(key, value)
}

func (fsyncBuilder *implFsyncBuilder) withOption(key string, value expr.Expr) FsyncBuilder {
	bCopy := *fsyncBuilder
	bCopy.f = fsyncBuilder.f.With(key, value)
	return &bCopy
}

func (fsyncBuilder *implFsyncBuilder) File(file string) FsyncBuilder {
	return fsyncBuilder.withOption("file", expr.String(file))
}

func (fsyncBuilder *implFsyncBuilder) F(f string) FsyncBuilder {
	return fsyncBuilder.withOption("f", expr.String(f))
}
