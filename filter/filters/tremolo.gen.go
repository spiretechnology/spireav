// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// TremoloBuilder Apply tremolo effect.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#tremolo
type TremoloBuilder interface {
	filter.Filter
	// F set frequency in hertz (from 0.1 to 20000) (default 5).
	F(f float64) TremoloBuilder
	// D set depth as percentage (from 0 to 1) (default 0.5).
	D(d float64) TremoloBuilder
}

// Tremolo creates a new TremoloBuilder to configure the "tremolo" filter.
func Tremolo(opts ...filter.Option) TremoloBuilder {
	return &implTremoloBuilder{
		f: filter.New("tremolo", 1, opts...),
	}
}

type implTremoloBuilder struct {
	f filter.Filter
}

func (tremoloBuilder *implTremoloBuilder) String() string {
	return tremoloBuilder.f.String()
}

func (tremoloBuilder *implTremoloBuilder) Outputs() int {
	return tremoloBuilder.f.Outputs()
}

func (tremoloBuilder *implTremoloBuilder) With(key string, value expr.Expr) filter.Filter {
	return tremoloBuilder.withOption(key, value)
}

func (tremoloBuilder *implTremoloBuilder) withOption(key string, value expr.Expr) TremoloBuilder {
	bCopy := *tremoloBuilder
	bCopy.f = tremoloBuilder.f.With(key, value)
	return &bCopy
}

func (tremoloBuilder *implTremoloBuilder) F(f float64) TremoloBuilder {
	return tremoloBuilder.withOption("f", expr.Double(f))
}

func (tremoloBuilder *implTremoloBuilder) D(d float64) TremoloBuilder {
	return tremoloBuilder.withOption("d", expr.Double(d))
}
