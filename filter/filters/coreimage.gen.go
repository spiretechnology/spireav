// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// CoreimageBuilder Video filtering using CoreImage API.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#coreimage
type CoreimageBuilder interface {
	filter.Filter
	// ListFilters list available filters (default false).
	ListFilters(listFilters bool) CoreimageBuilder
	// ListGenerators list available generators (default false).
	ListGenerators(listGenerators bool) CoreimageBuilder
	// Filter names and options of filters to apply.
	Filter(filter string) CoreimageBuilder
	// OutputRect output rectangle within output image.
	OutputRect(outputRect string) CoreimageBuilder
}

// Coreimage creates a new CoreimageBuilder to configure the "coreimage" filter.
func Coreimage(opts ...filter.Option) CoreimageBuilder {
	return &implCoreimageBuilder{
		f: filter.New("coreimage", 1, opts...),
	}
}

type implCoreimageBuilder struct {
	f filter.Filter
}

func (coreimageBuilder *implCoreimageBuilder) String() string {
	return coreimageBuilder.f.String()
}

func (coreimageBuilder *implCoreimageBuilder) Outputs() int {
	return coreimageBuilder.f.Outputs()
}

func (coreimageBuilder *implCoreimageBuilder) With(key string, value expr.Expr) filter.Filter {
	return coreimageBuilder.withOption(key, value)
}

func (coreimageBuilder *implCoreimageBuilder) withOption(key string, value expr.Expr) CoreimageBuilder {
	bCopy := *coreimageBuilder
	bCopy.f = coreimageBuilder.f.With(key, value)
	return &bCopy
}

func (coreimageBuilder *implCoreimageBuilder) ListFilters(listFilters bool) CoreimageBuilder {
	return coreimageBuilder.withOption("list_filters", expr.Bool(listFilters))
}

func (coreimageBuilder *implCoreimageBuilder) ListGenerators(listGenerators bool) CoreimageBuilder {
	return coreimageBuilder.withOption("list_generators", expr.Bool(listGenerators))
}

func (coreimageBuilder *implCoreimageBuilder) Filter(filter string) CoreimageBuilder {
	return coreimageBuilder.withOption("filter", expr.String(filter))
}

func (coreimageBuilder *implCoreimageBuilder) OutputRect(outputRect string) CoreimageBuilder {
	return coreimageBuilder.withOption("output_rect", expr.String(outputRect))
}
