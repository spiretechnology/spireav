// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// Ssim360Builder Calculate the SSIM between two 360 video streams.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#ssim360
type Ssim360Builder interface {
	filter.Filter
	// StatsFile Set file where to store per-frame difference information.
	StatsFile(statsFile string) Ssim360Builder
	// F Set file where to store per-frame difference information.
	F(f string) Ssim360Builder
	// ComputeChroma Specifies if non-luma channels must be computed (from 0 to 1) (default 1).
	ComputeChroma(computeChroma int) Ssim360Builder
	// FrameSkipRatio Specifies the number of frames to be skipped from evaluation, for every evaluated frame (from 0 to 1e+06) (default 0).
	FrameSkipRatio(frameSkipRatio int) Ssim360Builder
	// RefProjection projection of the reference video (from 0 to 4) (default e).
	RefProjection(refProjection int) Ssim360Builder
	// MainProjection projection of the main video (from 0 to 5) (default 5).
	MainProjection(mainProjection int) Ssim360Builder
	// RefStereo stereo format of the reference video (from 0 to 2) (default mono).
	RefStereo(refStereo int) Ssim360Builder
	// MainStereo stereo format of main video (from 0 to 3) (default 3).
	MainStereo(mainStereo int) Ssim360Builder
	// RefPad Expansion (padding) coefficient for each cube face of the reference video (from 0 to 10) (default 0).
	RefPad(refPad float32) Ssim360Builder
	// MainPad Expansion (padding) coeffiecient for each cube face of the main video (from 0 to 10) (default 0).
	MainPad(mainPad float32) Ssim360Builder
	// UseTape Specifies if the tape based SSIM 360 algorithm must be used independent of the input video types (from 0 to 1) (default 0).
	UseTape(useTape int) Ssim360Builder
	// HeatmapStr Heatmap data for view-based evaluation. For heatmap file format, please refer to EntSphericalVideoHeatmapData..
	HeatmapStr(heatmapStr string) Ssim360Builder
	// DefaultHeatmapWidth Default heatmap dimension. Will be used when dimension is not specified in heatmap data. (from 1 to 4096) (default 32).
	DefaultHeatmapWidth(defaultHeatmapWidth int) Ssim360Builder
	// DefaultHeatmapHeight Default heatmap dimension. Will be used when dimension is not specified in heatmap data. (from 1 to 4096) (default 16).
	DefaultHeatmapHeight(defaultHeatmapHeight int) Ssim360Builder
	// EofAction Action to take when encountering EOF from secondary input  (from 0 to 2) (default repeat).
	EofAction(eofAction int) Ssim360Builder
	// Shortest force termination when the shortest input terminates (default false).
	Shortest(shortest bool) Ssim360Builder
	// Repeatlast extend last frame of secondary streams beyond EOF (default true).
	Repeatlast(repeatlast bool) Ssim360Builder
	// TsSyncMode How strictly to sync streams based on secondary input timestamps (from 0 to 1) (default default).
	TsSyncMode(tsSyncMode int) Ssim360Builder
}

// Ssim360 creates a new Ssim360Builder to configure the "ssim360" filter.
func Ssim360(opts ...filter.Option) Ssim360Builder {
	return &implSsim360Builder{
		f: filter.New("ssim360", 1, opts...),
	}
}

type implSsim360Builder struct {
	f filter.Filter
}

func (ssim360Builder *implSsim360Builder) String() string {
	return ssim360Builder.f.String()
}

func (ssim360Builder *implSsim360Builder) Outputs() int {
	return ssim360Builder.f.Outputs()
}

func (ssim360Builder *implSsim360Builder) With(key string, value expr.Expr) filter.Filter {
	return ssim360Builder.withOption(key, value)
}

func (ssim360Builder *implSsim360Builder) withOption(key string, value expr.Expr) Ssim360Builder {
	bCopy := *ssim360Builder
	bCopy.f = ssim360Builder.f.With(key, value)
	return &bCopy
}

func (ssim360Builder *implSsim360Builder) StatsFile(statsFile string) Ssim360Builder {
	return ssim360Builder.withOption("stats_file", expr.String(statsFile))
}

func (ssim360Builder *implSsim360Builder) F(f string) Ssim360Builder {
	return ssim360Builder.withOption("f", expr.String(f))
}

func (ssim360Builder *implSsim360Builder) ComputeChroma(computeChroma int) Ssim360Builder {
	return ssim360Builder.withOption("compute_chroma", expr.Int(computeChroma))
}

func (ssim360Builder *implSsim360Builder) FrameSkipRatio(frameSkipRatio int) Ssim360Builder {
	return ssim360Builder.withOption("frame_skip_ratio", expr.Int(frameSkipRatio))
}

func (ssim360Builder *implSsim360Builder) RefProjection(refProjection int) Ssim360Builder {
	return ssim360Builder.withOption("ref_projection", expr.Int(refProjection))
}

func (ssim360Builder *implSsim360Builder) MainProjection(mainProjection int) Ssim360Builder {
	return ssim360Builder.withOption("main_projection", expr.Int(mainProjection))
}

func (ssim360Builder *implSsim360Builder) RefStereo(refStereo int) Ssim360Builder {
	return ssim360Builder.withOption("ref_stereo", expr.Int(refStereo))
}

func (ssim360Builder *implSsim360Builder) MainStereo(mainStereo int) Ssim360Builder {
	return ssim360Builder.withOption("main_stereo", expr.Int(mainStereo))
}

func (ssim360Builder *implSsim360Builder) RefPad(refPad float32) Ssim360Builder {
	return ssim360Builder.withOption("ref_pad", expr.Float(refPad))
}

func (ssim360Builder *implSsim360Builder) MainPad(mainPad float32) Ssim360Builder {
	return ssim360Builder.withOption("main_pad", expr.Float(mainPad))
}

func (ssim360Builder *implSsim360Builder) UseTape(useTape int) Ssim360Builder {
	return ssim360Builder.withOption("use_tape", expr.Int(useTape))
}

func (ssim360Builder *implSsim360Builder) HeatmapStr(heatmapStr string) Ssim360Builder {
	return ssim360Builder.withOption("heatmap_str", expr.String(heatmapStr))
}

func (ssim360Builder *implSsim360Builder) DefaultHeatmapWidth(defaultHeatmapWidth int) Ssim360Builder {
	return ssim360Builder.withOption("default_heatmap_width", expr.Int(defaultHeatmapWidth))
}

func (ssim360Builder *implSsim360Builder) DefaultHeatmapHeight(defaultHeatmapHeight int) Ssim360Builder {
	return ssim360Builder.withOption("default_heatmap_height", expr.Int(defaultHeatmapHeight))
}

func (ssim360Builder *implSsim360Builder) EofAction(eofAction int) Ssim360Builder {
	return ssim360Builder.withOption("eof_action", expr.Int(eofAction))
}

func (ssim360Builder *implSsim360Builder) Shortest(shortest bool) Ssim360Builder {
	return ssim360Builder.withOption("shortest", expr.Bool(shortest))
}

func (ssim360Builder *implSsim360Builder) Repeatlast(repeatlast bool) Ssim360Builder {
	return ssim360Builder.withOption("repeatlast", expr.Bool(repeatlast))
}

func (ssim360Builder *implSsim360Builder) TsSyncMode(tsSyncMode int) Ssim360Builder {
	return ssim360Builder.withOption("ts_sync_mode", expr.Int(tsSyncMode))
}
