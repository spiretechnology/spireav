// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// SidedataBuilder Manipulate video frame side data.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#sidedata
type SidedataBuilder interface {
	filter.Filter
	// Mode set a mode of operation (from 0 to 1) (default select).
	Mode(mode int) SidedataBuilder
	// Type set side data type (from -1 to INT_MAX) (default -1).
	Type(typ int) SidedataBuilder
	// Enable expression to enable or disable the filter.
	Enable(enable expr.Expr) SidedataBuilder
}

// Sidedata creates a new SidedataBuilder to configure the "sidedata" filter.
func Sidedata(opts ...filter.Option) SidedataBuilder {
	return &implSidedataBuilder{
		f: filter.New("sidedata", 1, opts...),
	}
}

type implSidedataBuilder struct {
	f filter.Filter
}

func (sidedataBuilder *implSidedataBuilder) String() string {
	return sidedataBuilder.f.String()
}

func (sidedataBuilder *implSidedataBuilder) Outputs() int {
	return sidedataBuilder.f.Outputs()
}

func (sidedataBuilder *implSidedataBuilder) With(key string, value expr.Expr) filter.Filter {
	return sidedataBuilder.withOption(key, value)
}

func (sidedataBuilder *implSidedataBuilder) withOption(key string, value expr.Expr) SidedataBuilder {
	bCopy := *sidedataBuilder
	bCopy.f = sidedataBuilder.f.With(key, value)
	return &bCopy
}

func (sidedataBuilder *implSidedataBuilder) Mode(mode int) SidedataBuilder {
	return sidedataBuilder.withOption("mode", expr.Int(mode))
}

func (sidedataBuilder *implSidedataBuilder) Type(typ int) SidedataBuilder {
	return sidedataBuilder.withOption("type", expr.Int(typ))
}

func (sidedataBuilder *implSidedataBuilder) Enable(enable expr.Expr) SidedataBuilder {
	return sidedataBuilder.withOption("enable", enable)
}
