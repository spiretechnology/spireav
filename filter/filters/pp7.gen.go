// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// Pp7Builder Apply Postprocessing 7 filter.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#pp7
type Pp7Builder interface {
	filter.Filter
	// Qp force a constant quantizer parameter (from 0 to 64) (default 0).
	Qp(qp int) Pp7Builder
	// Mode set thresholding mode (from 0 to 2) (default medium).
	Mode(mode int) Pp7Builder
}

// Pp7 creates a new Pp7Builder to configure the "pp7" filter.
func Pp7(opts ...filter.Option) Pp7Builder {
	return &implPp7Builder{
		f: filter.New("pp7", 1, opts...),
	}
}

type implPp7Builder struct {
	f filter.Filter
}

func (pp7Builder *implPp7Builder) String() string {
	return pp7Builder.f.String()
}

func (pp7Builder *implPp7Builder) Outputs() int {
	return pp7Builder.f.Outputs()
}

func (pp7Builder *implPp7Builder) With(key string, value expr.Expr) filter.Filter {
	return pp7Builder.withOption(key, value)
}

func (pp7Builder *implPp7Builder) withOption(key string, value expr.Expr) Pp7Builder {
	bCopy := *pp7Builder
	bCopy.f = pp7Builder.f.With(key, value)
	return &bCopy
}

func (pp7Builder *implPp7Builder) Qp(qp int) Pp7Builder {
	return pp7Builder.withOption("qp", expr.Int(qp))
}

func (pp7Builder *implPp7Builder) Mode(mode int) Pp7Builder {
	return pp7Builder.withOption("mode", expr.Int(mode))
}
