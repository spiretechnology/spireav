// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// MinterpolateBuilder Frame rate conversion using Motion Interpolation.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#minterpolate
type MinterpolateBuilder interface {
	filter.Filter
	// Fps output's frame rate (default "60").
	Fps(fps expr.Rational) MinterpolateBuilder
	// MiMode motion interpolation mode (from 0 to 2) (default mci).
	MiMode(miMode int) MinterpolateBuilder
	// McMode motion compensation mode (from 0 to 1) (default obmc).
	McMode(mcMode int) MinterpolateBuilder
	// MeMode motion estimation mode (from 0 to 1) (default bilat).
	MeMode(meMode int) MinterpolateBuilder
	// Me motion estimation method (from 1 to 9) (default epzs).
	Me(me int) MinterpolateBuilder
	// MbSize macroblock size (from 4 to 16) (default 16).
	MbSize(mbSize int) MinterpolateBuilder
	// SearchParam search parameter (from 4 to INT_MAX) (default 32).
	SearchParam(searchParam int) MinterpolateBuilder
	// Vsbmc variable-size block motion compensation (from 0 to 1) (default 0).
	Vsbmc(vsbmc int) MinterpolateBuilder
	// Scd scene change detection method (from 0 to 1) (default fdiff).
	Scd(scd int) MinterpolateBuilder
	// ScdThreshold scene change threshold (from 0 to 100) (default 10).
	ScdThreshold(scdThreshold float64) MinterpolateBuilder
}

// Minterpolate creates a new MinterpolateBuilder to configure the "minterpolate" filter.
func Minterpolate(opts ...filter.Option) MinterpolateBuilder {
	return &implMinterpolateBuilder{
		f: filter.New("minterpolate", 1, opts...),
	}
}

type implMinterpolateBuilder struct {
	f filter.Filter
}

func (minterpolateBuilder *implMinterpolateBuilder) String() string {
	return minterpolateBuilder.f.String()
}

func (minterpolateBuilder *implMinterpolateBuilder) Outputs() int {
	return minterpolateBuilder.f.Outputs()
}

func (minterpolateBuilder *implMinterpolateBuilder) With(key string, value expr.Expr) filter.Filter {
	return minterpolateBuilder.withOption(key, value)
}

func (minterpolateBuilder *implMinterpolateBuilder) withOption(key string, value expr.Expr) MinterpolateBuilder {
	bCopy := *minterpolateBuilder
	bCopy.f = minterpolateBuilder.f.With(key, value)
	return &bCopy
}

func (minterpolateBuilder *implMinterpolateBuilder) Fps(fps expr.Rational) MinterpolateBuilder {
	return minterpolateBuilder.withOption("fps", fps)
}

func (minterpolateBuilder *implMinterpolateBuilder) MiMode(miMode int) MinterpolateBuilder {
	return minterpolateBuilder.withOption("mi_mode", expr.Int(miMode))
}

func (minterpolateBuilder *implMinterpolateBuilder) McMode(mcMode int) MinterpolateBuilder {
	return minterpolateBuilder.withOption("mc_mode", expr.Int(mcMode))
}

func (minterpolateBuilder *implMinterpolateBuilder) MeMode(meMode int) MinterpolateBuilder {
	return minterpolateBuilder.withOption("me_mode", expr.Int(meMode))
}

func (minterpolateBuilder *implMinterpolateBuilder) Me(me int) MinterpolateBuilder {
	return minterpolateBuilder.withOption("me", expr.Int(me))
}

func (minterpolateBuilder *implMinterpolateBuilder) MbSize(mbSize int) MinterpolateBuilder {
	return minterpolateBuilder.withOption("mb_size", expr.Int(mbSize))
}

func (minterpolateBuilder *implMinterpolateBuilder) SearchParam(searchParam int) MinterpolateBuilder {
	return minterpolateBuilder.withOption("search_param", expr.Int(searchParam))
}

func (minterpolateBuilder *implMinterpolateBuilder) Vsbmc(vsbmc int) MinterpolateBuilder {
	return minterpolateBuilder.withOption("vsbmc", expr.Int(vsbmc))
}

func (minterpolateBuilder *implMinterpolateBuilder) Scd(scd int) MinterpolateBuilder {
	return minterpolateBuilder.withOption("scd", expr.Int(scd))
}

func (minterpolateBuilder *implMinterpolateBuilder) ScdThreshold(scdThreshold float64) MinterpolateBuilder {
	return minterpolateBuilder.withOption("scd_threshold", expr.Double(scdThreshold))
}
