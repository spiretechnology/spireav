// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// IdetBuilder Interlace detect Filter.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#idet
type IdetBuilder interface {
	filter.Filter
	// IntlThres set interlacing threshold (from -1 to FLT_MAX) (default 1.04).
	IntlThres(intlThres float32) IdetBuilder
	// ProgThres set progressive threshold (from -1 to FLT_MAX) (default 1.5).
	ProgThres(progThres float32) IdetBuilder
	// RepThres set repeat threshold (from -1 to FLT_MAX) (default 3).
	RepThres(repThres float32) IdetBuilder
	// HalfLife half life of cumulative statistics (from -1 to INT_MAX) (default 0).
	HalfLife(halfLife float32) IdetBuilder
	// AnalyzeInterlacedFlag set number of frames to use to determine if the interlace flag is accurate (from 0 to INT_MAX) (default 0).
	AnalyzeInterlacedFlag(analyzeInterlacedFlag int) IdetBuilder
}

// Idet creates a new IdetBuilder to configure the "idet" filter.
func Idet(opts ...filter.Option) IdetBuilder {
	return &implIdetBuilder{
		f: filter.New("idet", 1, opts...),
	}
}

type implIdetBuilder struct {
	f filter.Filter
}

func (idetBuilder *implIdetBuilder) String() string {
	return idetBuilder.f.String()
}

func (idetBuilder *implIdetBuilder) Outputs() int {
	return idetBuilder.f.Outputs()
}

func (idetBuilder *implIdetBuilder) With(key string, value expr.Expr) filter.Filter {
	return idetBuilder.withOption(key, value)
}

func (idetBuilder *implIdetBuilder) withOption(key string, value expr.Expr) IdetBuilder {
	bCopy := *idetBuilder
	bCopy.f = idetBuilder.f.With(key, value)
	return &bCopy
}

func (idetBuilder *implIdetBuilder) IntlThres(intlThres float32) IdetBuilder {
	return idetBuilder.withOption("intl_thres", expr.Float(intlThres))
}

func (idetBuilder *implIdetBuilder) ProgThres(progThres float32) IdetBuilder {
	return idetBuilder.withOption("prog_thres", expr.Float(progThres))
}

func (idetBuilder *implIdetBuilder) RepThres(repThres float32) IdetBuilder {
	return idetBuilder.withOption("rep_thres", expr.Float(repThres))
}

func (idetBuilder *implIdetBuilder) HalfLife(halfLife float32) IdetBuilder {
	return idetBuilder.withOption("half_life", expr.Float(halfLife))
}

func (idetBuilder *implIdetBuilder) AnalyzeInterlacedFlag(analyzeInterlacedFlag int) IdetBuilder {
	return idetBuilder.withOption("analyze_interlaced_flag", expr.Int(analyzeInterlacedFlag))
}
