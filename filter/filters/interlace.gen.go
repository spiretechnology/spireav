// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// InterlaceBuilder Convert progressive video into interlaced.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#interlace
type InterlaceBuilder interface {
	filter.Filter
	// Scan scanning mode (from 0 to 1) (default tff).
	Scan(scan int) InterlaceBuilder
	// Lowpass set vertical low-pass filter (from 0 to 2) (default linear).
	Lowpass(lowpass int) InterlaceBuilder
}

// Interlace creates a new InterlaceBuilder to configure the "interlace" filter.
func Interlace(opts ...filter.Option) InterlaceBuilder {
	return &implInterlaceBuilder{
		f: filter.New("interlace", 1, opts...),
	}
}

type implInterlaceBuilder struct {
	f filter.Filter
}

func (interlaceBuilder *implInterlaceBuilder) String() string {
	return interlaceBuilder.f.String()
}

func (interlaceBuilder *implInterlaceBuilder) Outputs() int {
	return interlaceBuilder.f.Outputs()
}

func (interlaceBuilder *implInterlaceBuilder) With(key string, value expr.Expr) filter.Filter {
	return interlaceBuilder.withOption(key, value)
}

func (interlaceBuilder *implInterlaceBuilder) withOption(key string, value expr.Expr) InterlaceBuilder {
	bCopy := *interlaceBuilder
	bCopy.f = interlaceBuilder.f.With(key, value)
	return &bCopy
}

func (interlaceBuilder *implInterlaceBuilder) Scan(scan int) InterlaceBuilder {
	return interlaceBuilder.withOption("scan", expr.Int(scan))
}

func (interlaceBuilder *implInterlaceBuilder) Lowpass(lowpass int) InterlaceBuilder {
	return interlaceBuilder.withOption("lowpass", expr.Int(lowpass))
}
