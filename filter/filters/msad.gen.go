// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// MsadBuilder Calculate the MSAD between two video streams.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#msad
type MsadBuilder interface {
	filter.Filter
	// EofAction Action to take when encountering EOF from secondary input  (from 0 to 2) (default repeat).
	EofAction(eofAction int) MsadBuilder
	// Shortest force termination when the shortest input terminates (default false).
	Shortest(shortest bool) MsadBuilder
	// Repeatlast extend last frame of secondary streams beyond EOF (default true).
	Repeatlast(repeatlast bool) MsadBuilder
	// TsSyncMode How strictly to sync streams based on secondary input timestamps (from 0 to 1) (default default).
	TsSyncMode(tsSyncMode int) MsadBuilder
}

// Msad creates a new MsadBuilder to configure the "msad" filter.
func Msad(opts ...filter.Option) MsadBuilder {
	return &implMsadBuilder{
		f: filter.New("msad", 1, opts...),
	}
}

type implMsadBuilder struct {
	f filter.Filter
}

func (msadBuilder *implMsadBuilder) String() string {
	return msadBuilder.f.String()
}

func (msadBuilder *implMsadBuilder) Outputs() int {
	return msadBuilder.f.Outputs()
}

func (msadBuilder *implMsadBuilder) With(key string, value expr.Expr) filter.Filter {
	return msadBuilder.withOption(key, value)
}

func (msadBuilder *implMsadBuilder) withOption(key string, value expr.Expr) MsadBuilder {
	bCopy := *msadBuilder
	bCopy.f = msadBuilder.f.With(key, value)
	return &bCopy
}

func (msadBuilder *implMsadBuilder) EofAction(eofAction int) MsadBuilder {
	return msadBuilder.withOption("eof_action", expr.Int(eofAction))
}

func (msadBuilder *implMsadBuilder) Shortest(shortest bool) MsadBuilder {
	return msadBuilder.withOption("shortest", expr.Bool(shortest))
}

func (msadBuilder *implMsadBuilder) Repeatlast(repeatlast bool) MsadBuilder {
	return msadBuilder.withOption("repeatlast", expr.Bool(repeatlast))
}

func (msadBuilder *implMsadBuilder) TsSyncMode(tsSyncMode int) MsadBuilder {
	return msadBuilder.withOption("ts_sync_mode", expr.Int(tsSyncMode))
}
