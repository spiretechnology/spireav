// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// SendcmdBuilder Send commands to filters.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#sendcmd
type SendcmdBuilder interface {
	filter.Filter
	// Commands set commands.
	Commands(commands string) SendcmdBuilder
	// C set commands.
	C(c string) SendcmdBuilder
	// Filename set commands file.
	Filename(filename string) SendcmdBuilder
	// F set commands file.
	F(f string) SendcmdBuilder
}

// Sendcmd creates a new SendcmdBuilder to configure the "sendcmd" filter.
func Sendcmd(opts ...filter.Option) SendcmdBuilder {
	return &implSendcmdBuilder{
		f: filter.New("sendcmd", 1, opts...),
	}
}

type implSendcmdBuilder struct {
	f filter.Filter
}

func (sendcmdBuilder *implSendcmdBuilder) String() string {
	return sendcmdBuilder.f.String()
}

func (sendcmdBuilder *implSendcmdBuilder) Outputs() int {
	return sendcmdBuilder.f.Outputs()
}

func (sendcmdBuilder *implSendcmdBuilder) With(key string, value expr.Expr) filter.Filter {
	return sendcmdBuilder.withOption(key, value)
}

func (sendcmdBuilder *implSendcmdBuilder) withOption(key string, value expr.Expr) SendcmdBuilder {
	bCopy := *sendcmdBuilder
	bCopy.f = sendcmdBuilder.f.With(key, value)
	return &bCopy
}

func (sendcmdBuilder *implSendcmdBuilder) Commands(commands string) SendcmdBuilder {
	return sendcmdBuilder.withOption("commands", expr.String(commands))
}

func (sendcmdBuilder *implSendcmdBuilder) C(c string) SendcmdBuilder {
	return sendcmdBuilder.withOption("c", expr.String(c))
}

func (sendcmdBuilder *implSendcmdBuilder) Filename(filename string) SendcmdBuilder {
	return sendcmdBuilder.withOption("filename", expr.String(filename))
}

func (sendcmdBuilder *implSendcmdBuilder) F(f string) SendcmdBuilder {
	return sendcmdBuilder.withOption("f", expr.String(f))
}
