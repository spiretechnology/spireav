// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// AmergeBuilder Merge two or more audio streams into a single multi-channel stream.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#amerge
type AmergeBuilder interface {
	filter.Filter
	// Inputs specify the number of inputs (from 1 to 64) (default 2).
	Inputs(inputs int) AmergeBuilder
}

// Amerge creates a new AmergeBuilder to configure the "amerge" filter.
func Amerge(opts ...filter.Option) AmergeBuilder {
	return &implAmergeBuilder{
		f: filter.New("amerge", 1, opts...),
	}
}

type implAmergeBuilder struct {
	f filter.Filter
}

func (amergeBuilder *implAmergeBuilder) String() string {
	return amergeBuilder.f.String()
}

func (amergeBuilder *implAmergeBuilder) Outputs() int {
	return amergeBuilder.f.Outputs()
}

func (amergeBuilder *implAmergeBuilder) With(key string, value expr.Expr) filter.Filter {
	return amergeBuilder.withOption(key, value)
}

func (amergeBuilder *implAmergeBuilder) withOption(key string, value expr.Expr) AmergeBuilder {
	bCopy := *amergeBuilder
	bCopy.f = amergeBuilder.f.With(key, value)
	return &bCopy
}

func (amergeBuilder *implAmergeBuilder) Inputs(inputs int) AmergeBuilder {
	return amergeBuilder.withOption("inputs", expr.Int(inputs))
}
