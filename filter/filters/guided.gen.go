// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// GuidedBuilder Apply Guided filter.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#guided
type GuidedBuilder interface {
	filter.Filter
	// Radius set the box radius (from 1 to 20) (default 3).
	Radius(radius int) GuidedBuilder
	// RadiusExpr set the box radius (from 1 to 20) (default 3).
	RadiusExpr(radius expr.Expr) GuidedBuilder
	// Eps set the regularization parameter (with square) (from 0 to 1) (default 0.01).
	Eps(eps float32) GuidedBuilder
	// EpsExpr set the regularization parameter (with square) (from 0 to 1) (default 0.01).
	EpsExpr(eps expr.Expr) GuidedBuilder
	// Mode set filtering mode (0: basic mode; 1: fast mode) (from 0 to 1) (default basic).
	Mode(mode int) GuidedBuilder
	// ModeExpr set filtering mode (0: basic mode; 1: fast mode) (from 0 to 1) (default basic).
	ModeExpr(mode expr.Expr) GuidedBuilder
	// Sub subsampling ratio for fast mode (from 2 to 64) (default 4).
	Sub(sub int) GuidedBuilder
	// SubExpr subsampling ratio for fast mode (from 2 to 64) (default 4).
	SubExpr(sub expr.Expr) GuidedBuilder
	// Guidance set guidance mode (0: off mode; 1: on mode) (from 0 to 1) (default off).
	Guidance(guidance int) GuidedBuilder
	// Planes set planes to filter (from 0 to 15) (default 1).
	Planes(planes int) GuidedBuilder
	// PlanesExpr set planes to filter (from 0 to 15) (default 1).
	PlanesExpr(planes expr.Expr) GuidedBuilder
	// Enable expression to enable or disable the filter.
	Enable(enable expr.Expr) GuidedBuilder
}

// Guided creates a new GuidedBuilder to configure the "guided" filter.
func Guided(opts ...filter.Option) GuidedBuilder {
	return &implGuidedBuilder{
		f: filter.New("guided", 1, opts...),
	}
}

type implGuidedBuilder struct {
	f filter.Filter
}

func (guidedBuilder *implGuidedBuilder) String() string {
	return guidedBuilder.f.String()
}

func (guidedBuilder *implGuidedBuilder) Outputs() int {
	return guidedBuilder.f.Outputs()
}

func (guidedBuilder *implGuidedBuilder) With(key string, value expr.Expr) filter.Filter {
	return guidedBuilder.withOption(key, value)
}

func (guidedBuilder *implGuidedBuilder) withOption(key string, value expr.Expr) GuidedBuilder {
	bCopy := *guidedBuilder
	bCopy.f = guidedBuilder.f.With(key, value)
	return &bCopy
}

func (guidedBuilder *implGuidedBuilder) Radius(radius int) GuidedBuilder {
	return guidedBuilder.withOption("radius", expr.Int(radius))
}

func (guidedBuilder *implGuidedBuilder) RadiusExpr(radius expr.Expr) GuidedBuilder {
	return guidedBuilder.withOption("radius", radius)
}

func (guidedBuilder *implGuidedBuilder) Eps(eps float32) GuidedBuilder {
	return guidedBuilder.withOption("eps", expr.Float(eps))
}

func (guidedBuilder *implGuidedBuilder) EpsExpr(eps expr.Expr) GuidedBuilder {
	return guidedBuilder.withOption("eps", eps)
}

func (guidedBuilder *implGuidedBuilder) Mode(mode int) GuidedBuilder {
	return guidedBuilder.withOption("mode", expr.Int(mode))
}

func (guidedBuilder *implGuidedBuilder) ModeExpr(mode expr.Expr) GuidedBuilder {
	return guidedBuilder.withOption("mode", mode)
}

func (guidedBuilder *implGuidedBuilder) Sub(sub int) GuidedBuilder {
	return guidedBuilder.withOption("sub", expr.Int(sub))
}

func (guidedBuilder *implGuidedBuilder) SubExpr(sub expr.Expr) GuidedBuilder {
	return guidedBuilder.withOption("sub", sub)
}

func (guidedBuilder *implGuidedBuilder) Guidance(guidance int) GuidedBuilder {
	return guidedBuilder.withOption("guidance", expr.Int(guidance))
}

func (guidedBuilder *implGuidedBuilder) Planes(planes int) GuidedBuilder {
	return guidedBuilder.withOption("planes", expr.Int(planes))
}

func (guidedBuilder *implGuidedBuilder) PlanesExpr(planes expr.Expr) GuidedBuilder {
	return guidedBuilder.withOption("planes", planes)
}

func (guidedBuilder *implGuidedBuilder) Enable(enable expr.Expr) GuidedBuilder {
	return guidedBuilder.withOption("enable", enable)
}
