// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// TransposeBuilder Transpose input video.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#transpose
type TransposeBuilder interface {
	filter.Filter
	// Dir set transpose direction (from 0 to 7) (default cclock_flip).
	Dir(dir int) TransposeBuilder
	// Passthrough do not apply transposition if the input matches the specified geometry (from 0 to INT_MAX) (default none).
	Passthrough(passthrough int) TransposeBuilder
}

// Transpose creates a new TransposeBuilder to configure the "transpose" filter.
func Transpose(opts ...filter.Option) TransposeBuilder {
	return &implTransposeBuilder{
		f: filter.New("transpose", 1, opts...),
	}
}

type implTransposeBuilder struct {
	f filter.Filter
}

func (transposeBuilder *implTransposeBuilder) String() string {
	return transposeBuilder.f.String()
}

func (transposeBuilder *implTransposeBuilder) Outputs() int {
	return transposeBuilder.f.Outputs()
}

func (transposeBuilder *implTransposeBuilder) With(key string, value expr.Expr) filter.Filter {
	return transposeBuilder.withOption(key, value)
}

func (transposeBuilder *implTransposeBuilder) withOption(key string, value expr.Expr) TransposeBuilder {
	bCopy := *transposeBuilder
	bCopy.f = transposeBuilder.f.With(key, value)
	return &bCopy
}

func (transposeBuilder *implTransposeBuilder) Dir(dir int) TransposeBuilder {
	return transposeBuilder.withOption("dir", expr.Int(dir))
}

func (transposeBuilder *implTransposeBuilder) Passthrough(passthrough int) TransposeBuilder {
	return transposeBuilder.withOption("passthrough", expr.Int(passthrough))
}
