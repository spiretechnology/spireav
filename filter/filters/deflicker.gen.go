// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// DeflickerBuilder Remove temporal frame luminance variations.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#deflicker
type DeflickerBuilder interface {
	filter.Filter
	// Size set how many frames to use (from 2 to 129) (default 5).
	Size(size int) DeflickerBuilder
	// S set how many frames to use (from 2 to 129) (default 5).
	S(s int) DeflickerBuilder
	// Mode set how to smooth luminance (from 0 to 6) (default am).
	Mode(mode int) DeflickerBuilder
	// M set how to smooth luminance (from 0 to 6) (default am).
	M(m int) DeflickerBuilder
	// Bypass leave frames unchanged (default false).
	Bypass(bypass bool) DeflickerBuilder
}

// Deflicker creates a new DeflickerBuilder to configure the "deflicker" filter.
func Deflicker(opts ...filter.Option) DeflickerBuilder {
	return &implDeflickerBuilder{
		f: filter.New("deflicker", 1, opts...),
	}
}

type implDeflickerBuilder struct {
	f filter.Filter
}

func (deflickerBuilder *implDeflickerBuilder) String() string {
	return deflickerBuilder.f.String()
}

func (deflickerBuilder *implDeflickerBuilder) Outputs() int {
	return deflickerBuilder.f.Outputs()
}

func (deflickerBuilder *implDeflickerBuilder) With(key string, value expr.Expr) filter.Filter {
	return deflickerBuilder.withOption(key, value)
}

func (deflickerBuilder *implDeflickerBuilder) withOption(key string, value expr.Expr) DeflickerBuilder {
	bCopy := *deflickerBuilder
	bCopy.f = deflickerBuilder.f.With(key, value)
	return &bCopy
}

func (deflickerBuilder *implDeflickerBuilder) Size(size int) DeflickerBuilder {
	return deflickerBuilder.withOption("size", expr.Int(size))
}

func (deflickerBuilder *implDeflickerBuilder) S(s int) DeflickerBuilder {
	return deflickerBuilder.withOption("s", expr.Int(s))
}

func (deflickerBuilder *implDeflickerBuilder) Mode(mode int) DeflickerBuilder {
	return deflickerBuilder.withOption("mode", expr.Int(mode))
}

func (deflickerBuilder *implDeflickerBuilder) M(m int) DeflickerBuilder {
	return deflickerBuilder.withOption("m", expr.Int(m))
}

func (deflickerBuilder *implDeflickerBuilder) Bypass(bypass bool) DeflickerBuilder {
	return deflickerBuilder.withOption("bypass", expr.Bool(bypass))
}
