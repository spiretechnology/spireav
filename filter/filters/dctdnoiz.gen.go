// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// DctdnoizBuilder Denoise frames using 2D DCT.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#dctdnoiz
type DctdnoizBuilder interface {
	filter.Filter
	// Sigma set noise sigma constant (from 0 to 999) (default 0).
	Sigma(sigma float32) DctdnoizBuilder
	// S set noise sigma constant (from 0 to 999) (default 0).
	S(s float32) DctdnoizBuilder
	// Overlap set number of block overlapping pixels (from -1 to 15) (default -1).
	Overlap(overlap int) DctdnoizBuilder
	// Expr set coefficient factor expression.
	Expr(expression string) DctdnoizBuilder
	// E set coefficient factor expression.
	E(e string) DctdnoizBuilder
	// N set the block size, expressed in bits (from 3 to 4) (default 3).
	N(n int) DctdnoizBuilder
}

// Dctdnoiz creates a new DctdnoizBuilder to configure the "dctdnoiz" filter.
func Dctdnoiz(opts ...filter.Option) DctdnoizBuilder {
	return &implDctdnoizBuilder{
		f: filter.New("dctdnoiz", 1, opts...),
	}
}

type implDctdnoizBuilder struct {
	f filter.Filter
}

func (dctdnoizBuilder *implDctdnoizBuilder) String() string {
	return dctdnoizBuilder.f.String()
}

func (dctdnoizBuilder *implDctdnoizBuilder) Outputs() int {
	return dctdnoizBuilder.f.Outputs()
}

func (dctdnoizBuilder *implDctdnoizBuilder) With(key string, value expr.Expr) filter.Filter {
	return dctdnoizBuilder.withOption(key, value)
}

func (dctdnoizBuilder *implDctdnoizBuilder) withOption(key string, value expr.Expr) DctdnoizBuilder {
	bCopy := *dctdnoizBuilder
	bCopy.f = dctdnoizBuilder.f.With(key, value)
	return &bCopy
}

func (dctdnoizBuilder *implDctdnoizBuilder) Sigma(sigma float32) DctdnoizBuilder {
	return dctdnoizBuilder.withOption("sigma", expr.Float(sigma))
}

func (dctdnoizBuilder *implDctdnoizBuilder) S(s float32) DctdnoizBuilder {
	return dctdnoizBuilder.withOption("s", expr.Float(s))
}

func (dctdnoizBuilder *implDctdnoizBuilder) Overlap(overlap int) DctdnoizBuilder {
	return dctdnoizBuilder.withOption("overlap", expr.Int(overlap))
}

func (dctdnoizBuilder *implDctdnoizBuilder) Expr(expression string) DctdnoizBuilder {
	return dctdnoizBuilder.withOption("expr", expr.String(expression))
}

func (dctdnoizBuilder *implDctdnoizBuilder) E(e string) DctdnoizBuilder {
	return dctdnoizBuilder.withOption("e", expr.String(e))
}

func (dctdnoizBuilder *implDctdnoizBuilder) N(n int) DctdnoizBuilder {
	return dctdnoizBuilder.withOption("n", expr.Int(n))
}
