// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// PremultiplyBuilder PreMultiply first stream with first plane of second stream.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#premultiply
type PremultiplyBuilder interface {
	filter.Filter
	// Planes set planes (from 0 to 15) (default 15).
	Planes(planes int) PremultiplyBuilder
	// Inplace enable inplace mode (default false).
	Inplace(inplace bool) PremultiplyBuilder
	// Enable expression to enable or disable the filter.
	Enable(enable expr.Expr) PremultiplyBuilder
}

// Premultiply creates a new PremultiplyBuilder to configure the "premultiply" filter.
func Premultiply(opts ...filter.Option) PremultiplyBuilder {
	return &implPremultiplyBuilder{
		f: filter.New("premultiply", 1, opts...),
	}
}

type implPremultiplyBuilder struct {
	f filter.Filter
}

func (premultiplyBuilder *implPremultiplyBuilder) String() string {
	return premultiplyBuilder.f.String()
}

func (premultiplyBuilder *implPremultiplyBuilder) Outputs() int {
	return premultiplyBuilder.f.Outputs()
}

func (premultiplyBuilder *implPremultiplyBuilder) With(key string, value expr.Expr) filter.Filter {
	return premultiplyBuilder.withOption(key, value)
}

func (premultiplyBuilder *implPremultiplyBuilder) withOption(key string, value expr.Expr) PremultiplyBuilder {
	bCopy := *premultiplyBuilder
	bCopy.f = premultiplyBuilder.f.With(key, value)
	return &bCopy
}

func (premultiplyBuilder *implPremultiplyBuilder) Planes(planes int) PremultiplyBuilder {
	return premultiplyBuilder.withOption("planes", expr.Int(planes))
}

func (premultiplyBuilder *implPremultiplyBuilder) Inplace(inplace bool) PremultiplyBuilder {
	return premultiplyBuilder.withOption("inplace", expr.Bool(inplace))
}

func (premultiplyBuilder *implPremultiplyBuilder) Enable(enable expr.Expr) PremultiplyBuilder {
	return premultiplyBuilder.withOption("enable", enable)
}
