// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// StreamselectBuilder Select video streams.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#streamselect
type StreamselectBuilder interface {
	filter.Filter
	// Inputs number of input streams (from 2 to INT_MAX) (default 2).
	Inputs(inputs int) StreamselectBuilder
	// Map input indexes to remap to outputs.
	Map(mapVal string) StreamselectBuilder
	// MapExpr input indexes to remap to outputs.
	MapExpr(mapVal expr.Expr) StreamselectBuilder
}

// Streamselect creates a new StreamselectBuilder to configure the "streamselect" filter.
func Streamselect(outputs int, opts ...filter.Option) StreamselectBuilder {
	f := filter.New("streamselect", outputs, opts...)
	f = f.With("outputs", expr.Int(outputs))
	return &implStreamselectBuilder{f: f}
}

type implStreamselectBuilder struct {
	f filter.Filter
}

func (streamselectBuilder *implStreamselectBuilder) String() string {
	return streamselectBuilder.f.String()
}

func (streamselectBuilder *implStreamselectBuilder) Outputs() int {
	return streamselectBuilder.f.Outputs()
}

func (streamselectBuilder *implStreamselectBuilder) With(key string, value expr.Expr) filter.Filter {
	return streamselectBuilder.withOption(key, value)
}

func (streamselectBuilder *implStreamselectBuilder) withOption(key string, value expr.Expr) StreamselectBuilder {
	bCopy := *streamselectBuilder
	bCopy.f = streamselectBuilder.f.With(key, value)
	return &bCopy
}

func (streamselectBuilder *implStreamselectBuilder) Inputs(inputs int) StreamselectBuilder {
	return streamselectBuilder.withOption("inputs", expr.Int(inputs))
}

func (streamselectBuilder *implStreamselectBuilder) Map(mapVal string) StreamselectBuilder {
	return streamselectBuilder.withOption("map", expr.String(mapVal))
}

func (streamselectBuilder *implStreamselectBuilder) MapExpr(mapVal expr.Expr) StreamselectBuilder {
	return streamselectBuilder.withOption("map", mapVal)
}
