// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// BoxblurBuilder Blur the input.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#boxblur
type BoxblurBuilder interface {
	filter.Filter
	// LumaRadius Radius of the luma blurring box (default "2").
	LumaRadius(lumaRadius string) BoxblurBuilder
	// Lr Radius of the luma blurring box (default "2").
	Lr(lr string) BoxblurBuilder
	// LumaPower How many times should the boxblur be applied to luma (from 0 to INT_MAX) (default 2).
	LumaPower(lumaPower int) BoxblurBuilder
	// Lp How many times should the boxblur be applied to luma (from 0 to INT_MAX) (default 2).
	Lp(lp int) BoxblurBuilder
	// ChromaRadius Radius of the chroma blurring box.
	ChromaRadius(chromaRadius string) BoxblurBuilder
	// Cr Radius of the chroma blurring box.
	Cr(cr string) BoxblurBuilder
	// ChromaPower How many times should the boxblur be applied to chroma (from -1 to INT_MAX) (default -1).
	ChromaPower(chromaPower int) BoxblurBuilder
	// Cp How many times should the boxblur be applied to chroma (from -1 to INT_MAX) (default -1).
	Cp(cp int) BoxblurBuilder
	// AlphaRadius Radius of the alpha blurring box.
	AlphaRadius(alphaRadius string) BoxblurBuilder
	// Ar Radius of the alpha blurring box.
	Ar(ar string) BoxblurBuilder
	// AlphaPower How many times should the boxblur be applied to alpha (from -1 to INT_MAX) (default -1).
	AlphaPower(alphaPower int) BoxblurBuilder
	// Ap How many times should the boxblur be applied to alpha (from -1 to INT_MAX) (default -1).
	Ap(ap int) BoxblurBuilder
	// Enable expression to enable or disable the filter.
	Enable(enable expr.Expr) BoxblurBuilder
}

// Boxblur creates a new BoxblurBuilder to configure the "boxblur" filter.
func Boxblur(opts ...filter.Option) BoxblurBuilder {
	return &implBoxblurBuilder{
		f: filter.New("boxblur", 1, opts...),
	}
}

type implBoxblurBuilder struct {
	f filter.Filter
}

func (boxblurBuilder *implBoxblurBuilder) String() string {
	return boxblurBuilder.f.String()
}

func (boxblurBuilder *implBoxblurBuilder) Outputs() int {
	return boxblurBuilder.f.Outputs()
}

func (boxblurBuilder *implBoxblurBuilder) With(key string, value expr.Expr) filter.Filter {
	return boxblurBuilder.withOption(key, value)
}

func (boxblurBuilder *implBoxblurBuilder) withOption(key string, value expr.Expr) BoxblurBuilder {
	bCopy := *boxblurBuilder
	bCopy.f = boxblurBuilder.f.With(key, value)
	return &bCopy
}

func (boxblurBuilder *implBoxblurBuilder) LumaRadius(lumaRadius string) BoxblurBuilder {
	return boxblurBuilder.withOption("luma_radius", expr.String(lumaRadius))
}

func (boxblurBuilder *implBoxblurBuilder) Lr(lr string) BoxblurBuilder {
	return boxblurBuilder.withOption("lr", expr.String(lr))
}

func (boxblurBuilder *implBoxblurBuilder) LumaPower(lumaPower int) BoxblurBuilder {
	return boxblurBuilder.withOption("luma_power", expr.Int(lumaPower))
}

func (boxblurBuilder *implBoxblurBuilder) Lp(lp int) BoxblurBuilder {
	return boxblurBuilder.withOption("lp", expr.Int(lp))
}

func (boxblurBuilder *implBoxblurBuilder) ChromaRadius(chromaRadius string) BoxblurBuilder {
	return boxblurBuilder.withOption("chroma_radius", expr.String(chromaRadius))
}

func (boxblurBuilder *implBoxblurBuilder) Cr(cr string) BoxblurBuilder {
	return boxblurBuilder.withOption("cr", expr.String(cr))
}

func (boxblurBuilder *implBoxblurBuilder) ChromaPower(chromaPower int) BoxblurBuilder {
	return boxblurBuilder.withOption("chroma_power", expr.Int(chromaPower))
}

func (boxblurBuilder *implBoxblurBuilder) Cp(cp int) BoxblurBuilder {
	return boxblurBuilder.withOption("cp", expr.Int(cp))
}

func (boxblurBuilder *implBoxblurBuilder) AlphaRadius(alphaRadius string) BoxblurBuilder {
	return boxblurBuilder.withOption("alpha_radius", expr.String(alphaRadius))
}

func (boxblurBuilder *implBoxblurBuilder) Ar(ar string) BoxblurBuilder {
	return boxblurBuilder.withOption("ar", expr.String(ar))
}

func (boxblurBuilder *implBoxblurBuilder) AlphaPower(alphaPower int) BoxblurBuilder {
	return boxblurBuilder.withOption("alpha_power", expr.Int(alphaPower))
}

func (boxblurBuilder *implBoxblurBuilder) Ap(ap int) BoxblurBuilder {
	return boxblurBuilder.withOption("ap", expr.Int(ap))
}

func (boxblurBuilder *implBoxblurBuilder) Enable(enable expr.Expr) BoxblurBuilder {
	return boxblurBuilder.withOption("enable", enable)
}
