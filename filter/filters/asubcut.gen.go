// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// AsubcutBuilder Cut subwoofer frequencies.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#asubcut
type AsubcutBuilder interface {
	filter.Filter
	// Cutoff set cutoff frequency (from 2 to 200) (default 20).
	Cutoff(cutoff float64) AsubcutBuilder
	// CutoffExpr set cutoff frequency (from 2 to 200) (default 20).
	CutoffExpr(cutoff expr.Expr) AsubcutBuilder
	// Order set filter order (from 3 to 20) (default 10).
	Order(order int) AsubcutBuilder
	// OrderExpr set filter order (from 3 to 20) (default 10).
	OrderExpr(order expr.Expr) AsubcutBuilder
	// Level set input level (from 0 to 1) (default 1).
	Level(level float64) AsubcutBuilder
	// LevelExpr set input level (from 0 to 1) (default 1).
	LevelExpr(level expr.Expr) AsubcutBuilder
}

// Asubcut creates a new AsubcutBuilder to configure the "asubcut" filter.
func Asubcut(opts ...filter.Option) AsubcutBuilder {
	return &implAsubcutBuilder{
		f: filter.New("asubcut", 1, opts...),
	}
}

type implAsubcutBuilder struct {
	f filter.Filter
}

func (asubcutBuilder *implAsubcutBuilder) String() string {
	return asubcutBuilder.f.String()
}

func (asubcutBuilder *implAsubcutBuilder) Outputs() int {
	return asubcutBuilder.f.Outputs()
}

func (asubcutBuilder *implAsubcutBuilder) With(key string, value expr.Expr) filter.Filter {
	return asubcutBuilder.withOption(key, value)
}

func (asubcutBuilder *implAsubcutBuilder) withOption(key string, value expr.Expr) AsubcutBuilder {
	bCopy := *asubcutBuilder
	bCopy.f = asubcutBuilder.f.With(key, value)
	return &bCopy
}

func (asubcutBuilder *implAsubcutBuilder) Cutoff(cutoff float64) AsubcutBuilder {
	return asubcutBuilder.withOption("cutoff", expr.Double(cutoff))
}

func (asubcutBuilder *implAsubcutBuilder) CutoffExpr(cutoff expr.Expr) AsubcutBuilder {
	return asubcutBuilder.withOption("cutoff", cutoff)
}

func (asubcutBuilder *implAsubcutBuilder) Order(order int) AsubcutBuilder {
	return asubcutBuilder.withOption("order", expr.Int(order))
}

func (asubcutBuilder *implAsubcutBuilder) OrderExpr(order expr.Expr) AsubcutBuilder {
	return asubcutBuilder.withOption("order", order)
}

func (asubcutBuilder *implAsubcutBuilder) Level(level float64) AsubcutBuilder {
	return asubcutBuilder.withOption("level", expr.Double(level))
}

func (asubcutBuilder *implAsubcutBuilder) LevelExpr(level expr.Expr) AsubcutBuilder {
	return asubcutBuilder.withOption("level", level)
}
