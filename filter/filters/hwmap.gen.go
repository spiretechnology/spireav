// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// HwmapBuilder Map hardware frames.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#hwmap
type HwmapBuilder interface {
	filter.Filter
	// Mode Frame mapping mode (default read+write).
	Mode(mode string) HwmapBuilder
	// DeriveDevice Derive a new device of this type.
	DeriveDevice(deriveDevice string) HwmapBuilder
	// Reverse Map in reverse (create and allocate in the sink) (from 0 to 1) (default 0).
	Reverse(reverse int) HwmapBuilder
}

// Hwmap creates a new HwmapBuilder to configure the "hwmap" filter.
func Hwmap(opts ...filter.Option) HwmapBuilder {
	return &implHwmapBuilder{
		f: filter.New("hwmap", 1, opts...),
	}
}

type implHwmapBuilder struct {
	f filter.Filter
}

func (hwmapBuilder *implHwmapBuilder) String() string {
	return hwmapBuilder.f.String()
}

func (hwmapBuilder *implHwmapBuilder) Outputs() int {
	return hwmapBuilder.f.Outputs()
}

func (hwmapBuilder *implHwmapBuilder) With(key string, value expr.Expr) filter.Filter {
	return hwmapBuilder.withOption(key, value)
}

func (hwmapBuilder *implHwmapBuilder) withOption(key string, value expr.Expr) HwmapBuilder {
	bCopy := *hwmapBuilder
	bCopy.f = hwmapBuilder.f.With(key, value)
	return &bCopy
}

func (hwmapBuilder *implHwmapBuilder) Mode(mode string) HwmapBuilder {
	return hwmapBuilder.withOption("mode", expr.String(mode))
}

func (hwmapBuilder *implHwmapBuilder) DeriveDevice(deriveDevice string) HwmapBuilder {
	return hwmapBuilder.withOption("derive_device", expr.String(deriveDevice))
}

func (hwmapBuilder *implHwmapBuilder) Reverse(reverse int) HwmapBuilder {
	return hwmapBuilder.withOption("reverse", expr.Int(reverse))
}
