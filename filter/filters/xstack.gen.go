// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// XstackBuilder Stack video inputs into custom layout.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#xstack
type XstackBuilder interface {
	filter.Filter
	// Inputs set number of inputs (from 2 to INT_MAX) (default 2).
	Inputs(inputs int) XstackBuilder
	// Layout set custom layout.
	Layout(layout string) XstackBuilder
	// Grid set fixed size grid layout.
	Grid(grid expr.Size) XstackBuilder
	// Shortest force termination when the shortest input terminates (default false).
	Shortest(shortest bool) XstackBuilder
	// Fill set the color for unused pixels (default "none").
	Fill(fill string) XstackBuilder
}

// Xstack creates a new XstackBuilder to configure the "xstack" filter.
func Xstack(opts ...filter.Option) XstackBuilder {
	return &implXstackBuilder{
		f: filter.New("xstack", 1, opts...),
	}
}

type implXstackBuilder struct {
	f filter.Filter
}

func (xstackBuilder *implXstackBuilder) String() string {
	return xstackBuilder.f.String()
}

func (xstackBuilder *implXstackBuilder) Outputs() int {
	return xstackBuilder.f.Outputs()
}

func (xstackBuilder *implXstackBuilder) With(key string, value expr.Expr) filter.Filter {
	return xstackBuilder.withOption(key, value)
}

func (xstackBuilder *implXstackBuilder) withOption(key string, value expr.Expr) XstackBuilder {
	bCopy := *xstackBuilder
	bCopy.f = xstackBuilder.f.With(key, value)
	return &bCopy
}

func (xstackBuilder *implXstackBuilder) Inputs(inputs int) XstackBuilder {
	return xstackBuilder.withOption("inputs", expr.Int(inputs))
}

func (xstackBuilder *implXstackBuilder) Layout(layout string) XstackBuilder {
	return xstackBuilder.withOption("layout", expr.String(layout))
}

func (xstackBuilder *implXstackBuilder) Grid(grid expr.Size) XstackBuilder {
	return xstackBuilder.withOption("grid", grid)
}

func (xstackBuilder *implXstackBuilder) Shortest(shortest bool) XstackBuilder {
	return xstackBuilder.withOption("shortest", expr.Bool(shortest))
}

func (xstackBuilder *implXstackBuilder) Fill(fill string) XstackBuilder {
	return xstackBuilder.withOption("fill", expr.String(fill))
}
