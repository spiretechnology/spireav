// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"time"

	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// SilencedetectBuilder Detect silence.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#silencedetect
type SilencedetectBuilder interface {
	filter.Filter
	// N set noise tolerance (from 0 to DBL_MAX) (default 0.001).
	N(n float64) SilencedetectBuilder
	// Noise set noise tolerance (from 0 to DBL_MAX) (default 0.001).
	Noise(noise float64) SilencedetectBuilder
	// D set minimum duration in seconds (default 2).
	D(d time.Duration) SilencedetectBuilder
	// Duration set minimum duration in seconds (default 2).
	Duration(duration time.Duration) SilencedetectBuilder
	// Mono check each channel separately (default false).
	Mono(mono bool) SilencedetectBuilder
	// M check each channel separately (default false).
	M(m bool) SilencedetectBuilder
}

// Silencedetect creates a new SilencedetectBuilder to configure the "silencedetect" filter.
func Silencedetect(opts ...filter.Option) SilencedetectBuilder {
	return &implSilencedetectBuilder{
		f: filter.New("silencedetect", 1, opts...),
	}
}

type implSilencedetectBuilder struct {
	f filter.Filter
}

func (silencedetectBuilder *implSilencedetectBuilder) String() string {
	return silencedetectBuilder.f.String()
}

func (silencedetectBuilder *implSilencedetectBuilder) Outputs() int {
	return silencedetectBuilder.f.Outputs()
}

func (silencedetectBuilder *implSilencedetectBuilder) With(key string, value expr.Expr) filter.Filter {
	return silencedetectBuilder.withOption(key, value)
}

func (silencedetectBuilder *implSilencedetectBuilder) withOption(key string, value expr.Expr) SilencedetectBuilder {
	bCopy := *silencedetectBuilder
	bCopy.f = silencedetectBuilder.f.With(key, value)
	return &bCopy
}

func (silencedetectBuilder *implSilencedetectBuilder) N(n float64) SilencedetectBuilder {
	return silencedetectBuilder.withOption("n", expr.Double(n))
}

func (silencedetectBuilder *implSilencedetectBuilder) Noise(noise float64) SilencedetectBuilder {
	return silencedetectBuilder.withOption("noise", expr.Double(noise))
}

func (silencedetectBuilder *implSilencedetectBuilder) D(d time.Duration) SilencedetectBuilder {
	return silencedetectBuilder.withOption("d", expr.Duration(d))
}

func (silencedetectBuilder *implSilencedetectBuilder) Duration(duration time.Duration) SilencedetectBuilder {
	return silencedetectBuilder.withOption("duration", expr.Duration(duration))
}

func (silencedetectBuilder *implSilencedetectBuilder) Mono(mono bool) SilencedetectBuilder {
	return silencedetectBuilder.withOption("mono", expr.Bool(mono))
}

func (silencedetectBuilder *implSilencedetectBuilder) M(m bool) SilencedetectBuilder {
	return silencedetectBuilder.withOption("m", expr.Bool(m))
}
