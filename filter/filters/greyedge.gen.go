// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// GreyedgeBuilder Estimates scene illumination by grey edge assumption.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#greyedge
type GreyedgeBuilder interface {
	filter.Filter
	// Difford set differentiation order (from 0 to 2) (default 1).
	Difford(difford int) GreyedgeBuilder
	// Minknorm set Minkowski norm (from 0 to 20) (default 1).
	Minknorm(minknorm int) GreyedgeBuilder
	// Sigma set sigma (from 0 to 1024) (default 1).
	Sigma(sigma float64) GreyedgeBuilder
}

// Greyedge creates a new GreyedgeBuilder to configure the "greyedge" filter.
func Greyedge(opts ...filter.Option) GreyedgeBuilder {
	return &implGreyedgeBuilder{
		f: filter.New("greyedge", 1, opts...),
	}
}

type implGreyedgeBuilder struct {
	f filter.Filter
}

func (greyedgeBuilder *implGreyedgeBuilder) String() string {
	return greyedgeBuilder.f.String()
}

func (greyedgeBuilder *implGreyedgeBuilder) Outputs() int {
	return greyedgeBuilder.f.Outputs()
}

func (greyedgeBuilder *implGreyedgeBuilder) With(key string, value expr.Expr) filter.Filter {
	return greyedgeBuilder.withOption(key, value)
}

func (greyedgeBuilder *implGreyedgeBuilder) withOption(key string, value expr.Expr) GreyedgeBuilder {
	bCopy := *greyedgeBuilder
	bCopy.f = greyedgeBuilder.f.With(key, value)
	return &bCopy
}

func (greyedgeBuilder *implGreyedgeBuilder) Difford(difford int) GreyedgeBuilder {
	return greyedgeBuilder.withOption("difford", expr.Int(difford))
}

func (greyedgeBuilder *implGreyedgeBuilder) Minknorm(minknorm int) GreyedgeBuilder {
	return greyedgeBuilder.withOption("minknorm", expr.Int(minknorm))
}

func (greyedgeBuilder *implGreyedgeBuilder) Sigma(sigma float64) GreyedgeBuilder {
	return greyedgeBuilder.withOption("sigma", expr.Double(sigma))
}
