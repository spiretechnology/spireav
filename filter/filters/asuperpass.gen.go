// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// AsuperpassBuilder Apply high order Butterworth band-pass filter.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#asuperpass
type AsuperpassBuilder interface {
	filter.Filter
	// Centerf set center frequency (from 2 to 999999) (default 1000).
	Centerf(centerf float64) AsuperpassBuilder
	// CenterfExpr set center frequency (from 2 to 999999) (default 1000).
	CenterfExpr(centerf expr.Expr) AsuperpassBuilder
	// Order set filter order (from 4 to 20) (default 4).
	Order(order int) AsuperpassBuilder
	// OrderExpr set filter order (from 4 to 20) (default 4).
	OrderExpr(order expr.Expr) AsuperpassBuilder
	// Qfactor set Q-factor (from 0.01 to 100) (default 1).
	Qfactor(qfactor float64) AsuperpassBuilder
	// QfactorExpr set Q-factor (from 0.01 to 100) (default 1).
	QfactorExpr(qfactor expr.Expr) AsuperpassBuilder
	// Level set input level (from 0 to 2) (default 1).
	Level(level float64) AsuperpassBuilder
	// LevelExpr set input level (from 0 to 2) (default 1).
	LevelExpr(level expr.Expr) AsuperpassBuilder
	// Enable expression to enable or disable the filter.
	Enable(enable expr.Expr) AsuperpassBuilder
}

// Asuperpass creates a new AsuperpassBuilder to configure the "asuperpass" filter.
func Asuperpass(opts ...filter.Option) AsuperpassBuilder {
	return &implAsuperpassBuilder{
		f: filter.New("asuperpass", 1, opts...),
	}
}

type implAsuperpassBuilder struct {
	f filter.Filter
}

func (asuperpassBuilder *implAsuperpassBuilder) String() string {
	return asuperpassBuilder.f.String()
}

func (asuperpassBuilder *implAsuperpassBuilder) Outputs() int {
	return asuperpassBuilder.f.Outputs()
}

func (asuperpassBuilder *implAsuperpassBuilder) With(key string, value expr.Expr) filter.Filter {
	return asuperpassBuilder.withOption(key, value)
}

func (asuperpassBuilder *implAsuperpassBuilder) withOption(key string, value expr.Expr) AsuperpassBuilder {
	bCopy := *asuperpassBuilder
	bCopy.f = asuperpassBuilder.f.With(key, value)
	return &bCopy
}

func (asuperpassBuilder *implAsuperpassBuilder) Centerf(centerf float64) AsuperpassBuilder {
	return asuperpassBuilder.withOption("centerf", expr.Double(centerf))
}

func (asuperpassBuilder *implAsuperpassBuilder) CenterfExpr(centerf expr.Expr) AsuperpassBuilder {
	return asuperpassBuilder.withOption("centerf", centerf)
}

func (asuperpassBuilder *implAsuperpassBuilder) Order(order int) AsuperpassBuilder {
	return asuperpassBuilder.withOption("order", expr.Int(order))
}

func (asuperpassBuilder *implAsuperpassBuilder) OrderExpr(order expr.Expr) AsuperpassBuilder {
	return asuperpassBuilder.withOption("order", order)
}

func (asuperpassBuilder *implAsuperpassBuilder) Qfactor(qfactor float64) AsuperpassBuilder {
	return asuperpassBuilder.withOption("qfactor", expr.Double(qfactor))
}

func (asuperpassBuilder *implAsuperpassBuilder) QfactorExpr(qfactor expr.Expr) AsuperpassBuilder {
	return asuperpassBuilder.withOption("qfactor", qfactor)
}

func (asuperpassBuilder *implAsuperpassBuilder) Level(level float64) AsuperpassBuilder {
	return asuperpassBuilder.withOption("level", expr.Double(level))
}

func (asuperpassBuilder *implAsuperpassBuilder) LevelExpr(level expr.Expr) AsuperpassBuilder {
	return asuperpassBuilder.withOption("level", level)
}

func (asuperpassBuilder *implAsuperpassBuilder) Enable(enable expr.Expr) AsuperpassBuilder {
	return asuperpassBuilder.withOption("enable", enable)
}
