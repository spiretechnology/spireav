// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// TmidequalizerBuilder Apply Temporal Midway Equalization.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#tmidequalizer
type TmidequalizerBuilder interface {
	filter.Filter
	// Radius set radius (from 1 to 127) (default 5).
	Radius(radius int) TmidequalizerBuilder
	// Sigma set sigma (from 0 to 1) (default 0.5).
	Sigma(sigma float32) TmidequalizerBuilder
	// Planes set planes (from 0 to 15) (default 15).
	Planes(planes int) TmidequalizerBuilder
}

// Tmidequalizer creates a new TmidequalizerBuilder to configure the "tmidequalizer" filter.
func Tmidequalizer(opts ...filter.Option) TmidequalizerBuilder {
	return &implTmidequalizerBuilder{
		f: filter.New("tmidequalizer", 1, opts...),
	}
}

type implTmidequalizerBuilder struct {
	f filter.Filter
}

func (tmidequalizerBuilder *implTmidequalizerBuilder) String() string {
	return tmidequalizerBuilder.f.String()
}

func (tmidequalizerBuilder *implTmidequalizerBuilder) Outputs() int {
	return tmidequalizerBuilder.f.Outputs()
}

func (tmidequalizerBuilder *implTmidequalizerBuilder) With(key string, value expr.Expr) filter.Filter {
	return tmidequalizerBuilder.withOption(key, value)
}

func (tmidequalizerBuilder *implTmidequalizerBuilder) withOption(key string, value expr.Expr) TmidequalizerBuilder {
	bCopy := *tmidequalizerBuilder
	bCopy.f = tmidequalizerBuilder.f.With(key, value)
	return &bCopy
}

func (tmidequalizerBuilder *implTmidequalizerBuilder) Radius(radius int) TmidequalizerBuilder {
	return tmidequalizerBuilder.withOption("radius", expr.Int(radius))
}

func (tmidequalizerBuilder *implTmidequalizerBuilder) Sigma(sigma float32) TmidequalizerBuilder {
	return tmidequalizerBuilder.withOption("sigma", expr.Float(sigma))
}

func (tmidequalizerBuilder *implTmidequalizerBuilder) Planes(planes int) TmidequalizerBuilder {
	return tmidequalizerBuilder.withOption("planes", expr.Int(planes))
}
