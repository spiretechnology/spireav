// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// NlmeansBuilder Non-local means denoiser.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#nlmeans
type NlmeansBuilder interface {
	filter.Filter
	// S denoising strength (from 1 to 30) (default 1).
	S(s float64) NlmeansBuilder
	// P patch size (from 0 to 99) (default 7).
	P(p int) NlmeansBuilder
	// Pc patch size for chroma planes (from 0 to 99) (default 0).
	Pc(pc int) NlmeansBuilder
	// R research window (from 0 to 99) (default 15).
	R(r int) NlmeansBuilder
	// Rc research window for chroma planes (from 0 to 99) (default 0).
	Rc(rc int) NlmeansBuilder
}

// Nlmeans creates a new NlmeansBuilder to configure the "nlmeans" filter.
func Nlmeans(opts ...filter.Option) NlmeansBuilder {
	return &implNlmeansBuilder{
		f: filter.New("nlmeans", 1, opts...),
	}
}

type implNlmeansBuilder struct {
	f filter.Filter
}

func (nlmeansBuilder *implNlmeansBuilder) String() string {
	return nlmeansBuilder.f.String()
}

func (nlmeansBuilder *implNlmeansBuilder) Outputs() int {
	return nlmeansBuilder.f.Outputs()
}

func (nlmeansBuilder *implNlmeansBuilder) With(key string, value expr.Expr) filter.Filter {
	return nlmeansBuilder.withOption(key, value)
}

func (nlmeansBuilder *implNlmeansBuilder) withOption(key string, value expr.Expr) NlmeansBuilder {
	bCopy := *nlmeansBuilder
	bCopy.f = nlmeansBuilder.f.With(key, value)
	return &bCopy
}

func (nlmeansBuilder *implNlmeansBuilder) S(s float64) NlmeansBuilder {
	return nlmeansBuilder.withOption("s", expr.Double(s))
}

func (nlmeansBuilder *implNlmeansBuilder) P(p int) NlmeansBuilder {
	return nlmeansBuilder.withOption("p", expr.Int(p))
}

func (nlmeansBuilder *implNlmeansBuilder) Pc(pc int) NlmeansBuilder {
	return nlmeansBuilder.withOption("pc", expr.Int(pc))
}

func (nlmeansBuilder *implNlmeansBuilder) R(r int) NlmeansBuilder {
	return nlmeansBuilder.withOption("r", expr.Int(r))
}

func (nlmeansBuilder *implNlmeansBuilder) Rc(rc int) NlmeansBuilder {
	return nlmeansBuilder.withOption("rc", expr.Int(rc))
}
