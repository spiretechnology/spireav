// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// FloodfillBuilder Fill area with same color with another color.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#floodfill
type FloodfillBuilder interface {
	filter.Filter
	// X set pixel x coordinate (from 0 to 65535) (default 0).
	X(x int) FloodfillBuilder
	// Y set pixel y coordinate (from 0 to 65535) (default 0).
	Y(y int) FloodfillBuilder
	// S0 set source #0 component value (from -1 to 65535) (default 0).
	S0(s0 int) FloodfillBuilder
	// S1 set source #1 component value (from -1 to 65535) (default 0).
	S1(s1 int) FloodfillBuilder
	// S2 set source #2 component value (from -1 to 65535) (default 0).
	S2(s2 int) FloodfillBuilder
	// S3 set source #3 component value (from -1 to 65535) (default 0).
	S3(s3 int) FloodfillBuilder
	// D0 set destination #0 component value (from 0 to 65535) (default 0).
	D0(d0 int) FloodfillBuilder
	// D1 set destination #1 component value (from 0 to 65535) (default 0).
	D1(d1 int) FloodfillBuilder
	// D2 set destination #2 component value (from 0 to 65535) (default 0).
	D2(d2 int) FloodfillBuilder
	// D3 set destination #3 component value (from 0 to 65535) (default 0).
	D3(d3 int) FloodfillBuilder
}

// Floodfill creates a new FloodfillBuilder to configure the "floodfill" filter.
func Floodfill(opts ...filter.Option) FloodfillBuilder {
	return &implFloodfillBuilder{
		f: filter.New("floodfill", 1, opts...),
	}
}

type implFloodfillBuilder struct {
	f filter.Filter
}

func (floodfillBuilder *implFloodfillBuilder) String() string {
	return floodfillBuilder.f.String()
}

func (floodfillBuilder *implFloodfillBuilder) Outputs() int {
	return floodfillBuilder.f.Outputs()
}

func (floodfillBuilder *implFloodfillBuilder) With(key string, value expr.Expr) filter.Filter {
	return floodfillBuilder.withOption(key, value)
}

func (floodfillBuilder *implFloodfillBuilder) withOption(key string, value expr.Expr) FloodfillBuilder {
	bCopy := *floodfillBuilder
	bCopy.f = floodfillBuilder.f.With(key, value)
	return &bCopy
}

func (floodfillBuilder *implFloodfillBuilder) X(x int) FloodfillBuilder {
	return floodfillBuilder.withOption("x", expr.Int(x))
}

func (floodfillBuilder *implFloodfillBuilder) Y(y int) FloodfillBuilder {
	return floodfillBuilder.withOption("y", expr.Int(y))
}

func (floodfillBuilder *implFloodfillBuilder) S0(s0 int) FloodfillBuilder {
	return floodfillBuilder.withOption("s0", expr.Int(s0))
}

func (floodfillBuilder *implFloodfillBuilder) S1(s1 int) FloodfillBuilder {
	return floodfillBuilder.withOption("s1", expr.Int(s1))
}

func (floodfillBuilder *implFloodfillBuilder) S2(s2 int) FloodfillBuilder {
	return floodfillBuilder.withOption("s2", expr.Int(s2))
}

func (floodfillBuilder *implFloodfillBuilder) S3(s3 int) FloodfillBuilder {
	return floodfillBuilder.withOption("s3", expr.Int(s3))
}

func (floodfillBuilder *implFloodfillBuilder) D0(d0 int) FloodfillBuilder {
	return floodfillBuilder.withOption("d0", expr.Int(d0))
}

func (floodfillBuilder *implFloodfillBuilder) D1(d1 int) FloodfillBuilder {
	return floodfillBuilder.withOption("d1", expr.Int(d1))
}

func (floodfillBuilder *implFloodfillBuilder) D2(d2 int) FloodfillBuilder {
	return floodfillBuilder.withOption("d2", expr.Int(d2))
}

func (floodfillBuilder *implFloodfillBuilder) D3(d3 int) FloodfillBuilder {
	return floodfillBuilder.withOption("d3", expr.Int(d3))
}
