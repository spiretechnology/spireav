// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// DecimateBuilder Decimate frames (post field matching filter).
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#decimate
type DecimateBuilder interface {
	filter.Filter
	// Cycle set the number of frame from which one will be dropped (from 2 to 25) (default 5).
	Cycle(cycle int) DecimateBuilder
	// Dupthresh set duplicate threshold (from 0 to 100) (default 1.1).
	Dupthresh(dupthresh float64) DecimateBuilder
	// Scthresh set scene change threshold (from 0 to 100) (default 15).
	Scthresh(scthresh float64) DecimateBuilder
	// Blockx set the size of the x-axis blocks used during metric calculations (from 4 to 512) (default 32).
	Blockx(blockx int) DecimateBuilder
	// Blocky set the size of the y-axis blocks used during metric calculations (from 4 to 512) (default 32).
	Blocky(blocky int) DecimateBuilder
	// Ppsrc mark main input as a pre-processed input and activate clean source input stream (default false).
	Ppsrc(ppsrc bool) DecimateBuilder
	// Chroma set whether or not chroma is considered in the metric calculations (default true).
	Chroma(chroma bool) DecimateBuilder
	// Mixed set whether or not the input only partially contains content to be decimated (default false).
	Mixed(mixed bool) DecimateBuilder
}

// Decimate creates a new DecimateBuilder to configure the "decimate" filter.
func Decimate(opts ...filter.Option) DecimateBuilder {
	return &implDecimateBuilder{
		f: filter.New("decimate", 1, opts...),
	}
}

type implDecimateBuilder struct {
	f filter.Filter
}

func (decimateBuilder *implDecimateBuilder) String() string {
	return decimateBuilder.f.String()
}

func (decimateBuilder *implDecimateBuilder) Outputs() int {
	return decimateBuilder.f.Outputs()
}

func (decimateBuilder *implDecimateBuilder) With(key string, value expr.Expr) filter.Filter {
	return decimateBuilder.withOption(key, value)
}

func (decimateBuilder *implDecimateBuilder) withOption(key string, value expr.Expr) DecimateBuilder {
	bCopy := *decimateBuilder
	bCopy.f = decimateBuilder.f.With(key, value)
	return &bCopy
}

func (decimateBuilder *implDecimateBuilder) Cycle(cycle int) DecimateBuilder {
	return decimateBuilder.withOption("cycle", expr.Int(cycle))
}

func (decimateBuilder *implDecimateBuilder) Dupthresh(dupthresh float64) DecimateBuilder {
	return decimateBuilder.withOption("dupthresh", expr.Double(dupthresh))
}

func (decimateBuilder *implDecimateBuilder) Scthresh(scthresh float64) DecimateBuilder {
	return decimateBuilder.withOption("scthresh", expr.Double(scthresh))
}

func (decimateBuilder *implDecimateBuilder) Blockx(blockx int) DecimateBuilder {
	return decimateBuilder.withOption("blockx", expr.Int(blockx))
}

func (decimateBuilder *implDecimateBuilder) Blocky(blocky int) DecimateBuilder {
	return decimateBuilder.withOption("blocky", expr.Int(blocky))
}

func (decimateBuilder *implDecimateBuilder) Ppsrc(ppsrc bool) DecimateBuilder {
	return decimateBuilder.withOption("ppsrc", expr.Bool(ppsrc))
}

func (decimateBuilder *implDecimateBuilder) Chroma(chroma bool) DecimateBuilder {
	return decimateBuilder.withOption("chroma", expr.Bool(chroma))
}

func (decimateBuilder *implDecimateBuilder) Mixed(mixed bool) DecimateBuilder {
	return decimateBuilder.withOption("mixed", expr.Bool(mixed))
}
