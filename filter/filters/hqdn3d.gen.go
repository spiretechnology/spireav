// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// Hqdn3dBuilder Apply a High Quality 3D Denoiser.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#hqdn3d
type Hqdn3dBuilder interface {
	filter.Filter
	// LumaSpatial spatial luma strength (from 0 to DBL_MAX) (default 0).
	LumaSpatial(lumaSpatial float64) Hqdn3dBuilder
	// LumaSpatialExpr spatial luma strength (from 0 to DBL_MAX) (default 0).
	LumaSpatialExpr(lumaSpatial expr.Expr) Hqdn3dBuilder
	// ChromaSpatial spatial chroma strength (from 0 to DBL_MAX) (default 0).
	ChromaSpatial(chromaSpatial float64) Hqdn3dBuilder
	// ChromaSpatialExpr spatial chroma strength (from 0 to DBL_MAX) (default 0).
	ChromaSpatialExpr(chromaSpatial expr.Expr) Hqdn3dBuilder
	// LumaTmp temporal luma strength (from 0 to DBL_MAX) (default 0).
	LumaTmp(lumaTmp float64) Hqdn3dBuilder
	// LumaTmpExpr temporal luma strength (from 0 to DBL_MAX) (default 0).
	LumaTmpExpr(lumaTmp expr.Expr) Hqdn3dBuilder
	// ChromaTmp temporal chroma strength (from 0 to DBL_MAX) (default 0).
	ChromaTmp(chromaTmp float64) Hqdn3dBuilder
	// ChromaTmpExpr temporal chroma strength (from 0 to DBL_MAX) (default 0).
	ChromaTmpExpr(chromaTmp expr.Expr) Hqdn3dBuilder
	// Enable expression to enable or disable the filter.
	Enable(enable expr.Expr) Hqdn3dBuilder
}

// Hqdn3d creates a new Hqdn3dBuilder to configure the "hqdn3d" filter.
func Hqdn3d(opts ...filter.Option) Hqdn3dBuilder {
	return &implHqdn3dBuilder{
		f: filter.New("hqdn3d", 1, opts...),
	}
}

type implHqdn3dBuilder struct {
	f filter.Filter
}

func (hqdn3dBuilder *implHqdn3dBuilder) String() string {
	return hqdn3dBuilder.f.String()
}

func (hqdn3dBuilder *implHqdn3dBuilder) Outputs() int {
	return hqdn3dBuilder.f.Outputs()
}

func (hqdn3dBuilder *implHqdn3dBuilder) With(key string, value expr.Expr) filter.Filter {
	return hqdn3dBuilder.withOption(key, value)
}

func (hqdn3dBuilder *implHqdn3dBuilder) withOption(key string, value expr.Expr) Hqdn3dBuilder {
	bCopy := *hqdn3dBuilder
	bCopy.f = hqdn3dBuilder.f.With(key, value)
	return &bCopy
}

func (hqdn3dBuilder *implHqdn3dBuilder) LumaSpatial(lumaSpatial float64) Hqdn3dBuilder {
	return hqdn3dBuilder.withOption("luma_spatial", expr.Double(lumaSpatial))
}

func (hqdn3dBuilder *implHqdn3dBuilder) LumaSpatialExpr(lumaSpatial expr.Expr) Hqdn3dBuilder {
	return hqdn3dBuilder.withOption("luma_spatial", lumaSpatial)
}

func (hqdn3dBuilder *implHqdn3dBuilder) ChromaSpatial(chromaSpatial float64) Hqdn3dBuilder {
	return hqdn3dBuilder.withOption("chroma_spatial", expr.Double(chromaSpatial))
}

func (hqdn3dBuilder *implHqdn3dBuilder) ChromaSpatialExpr(chromaSpatial expr.Expr) Hqdn3dBuilder {
	return hqdn3dBuilder.withOption("chroma_spatial", chromaSpatial)
}

func (hqdn3dBuilder *implHqdn3dBuilder) LumaTmp(lumaTmp float64) Hqdn3dBuilder {
	return hqdn3dBuilder.withOption("luma_tmp", expr.Double(lumaTmp))
}

func (hqdn3dBuilder *implHqdn3dBuilder) LumaTmpExpr(lumaTmp expr.Expr) Hqdn3dBuilder {
	return hqdn3dBuilder.withOption("luma_tmp", lumaTmp)
}

func (hqdn3dBuilder *implHqdn3dBuilder) ChromaTmp(chromaTmp float64) Hqdn3dBuilder {
	return hqdn3dBuilder.withOption("chroma_tmp", expr.Double(chromaTmp))
}

func (hqdn3dBuilder *implHqdn3dBuilder) ChromaTmpExpr(chromaTmp expr.Expr) Hqdn3dBuilder {
	return hqdn3dBuilder.withOption("chroma_tmp", chromaTmp)
}

func (hqdn3dBuilder *implHqdn3dBuilder) Enable(enable expr.Expr) Hqdn3dBuilder {
	return hqdn3dBuilder.withOption("enable", enable)
}
