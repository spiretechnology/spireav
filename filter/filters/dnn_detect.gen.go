// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// DnnDetectBuilder Apply DNN detect filter to the input.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#dnn_detect
type DnnDetectBuilder interface {
	filter.Filter
	// DnnBackend DNN backend (from INT_MIN to INT_MAX) (default 2).
	DnnBackend(dnnBackend int) DnnDetectBuilder
	// Model path to model file.
	Model(model string) DnnDetectBuilder
	// Input input name of the model.
	Input(input string) DnnDetectBuilder
	// Output output name of the model.
	Output(output string) DnnDetectBuilder
	// BackendConfigs backend configs.
	BackendConfigs(backendConfigs string) DnnDetectBuilder
	// Options backend configs (deprecated, use backend_configs).
	Options(options string) DnnDetectBuilder
	// Async use DNN async inference (ignored, use backend_configs='async=1') (default true).
	Async(async bool) DnnDetectBuilder
	// Confidence threshold of confidence (from 0 to 1) (default 0.5).
	Confidence(confidence float32) DnnDetectBuilder
	// Labels path to labels file.
	Labels(labels string) DnnDetectBuilder
	// ModelType DNN detection model type (from INT_MIN to INT_MAX) (default ssd).
	ModelType(modelType int) DnnDetectBuilder
	// CellW cell width (from 0 to I64_MAX) (default 0).
	CellW(cellW int) DnnDetectBuilder
	// CellH cell height (from 0 to I64_MAX) (default 0).
	CellH(cellH int) DnnDetectBuilder
	// NbClasses The number of class (from 0 to I64_MAX) (default 0).
	NbClasses(nbClasses int) DnnDetectBuilder
	// Anchors anchors, splited by '&'.
	Anchors(anchors string) DnnDetectBuilder
}

// DnnDetect creates a new DnnDetectBuilder to configure the "dnn_detect" filter.
func DnnDetect(opts ...filter.Option) DnnDetectBuilder {
	return &implDnnDetectBuilder{
		f: filter.New("dnn_detect", 1, opts...),
	}
}

type implDnnDetectBuilder struct {
	f filter.Filter
}

func (dnn_detectBuilder *implDnnDetectBuilder) String() string {
	return dnn_detectBuilder.f.String()
}

func (dnn_detectBuilder *implDnnDetectBuilder) Outputs() int {
	return dnn_detectBuilder.f.Outputs()
}

func (dnn_detectBuilder *implDnnDetectBuilder) With(key string, value expr.Expr) filter.Filter {
	return dnn_detectBuilder.withOption(key, value)
}

func (dnn_detectBuilder *implDnnDetectBuilder) withOption(key string, value expr.Expr) DnnDetectBuilder {
	bCopy := *dnn_detectBuilder
	bCopy.f = dnn_detectBuilder.f.With(key, value)
	return &bCopy
}

func (dnn_detectBuilder *implDnnDetectBuilder) DnnBackend(dnnBackend int) DnnDetectBuilder {
	return dnn_detectBuilder.withOption("dnn_backend", expr.Int(dnnBackend))
}

func (dnn_detectBuilder *implDnnDetectBuilder) Model(model string) DnnDetectBuilder {
	return dnn_detectBuilder.withOption("model", expr.String(model))
}

func (dnn_detectBuilder *implDnnDetectBuilder) Input(input string) DnnDetectBuilder {
	return dnn_detectBuilder.withOption("input", expr.String(input))
}

func (dnn_detectBuilder *implDnnDetectBuilder) Output(output string) DnnDetectBuilder {
	return dnn_detectBuilder.withOption("output", expr.String(output))
}

func (dnn_detectBuilder *implDnnDetectBuilder) BackendConfigs(backendConfigs string) DnnDetectBuilder {
	return dnn_detectBuilder.withOption("backend_configs", expr.String(backendConfigs))
}

func (dnn_detectBuilder *implDnnDetectBuilder) Options(options string) DnnDetectBuilder {
	return dnn_detectBuilder.withOption("options", expr.String(options))
}

func (dnn_detectBuilder *implDnnDetectBuilder) Async(async bool) DnnDetectBuilder {
	return dnn_detectBuilder.withOption("async", expr.Bool(async))
}

func (dnn_detectBuilder *implDnnDetectBuilder) Confidence(confidence float32) DnnDetectBuilder {
	return dnn_detectBuilder.withOption("confidence", expr.Float(confidence))
}

func (dnn_detectBuilder *implDnnDetectBuilder) Labels(labels string) DnnDetectBuilder {
	return dnn_detectBuilder.withOption("labels", expr.String(labels))
}

func (dnn_detectBuilder *implDnnDetectBuilder) ModelType(modelType int) DnnDetectBuilder {
	return dnn_detectBuilder.withOption("model_type", expr.Int(modelType))
}

func (dnn_detectBuilder *implDnnDetectBuilder) CellW(cellW int) DnnDetectBuilder {
	return dnn_detectBuilder.withOption("cell_w", expr.Int(cellW))
}

func (dnn_detectBuilder *implDnnDetectBuilder) CellH(cellH int) DnnDetectBuilder {
	return dnn_detectBuilder.withOption("cell_h", expr.Int(cellH))
}

func (dnn_detectBuilder *implDnnDetectBuilder) NbClasses(nbClasses int) DnnDetectBuilder {
	return dnn_detectBuilder.withOption("nb_classes", expr.Int(nbClasses))
}

func (dnn_detectBuilder *implDnnDetectBuilder) Anchors(anchors string) DnnDetectBuilder {
	return dnn_detectBuilder.withOption("anchors", expr.String(anchors))
}
