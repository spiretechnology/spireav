// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// SetptsBuilder Set PTS for the output video frame.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#setpts
type SetptsBuilder interface {
	filter.Filter
	// Expr Expression determining the frame timestamp (default "PTS").
	Expr(expression string) SetptsBuilder
	// ExprExpr Expression determining the frame timestamp (default "PTS").
	ExprExpr(expression expr.Expr) SetptsBuilder
}

// Setpts creates a new SetptsBuilder to configure the "setpts" filter.
func Setpts(opts ...filter.Option) SetptsBuilder {
	return &implSetptsBuilder{
		f: filter.New("setpts", 1, opts...),
	}
}

type implSetptsBuilder struct {
	f filter.Filter
}

func (setptsBuilder *implSetptsBuilder) String() string {
	return setptsBuilder.f.String()
}

func (setptsBuilder *implSetptsBuilder) Outputs() int {
	return setptsBuilder.f.Outputs()
}

func (setptsBuilder *implSetptsBuilder) With(key string, value expr.Expr) filter.Filter {
	return setptsBuilder.withOption(key, value)
}

func (setptsBuilder *implSetptsBuilder) withOption(key string, value expr.Expr) SetptsBuilder {
	bCopy := *setptsBuilder
	bCopy.f = setptsBuilder.f.With(key, value)
	return &bCopy
}

func (setptsBuilder *implSetptsBuilder) Expr(expression string) SetptsBuilder {
	return setptsBuilder.withOption("expr", expr.String(expression))
}

func (setptsBuilder *implSetptsBuilder) ExprExpr(expression expr.Expr) SetptsBuilder {
	return setptsBuilder.withOption("expr", expression)
}
