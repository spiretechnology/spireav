// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// LibvmafBuilder Calculate the VMAF between two video streams.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#libvmaf
type LibvmafBuilder interface {
	filter.Filter
	// LogPath Set the file path to be used to write log..
	LogPath(logPath string) LibvmafBuilder
	// LogFmt Set the format of the log (csv, json, xml, or sub). (default "xml").
	LogFmt(logFmt string) LibvmafBuilder
	// Pool Set the pool method to be used for computing vmaf..
	Pool(pool string) LibvmafBuilder
	// NThreads Set number of threads to be used when computing vmaf. (from 0 to UINT32_MAX) (default 0).
	NThreads(nThreads int) LibvmafBuilder
	// NSubsample Set interval for frame subsampling used when computing vmaf. (from 1 to UINT32_MAX) (default 1).
	NSubsample(nSubsample int) LibvmafBuilder
	// Model Set the model to be used for computing vmaf. (default "version=vmaf_v0.6.1").
	Model(model string) LibvmafBuilder
	// Feature Set the feature to be used for computing vmaf..
	Feature(feature string) LibvmafBuilder
	// EofAction Action to take when encountering EOF from secondary input  (from 0 to 2) (default repeat).
	EofAction(eofAction int) LibvmafBuilder
	// Shortest force termination when the shortest input terminates (default false).
	Shortest(shortest bool) LibvmafBuilder
	// Repeatlast extend last frame of secondary streams beyond EOF (default true).
	Repeatlast(repeatlast bool) LibvmafBuilder
	// TsSyncMode How strictly to sync streams based on secondary input timestamps (from 0 to 1) (default default).
	TsSyncMode(tsSyncMode int) LibvmafBuilder
}

// Libvmaf creates a new LibvmafBuilder to configure the "libvmaf" filter.
func Libvmaf(opts ...filter.Option) LibvmafBuilder {
	return &implLibvmafBuilder{
		f: filter.New("libvmaf", 1, opts...),
	}
}

type implLibvmafBuilder struct {
	f filter.Filter
}

func (libvmafBuilder *implLibvmafBuilder) String() string {
	return libvmafBuilder.f.String()
}

func (libvmafBuilder *implLibvmafBuilder) Outputs() int {
	return libvmafBuilder.f.Outputs()
}

func (libvmafBuilder *implLibvmafBuilder) With(key string, value expr.Expr) filter.Filter {
	return libvmafBuilder.withOption(key, value)
}

func (libvmafBuilder *implLibvmafBuilder) withOption(key string, value expr.Expr) LibvmafBuilder {
	bCopy := *libvmafBuilder
	bCopy.f = libvmafBuilder.f.With(key, value)
	return &bCopy
}

func (libvmafBuilder *implLibvmafBuilder) LogPath(logPath string) LibvmafBuilder {
	return libvmafBuilder.withOption("log_path", expr.String(logPath))
}

func (libvmafBuilder *implLibvmafBuilder) LogFmt(logFmt string) LibvmafBuilder {
	return libvmafBuilder.withOption("log_fmt", expr.String(logFmt))
}

func (libvmafBuilder *implLibvmafBuilder) Pool(pool string) LibvmafBuilder {
	return libvmafBuilder.withOption("pool", expr.String(pool))
}

func (libvmafBuilder *implLibvmafBuilder) NThreads(nThreads int) LibvmafBuilder {
	return libvmafBuilder.withOption("n_threads", expr.Int(nThreads))
}

func (libvmafBuilder *implLibvmafBuilder) NSubsample(nSubsample int) LibvmafBuilder {
	return libvmafBuilder.withOption("n_subsample", expr.Int(nSubsample))
}

func (libvmafBuilder *implLibvmafBuilder) Model(model string) LibvmafBuilder {
	return libvmafBuilder.withOption("model", expr.String(model))
}

func (libvmafBuilder *implLibvmafBuilder) Feature(feature string) LibvmafBuilder {
	return libvmafBuilder.withOption("feature", expr.String(feature))
}

func (libvmafBuilder *implLibvmafBuilder) EofAction(eofAction int) LibvmafBuilder {
	return libvmafBuilder.withOption("eof_action", expr.Int(eofAction))
}

func (libvmafBuilder *implLibvmafBuilder) Shortest(shortest bool) LibvmafBuilder {
	return libvmafBuilder.withOption("shortest", expr.Bool(shortest))
}

func (libvmafBuilder *implLibvmafBuilder) Repeatlast(repeatlast bool) LibvmafBuilder {
	return libvmafBuilder.withOption("repeatlast", expr.Bool(repeatlast))
}

func (libvmafBuilder *implLibvmafBuilder) TsSyncMode(tsSyncMode int) LibvmafBuilder {
	return libvmafBuilder.withOption("ts_sync_mode", expr.Int(tsSyncMode))
}
