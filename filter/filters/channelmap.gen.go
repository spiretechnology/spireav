// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// ChannelmapBuilder Remap audio channels.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#channelmap
type ChannelmapBuilder interface {
	filter.Filter
	// Map A comma-separated list of input channel numbers in output order..
	Map(mapVal string) ChannelmapBuilder
	// ChannelLayout Output channel layout..
	ChannelLayout(channelLayout expr.ChannelLayout) ChannelmapBuilder
}

// Channelmap creates a new ChannelmapBuilder to configure the "channelmap" filter.
func Channelmap(opts ...filter.Option) ChannelmapBuilder {
	return &implChannelmapBuilder{
		f: filter.New("channelmap", 1, opts...),
	}
}

type implChannelmapBuilder struct {
	f filter.Filter
}

func (channelmapBuilder *implChannelmapBuilder) String() string {
	return channelmapBuilder.f.String()
}

func (channelmapBuilder *implChannelmapBuilder) Outputs() int {
	return channelmapBuilder.f.Outputs()
}

func (channelmapBuilder *implChannelmapBuilder) With(key string, value expr.Expr) filter.Filter {
	return channelmapBuilder.withOption(key, value)
}

func (channelmapBuilder *implChannelmapBuilder) withOption(key string, value expr.Expr) ChannelmapBuilder {
	bCopy := *channelmapBuilder
	bCopy.f = channelmapBuilder.f.With(key, value)
	return &bCopy
}

func (channelmapBuilder *implChannelmapBuilder) Map(mapVal string) ChannelmapBuilder {
	return channelmapBuilder.withOption("map", expr.String(mapVal))
}

func (channelmapBuilder *implChannelmapBuilder) ChannelLayout(channelLayout expr.ChannelLayout) ChannelmapBuilder {
	return channelmapBuilder.withOption("channel_layout", channelLayout)
}
