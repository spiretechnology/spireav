// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// AfirsrcBuilder Generate a FIR coefficients audio stream.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#afirsrc
type AfirsrcBuilder interface {
	filter.Filter
	// Taps set number of taps (from 9 to 65535) (default 1025).
	Taps(taps int) AfirsrcBuilder
	// T set number of taps (from 9 to 65535) (default 1025).
	T(t int) AfirsrcBuilder
	// Frequency set frequency points (default "0 1").
	Frequency(frequency string) AfirsrcBuilder
	// F set frequency points (default "0 1").
	F(f string) AfirsrcBuilder
	// Magnitude set magnitude values (default "1 1").
	Magnitude(magnitude string) AfirsrcBuilder
	// M set magnitude values (default "1 1").
	M(m string) AfirsrcBuilder
	// Phase set phase values (default "0 0").
	Phase(phase string) AfirsrcBuilder
	// P set phase values (default "0 0").
	P(p string) AfirsrcBuilder
	// SampleRate set sample rate (from 1 to INT_MAX) (default 44100).
	SampleRate(sampleRate int) AfirsrcBuilder
	// R set sample rate (from 1 to INT_MAX) (default 44100).
	R(r int) AfirsrcBuilder
	// NbSamples set the number of samples per requested frame (from 1 to INT_MAX) (default 1024).
	NbSamples(nbSamples int) AfirsrcBuilder
	// N set the number of samples per requested frame (from 1 to INT_MAX) (default 1024).
	N(n int) AfirsrcBuilder
	// WinFunc set window function (from 0 to 20) (default blackman).
	WinFunc(winFunc int) AfirsrcBuilder
	// W set window function (from 0 to 20) (default blackman).
	W(w int) AfirsrcBuilder
}

// Afirsrc creates a new AfirsrcBuilder to configure the "afirsrc" filter.
func Afirsrc(opts ...filter.Option) AfirsrcBuilder {
	return &implAfirsrcBuilder{
		f: filter.New("afirsrc", 1, opts...),
	}
}

type implAfirsrcBuilder struct {
	f filter.Filter
}

func (afirsrcBuilder *implAfirsrcBuilder) String() string {
	return afirsrcBuilder.f.String()
}

func (afirsrcBuilder *implAfirsrcBuilder) Outputs() int {
	return afirsrcBuilder.f.Outputs()
}

func (afirsrcBuilder *implAfirsrcBuilder) With(key string, value expr.Expr) filter.Filter {
	return afirsrcBuilder.withOption(key, value)
}

func (afirsrcBuilder *implAfirsrcBuilder) withOption(key string, value expr.Expr) AfirsrcBuilder {
	bCopy := *afirsrcBuilder
	bCopy.f = afirsrcBuilder.f.With(key, value)
	return &bCopy
}

func (afirsrcBuilder *implAfirsrcBuilder) Taps(taps int) AfirsrcBuilder {
	return afirsrcBuilder.withOption("taps", expr.Int(taps))
}

func (afirsrcBuilder *implAfirsrcBuilder) T(t int) AfirsrcBuilder {
	return afirsrcBuilder.withOption("t", expr.Int(t))
}

func (afirsrcBuilder *implAfirsrcBuilder) Frequency(frequency string) AfirsrcBuilder {
	return afirsrcBuilder.withOption("frequency", expr.String(frequency))
}

func (afirsrcBuilder *implAfirsrcBuilder) F(f string) AfirsrcBuilder {
	return afirsrcBuilder.withOption("f", expr.String(f))
}

func (afirsrcBuilder *implAfirsrcBuilder) Magnitude(magnitude string) AfirsrcBuilder {
	return afirsrcBuilder.withOption("magnitude", expr.String(magnitude))
}

func (afirsrcBuilder *implAfirsrcBuilder) M(m string) AfirsrcBuilder {
	return afirsrcBuilder.withOption("m", expr.String(m))
}

func (afirsrcBuilder *implAfirsrcBuilder) Phase(phase string) AfirsrcBuilder {
	return afirsrcBuilder.withOption("phase", expr.String(phase))
}

func (afirsrcBuilder *implAfirsrcBuilder) P(p string) AfirsrcBuilder {
	return afirsrcBuilder.withOption("p", expr.String(p))
}

func (afirsrcBuilder *implAfirsrcBuilder) SampleRate(sampleRate int) AfirsrcBuilder {
	return afirsrcBuilder.withOption("sample_rate", expr.Int(sampleRate))
}

func (afirsrcBuilder *implAfirsrcBuilder) R(r int) AfirsrcBuilder {
	return afirsrcBuilder.withOption("r", expr.Int(r))
}

func (afirsrcBuilder *implAfirsrcBuilder) NbSamples(nbSamples int) AfirsrcBuilder {
	return afirsrcBuilder.withOption("nb_samples", expr.Int(nbSamples))
}

func (afirsrcBuilder *implAfirsrcBuilder) N(n int) AfirsrcBuilder {
	return afirsrcBuilder.withOption("n", expr.Int(n))
}

func (afirsrcBuilder *implAfirsrcBuilder) WinFunc(winFunc int) AfirsrcBuilder {
	return afirsrcBuilder.withOption("win_func", expr.Int(winFunc))
}

func (afirsrcBuilder *implAfirsrcBuilder) W(w int) AfirsrcBuilder {
	return afirsrcBuilder.withOption("w", expr.Int(w))
}
