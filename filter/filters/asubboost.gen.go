// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// AsubboostBuilder Boost subwoofer frequencies.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#asubboost
type AsubboostBuilder interface {
	filter.Filter
	// Dry set dry gain (from 0 to 1) (default 1).
	Dry(dry float64) AsubboostBuilder
	// DryExpr set dry gain (from 0 to 1) (default 1).
	DryExpr(dry expr.Expr) AsubboostBuilder
	// Wet set wet gain (from 0 to 1) (default 1).
	Wet(wet float64) AsubboostBuilder
	// WetExpr set wet gain (from 0 to 1) (default 1).
	WetExpr(wet expr.Expr) AsubboostBuilder
	// Boost set max boost (from 1 to 12) (default 2).
	Boost(boost float64) AsubboostBuilder
	// BoostExpr set max boost (from 1 to 12) (default 2).
	BoostExpr(boost expr.Expr) AsubboostBuilder
	// Decay set decay (from 0 to 1) (default 0).
	Decay(decay float64) AsubboostBuilder
	// DecayExpr set decay (from 0 to 1) (default 0).
	DecayExpr(decay expr.Expr) AsubboostBuilder
	// Feedback set feedback (from 0 to 1) (default 0.9).
	Feedback(feedback float64) AsubboostBuilder
	// FeedbackExpr set feedback (from 0 to 1) (default 0.9).
	FeedbackExpr(feedback expr.Expr) AsubboostBuilder
	// Cutoff set cutoff (from 50 to 900) (default 100).
	Cutoff(cutoff float64) AsubboostBuilder
	// CutoffExpr set cutoff (from 50 to 900) (default 100).
	CutoffExpr(cutoff expr.Expr) AsubboostBuilder
	// Slope set slope (from 0.0001 to 1) (default 0.5).
	Slope(slope float64) AsubboostBuilder
	// SlopeExpr set slope (from 0.0001 to 1) (default 0.5).
	SlopeExpr(slope expr.Expr) AsubboostBuilder
	// Delay set delay (from 1 to 100) (default 20).
	Delay(delay float64) AsubboostBuilder
	// DelayExpr set delay (from 1 to 100) (default 20).
	DelayExpr(delay expr.Expr) AsubboostBuilder
	// Channels set channels to filter (default "all").
	Channels(channels string) AsubboostBuilder
	// ChannelsExpr set channels to filter (default "all").
	ChannelsExpr(channels expr.Expr) AsubboostBuilder
	// Enable expression to enable or disable the filter.
	Enable(enable expr.Expr) AsubboostBuilder
}

// Asubboost creates a new AsubboostBuilder to configure the "asubboost" filter.
func Asubboost(opts ...filter.Option) AsubboostBuilder {
	return &implAsubboostBuilder{
		f: filter.New("asubboost", 1, opts...),
	}
}

type implAsubboostBuilder struct {
	f filter.Filter
}

func (asubboostBuilder *implAsubboostBuilder) String() string {
	return asubboostBuilder.f.String()
}

func (asubboostBuilder *implAsubboostBuilder) Outputs() int {
	return asubboostBuilder.f.Outputs()
}

func (asubboostBuilder *implAsubboostBuilder) With(key string, value expr.Expr) filter.Filter {
	return asubboostBuilder.withOption(key, value)
}

func (asubboostBuilder *implAsubboostBuilder) withOption(key string, value expr.Expr) AsubboostBuilder {
	bCopy := *asubboostBuilder
	bCopy.f = asubboostBuilder.f.With(key, value)
	return &bCopy
}

func (asubboostBuilder *implAsubboostBuilder) Dry(dry float64) AsubboostBuilder {
	return asubboostBuilder.withOption("dry", expr.Double(dry))
}

func (asubboostBuilder *implAsubboostBuilder) DryExpr(dry expr.Expr) AsubboostBuilder {
	return asubboostBuilder.withOption("dry", dry)
}

func (asubboostBuilder *implAsubboostBuilder) Wet(wet float64) AsubboostBuilder {
	return asubboostBuilder.withOption("wet", expr.Double(wet))
}

func (asubboostBuilder *implAsubboostBuilder) WetExpr(wet expr.Expr) AsubboostBuilder {
	return asubboostBuilder.withOption("wet", wet)
}

func (asubboostBuilder *implAsubboostBuilder) Boost(boost float64) AsubboostBuilder {
	return asubboostBuilder.withOption("boost", expr.Double(boost))
}

func (asubboostBuilder *implAsubboostBuilder) BoostExpr(boost expr.Expr) AsubboostBuilder {
	return asubboostBuilder.withOption("boost", boost)
}

func (asubboostBuilder *implAsubboostBuilder) Decay(decay float64) AsubboostBuilder {
	return asubboostBuilder.withOption("decay", expr.Double(decay))
}

func (asubboostBuilder *implAsubboostBuilder) DecayExpr(decay expr.Expr) AsubboostBuilder {
	return asubboostBuilder.withOption("decay", decay)
}

func (asubboostBuilder *implAsubboostBuilder) Feedback(feedback float64) AsubboostBuilder {
	return asubboostBuilder.withOption("feedback", expr.Double(feedback))
}

func (asubboostBuilder *implAsubboostBuilder) FeedbackExpr(feedback expr.Expr) AsubboostBuilder {
	return asubboostBuilder.withOption("feedback", feedback)
}

func (asubboostBuilder *implAsubboostBuilder) Cutoff(cutoff float64) AsubboostBuilder {
	return asubboostBuilder.withOption("cutoff", expr.Double(cutoff))
}

func (asubboostBuilder *implAsubboostBuilder) CutoffExpr(cutoff expr.Expr) AsubboostBuilder {
	return asubboostBuilder.withOption("cutoff", cutoff)
}

func (asubboostBuilder *implAsubboostBuilder) Slope(slope float64) AsubboostBuilder {
	return asubboostBuilder.withOption("slope", expr.Double(slope))
}

func (asubboostBuilder *implAsubboostBuilder) SlopeExpr(slope expr.Expr) AsubboostBuilder {
	return asubboostBuilder.withOption("slope", slope)
}

func (asubboostBuilder *implAsubboostBuilder) Delay(delay float64) AsubboostBuilder {
	return asubboostBuilder.withOption("delay", expr.Double(delay))
}

func (asubboostBuilder *implAsubboostBuilder) DelayExpr(delay expr.Expr) AsubboostBuilder {
	return asubboostBuilder.withOption("delay", delay)
}

func (asubboostBuilder *implAsubboostBuilder) Channels(channels string) AsubboostBuilder {
	return asubboostBuilder.withOption("channels", expr.String(channels))
}

func (asubboostBuilder *implAsubboostBuilder) ChannelsExpr(channels expr.Expr) AsubboostBuilder {
	return asubboostBuilder.withOption("channels", channels)
}

func (asubboostBuilder *implAsubboostBuilder) Enable(enable expr.Expr) AsubboostBuilder {
	return asubboostBuilder.withOption("enable", enable)
}
