// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// ArnndnBuilder Reduce noise from speech using Recurrent Neural Networks.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#arnndn
type ArnndnBuilder interface {
	filter.Filter
	// Model set model name.
	Model(model string) ArnndnBuilder
	// ModelExpr set model name.
	ModelExpr(model expr.Expr) ArnndnBuilder
	// M set model name.
	M(m string) ArnndnBuilder
	// MExpr set model name.
	MExpr(m expr.Expr) ArnndnBuilder
	// Mix set output vs input mix (from -1 to 1) (default 1).
	Mix(mix float32) ArnndnBuilder
	// MixExpr set output vs input mix (from -1 to 1) (default 1).
	MixExpr(mix expr.Expr) ArnndnBuilder
}

// Arnndn creates a new ArnndnBuilder to configure the "arnndn" filter.
func Arnndn(opts ...filter.Option) ArnndnBuilder {
	return &implArnndnBuilder{
		f: filter.New("arnndn", 1, opts...),
	}
}

type implArnndnBuilder struct {
	f filter.Filter
}

func (arnndnBuilder *implArnndnBuilder) String() string {
	return arnndnBuilder.f.String()
}

func (arnndnBuilder *implArnndnBuilder) Outputs() int {
	return arnndnBuilder.f.Outputs()
}

func (arnndnBuilder *implArnndnBuilder) With(key string, value expr.Expr) filter.Filter {
	return arnndnBuilder.withOption(key, value)
}

func (arnndnBuilder *implArnndnBuilder) withOption(key string, value expr.Expr) ArnndnBuilder {
	bCopy := *arnndnBuilder
	bCopy.f = arnndnBuilder.f.With(key, value)
	return &bCopy
}

func (arnndnBuilder *implArnndnBuilder) Model(model string) ArnndnBuilder {
	return arnndnBuilder.withOption("model", expr.String(model))
}

func (arnndnBuilder *implArnndnBuilder) ModelExpr(model expr.Expr) ArnndnBuilder {
	return arnndnBuilder.withOption("model", model)
}

func (arnndnBuilder *implArnndnBuilder) M(m string) ArnndnBuilder {
	return arnndnBuilder.withOption("m", expr.String(m))
}

func (arnndnBuilder *implArnndnBuilder) MExpr(m expr.Expr) ArnndnBuilder {
	return arnndnBuilder.withOption("m", m)
}

func (arnndnBuilder *implArnndnBuilder) Mix(mix float32) ArnndnBuilder {
	return arnndnBuilder.withOption("mix", expr.Float(mix))
}

func (arnndnBuilder *implArnndnBuilder) MixExpr(mix expr.Expr) ArnndnBuilder {
	return arnndnBuilder.withOption("mix", mix)
}
