// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// DblurBuilder Apply Directional Blur filter.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#dblur
type DblurBuilder interface {
	filter.Filter
	// Angle set angle (from 0 to 360) (default 45).
	Angle(angle float32) DblurBuilder
	// AngleExpr set angle (from 0 to 360) (default 45).
	AngleExpr(angle expr.Expr) DblurBuilder
	// Radius set radius (from 0 to 8192) (default 5).
	Radius(radius float32) DblurBuilder
	// RadiusExpr set radius (from 0 to 8192) (default 5).
	RadiusExpr(radius expr.Expr) DblurBuilder
	// Planes set planes to filter (from 0 to 15) (default 15).
	Planes(planes int) DblurBuilder
	// PlanesExpr set planes to filter (from 0 to 15) (default 15).
	PlanesExpr(planes expr.Expr) DblurBuilder
	// Enable expression to enable or disable the filter.
	Enable(enable expr.Expr) DblurBuilder
}

// Dblur creates a new DblurBuilder to configure the "dblur" filter.
func Dblur(opts ...filter.Option) DblurBuilder {
	return &implDblurBuilder{
		f: filter.New("dblur", 1, opts...),
	}
}

type implDblurBuilder struct {
	f filter.Filter
}

func (dblurBuilder *implDblurBuilder) String() string {
	return dblurBuilder.f.String()
}

func (dblurBuilder *implDblurBuilder) Outputs() int {
	return dblurBuilder.f.Outputs()
}

func (dblurBuilder *implDblurBuilder) With(key string, value expr.Expr) filter.Filter {
	return dblurBuilder.withOption(key, value)
}

func (dblurBuilder *implDblurBuilder) withOption(key string, value expr.Expr) DblurBuilder {
	bCopy := *dblurBuilder
	bCopy.f = dblurBuilder.f.With(key, value)
	return &bCopy
}

func (dblurBuilder *implDblurBuilder) Angle(angle float32) DblurBuilder {
	return dblurBuilder.withOption("angle", expr.Float(angle))
}

func (dblurBuilder *implDblurBuilder) AngleExpr(angle expr.Expr) DblurBuilder {
	return dblurBuilder.withOption("angle", angle)
}

func (dblurBuilder *implDblurBuilder) Radius(radius float32) DblurBuilder {
	return dblurBuilder.withOption("radius", expr.Float(radius))
}

func (dblurBuilder *implDblurBuilder) RadiusExpr(radius expr.Expr) DblurBuilder {
	return dblurBuilder.withOption("radius", radius)
}

func (dblurBuilder *implDblurBuilder) Planes(planes int) DblurBuilder {
	return dblurBuilder.withOption("planes", expr.Int(planes))
}

func (dblurBuilder *implDblurBuilder) PlanesExpr(planes expr.Expr) DblurBuilder {
	return dblurBuilder.withOption("planes", planes)
}

func (dblurBuilder *implDblurBuilder) Enable(enable expr.Expr) DblurBuilder {
	return dblurBuilder.withOption("enable", enable)
}
