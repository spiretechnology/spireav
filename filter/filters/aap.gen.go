// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// AapBuilder Apply Affine Projection algorithm to first audio stream.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#aap
type AapBuilder interface {
	filter.Filter
	// Order set the filter order (from 1 to 32767) (default 16).
	Order(order int) AapBuilder
	// Projection set the filter projection (from 1 to 256) (default 2).
	Projection(projection int) AapBuilder
	// Mu set the filter mu (from 0 to 1) (default 0.0001).
	Mu(mu float32) AapBuilder
	// MuExpr set the filter mu (from 0 to 1) (default 0.0001).
	MuExpr(mu expr.Expr) AapBuilder
	// Delta set the filter delta (from 0 to 1) (default 0.001).
	Delta(delta float32) AapBuilder
	// DeltaExpr set the filter delta (from 0 to 1) (default 0.001).
	DeltaExpr(delta expr.Expr) AapBuilder
	// OutMode set output mode (from 0 to 4) (default o).
	OutMode(outMode int) AapBuilder
	// OutModeExpr set output mode (from 0 to 4) (default o).
	OutModeExpr(outMode expr.Expr) AapBuilder
	// Precision set processing precision (from 0 to 2) (default auto).
	Precision(precision int) AapBuilder
}

// Aap creates a new AapBuilder to configure the "aap" filter.
func Aap(opts ...filter.Option) AapBuilder {
	return &implAapBuilder{
		f: filter.New("aap", 1, opts...),
	}
}

type implAapBuilder struct {
	f filter.Filter
}

func (aapBuilder *implAapBuilder) String() string {
	return aapBuilder.f.String()
}

func (aapBuilder *implAapBuilder) Outputs() int {
	return aapBuilder.f.Outputs()
}

func (aapBuilder *implAapBuilder) With(key string, value expr.Expr) filter.Filter {
	return aapBuilder.withOption(key, value)
}

func (aapBuilder *implAapBuilder) withOption(key string, value expr.Expr) AapBuilder {
	bCopy := *aapBuilder
	bCopy.f = aapBuilder.f.With(key, value)
	return &bCopy
}

func (aapBuilder *implAapBuilder) Order(order int) AapBuilder {
	return aapBuilder.withOption("order", expr.Int(order))
}

func (aapBuilder *implAapBuilder) Projection(projection int) AapBuilder {
	return aapBuilder.withOption("projection", expr.Int(projection))
}

func (aapBuilder *implAapBuilder) Mu(mu float32) AapBuilder {
	return aapBuilder.withOption("mu", expr.Float(mu))
}

func (aapBuilder *implAapBuilder) MuExpr(mu expr.Expr) AapBuilder {
	return aapBuilder.withOption("mu", mu)
}

func (aapBuilder *implAapBuilder) Delta(delta float32) AapBuilder {
	return aapBuilder.withOption("delta", expr.Float(delta))
}

func (aapBuilder *implAapBuilder) DeltaExpr(delta expr.Expr) AapBuilder {
	return aapBuilder.withOption("delta", delta)
}

func (aapBuilder *implAapBuilder) OutMode(outMode int) AapBuilder {
	return aapBuilder.withOption("out_mode", expr.Int(outMode))
}

func (aapBuilder *implAapBuilder) OutModeExpr(outMode expr.Expr) AapBuilder {
	return aapBuilder.withOption("out_mode", outMode)
}

func (aapBuilder *implAapBuilder) Precision(precision int) AapBuilder {
	return aapBuilder.withOption("precision", expr.Int(precision))
}
