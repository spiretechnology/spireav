// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"time"

	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// TrimBuilder Pick one continuous section from the input, drop the rest.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#trim
type TrimBuilder interface {
	filter.Filter
	// Start Timestamp of the first frame that should be passed (default INT64_MAX).
	Start(start time.Duration) TrimBuilder
	// Starti Timestamp of the first frame that should be passed (default INT64_MAX).
	Starti(starti time.Duration) TrimBuilder
	// End Timestamp of the first frame that should be dropped again (default INT64_MAX).
	End(end time.Duration) TrimBuilder
	// Endi Timestamp of the first frame that should be dropped again (default INT64_MAX).
	Endi(endi time.Duration) TrimBuilder
	// StartPts Timestamp of the first frame that should be  passed (from I64_MIN to I64_MAX) (default I64_MIN).
	StartPts(startPts int64) TrimBuilder
	// EndPts Timestamp of the first frame that should be dropped again (from I64_MIN to I64_MAX) (default I64_MIN).
	EndPts(endPts int64) TrimBuilder
	// Duration Maximum duration of the output (default 0).
	Duration(duration time.Duration) TrimBuilder
	// Durationi Maximum duration of the output (default 0).
	Durationi(durationi time.Duration) TrimBuilder
	// StartFrame Number of the first frame that should be passed to the output (from -1 to I64_MAX) (default -1).
	StartFrame(startFrame int64) TrimBuilder
	// EndFrame Number of the first frame that should be dropped again (from 0 to I64_MAX) (default I64_MAX).
	EndFrame(endFrame int64) TrimBuilder
}

// Trim creates a new TrimBuilder to configure the "trim" filter.
func Trim(opts ...filter.Option) TrimBuilder {
	return &implTrimBuilder{
		f: filter.New("trim", 1, opts...),
	}
}

type implTrimBuilder struct {
	f filter.Filter
}

func (trimBuilder *implTrimBuilder) String() string {
	return trimBuilder.f.String()
}

func (trimBuilder *implTrimBuilder) Outputs() int {
	return trimBuilder.f.Outputs()
}

func (trimBuilder *implTrimBuilder) With(key string, value expr.Expr) filter.Filter {
	return trimBuilder.withOption(key, value)
}

func (trimBuilder *implTrimBuilder) withOption(key string, value expr.Expr) TrimBuilder {
	bCopy := *trimBuilder
	bCopy.f = trimBuilder.f.With(key, value)
	return &bCopy
}

func (trimBuilder *implTrimBuilder) Start(start time.Duration) TrimBuilder {
	return trimBuilder.withOption("start", expr.Duration(start))
}

func (trimBuilder *implTrimBuilder) Starti(starti time.Duration) TrimBuilder {
	return trimBuilder.withOption("starti", expr.Duration(starti))
}

func (trimBuilder *implTrimBuilder) End(end time.Duration) TrimBuilder {
	return trimBuilder.withOption("end", expr.Duration(end))
}

func (trimBuilder *implTrimBuilder) Endi(endi time.Duration) TrimBuilder {
	return trimBuilder.withOption("endi", expr.Duration(endi))
}

func (trimBuilder *implTrimBuilder) StartPts(startPts int64) TrimBuilder {
	return trimBuilder.withOption("start_pts", expr.Int64(startPts))
}

func (trimBuilder *implTrimBuilder) EndPts(endPts int64) TrimBuilder {
	return trimBuilder.withOption("end_pts", expr.Int64(endPts))
}

func (trimBuilder *implTrimBuilder) Duration(duration time.Duration) TrimBuilder {
	return trimBuilder.withOption("duration", expr.Duration(duration))
}

func (trimBuilder *implTrimBuilder) Durationi(durationi time.Duration) TrimBuilder {
	return trimBuilder.withOption("durationi", expr.Duration(durationi))
}

func (trimBuilder *implTrimBuilder) StartFrame(startFrame int64) TrimBuilder {
	return trimBuilder.withOption("start_frame", expr.Int64(startFrame))
}

func (trimBuilder *implTrimBuilder) EndFrame(endFrame int64) TrimBuilder {
	return trimBuilder.withOption("end_frame", expr.Int64(endFrame))
}
