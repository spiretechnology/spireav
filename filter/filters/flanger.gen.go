// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// FlangerBuilder Apply a flanging effect to the audio.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#flanger
type FlangerBuilder interface {
	filter.Filter
	// Delay base delay in milliseconds (from 0 to 30) (default 0).
	Delay(delay float64) FlangerBuilder
	// Depth added swept delay in milliseconds (from 0 to 10) (default 2).
	Depth(depth float64) FlangerBuilder
	// Regen percentage regeneration (delayed signal feedback) (from -95 to 95) (default 0).
	Regen(regen float64) FlangerBuilder
	// Width percentage of delayed signal mixed with original (from 0 to 100) (default 71).
	Width(width float64) FlangerBuilder
	// Speed sweeps per second (Hz) (from 0.1 to 10) (default 0.5).
	Speed(speed float64) FlangerBuilder
	// Shape swept wave shape (from 0 to 1) (default sinusoidal).
	Shape(shape int) FlangerBuilder
	// Phase swept wave percentage phase-shift for multi-channel (from 0 to 100) (default 25).
	Phase(phase float64) FlangerBuilder
	// Interp delay-line interpolation (from 0 to 1) (default linear).
	Interp(interp int) FlangerBuilder
}

// Flanger creates a new FlangerBuilder to configure the "flanger" filter.
func Flanger(opts ...filter.Option) FlangerBuilder {
	return &implFlangerBuilder{
		f: filter.New("flanger", 1, opts...),
	}
}

type implFlangerBuilder struct {
	f filter.Filter
}

func (flangerBuilder *implFlangerBuilder) String() string {
	return flangerBuilder.f.String()
}

func (flangerBuilder *implFlangerBuilder) Outputs() int {
	return flangerBuilder.f.Outputs()
}

func (flangerBuilder *implFlangerBuilder) With(key string, value expr.Expr) filter.Filter {
	return flangerBuilder.withOption(key, value)
}

func (flangerBuilder *implFlangerBuilder) withOption(key string, value expr.Expr) FlangerBuilder {
	bCopy := *flangerBuilder
	bCopy.f = flangerBuilder.f.With(key, value)
	return &bCopy
}

func (flangerBuilder *implFlangerBuilder) Delay(delay float64) FlangerBuilder {
	return flangerBuilder.withOption("delay", expr.Double(delay))
}

func (flangerBuilder *implFlangerBuilder) Depth(depth float64) FlangerBuilder {
	return flangerBuilder.withOption("depth", expr.Double(depth))
}

func (flangerBuilder *implFlangerBuilder) Regen(regen float64) FlangerBuilder {
	return flangerBuilder.withOption("regen", expr.Double(regen))
}

func (flangerBuilder *implFlangerBuilder) Width(width float64) FlangerBuilder {
	return flangerBuilder.withOption("width", expr.Double(width))
}

func (flangerBuilder *implFlangerBuilder) Speed(speed float64) FlangerBuilder {
	return flangerBuilder.withOption("speed", expr.Double(speed))
}

func (flangerBuilder *implFlangerBuilder) Shape(shape int) FlangerBuilder {
	return flangerBuilder.withOption("shape", expr.Int(shape))
}

func (flangerBuilder *implFlangerBuilder) Phase(phase float64) FlangerBuilder {
	return flangerBuilder.withOption("phase", expr.Double(phase))
}

func (flangerBuilder *implFlangerBuilder) Interp(interp int) FlangerBuilder {
	return flangerBuilder.withOption("interp", expr.Int(interp))
}
