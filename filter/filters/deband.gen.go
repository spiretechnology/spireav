// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// DebandBuilder Debands video.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#deband
type DebandBuilder interface {
	filter.Filter
	// With1thr set 1st plane threshold (from 3e-05 to 0.5) (default 0.02).
	With1thr(val1thr float32) DebandBuilder
	// With1thrExpr set 1st plane threshold (from 3e-05 to 0.5) (default 0.02).
	With1thrExpr(val1thr expr.Expr) DebandBuilder
	// With2thr set 2nd plane threshold (from 3e-05 to 0.5) (default 0.02).
	With2thr(val2thr float32) DebandBuilder
	// With2thrExpr set 2nd plane threshold (from 3e-05 to 0.5) (default 0.02).
	With2thrExpr(val2thr expr.Expr) DebandBuilder
	// With3thr set 3rd plane threshold (from 3e-05 to 0.5) (default 0.02).
	With3thr(val3thr float32) DebandBuilder
	// With3thrExpr set 3rd plane threshold (from 3e-05 to 0.5) (default 0.02).
	With3thrExpr(val3thr expr.Expr) DebandBuilder
	// With4thr set 4th plane threshold (from 3e-05 to 0.5) (default 0.02).
	With4thr(val4thr float32) DebandBuilder
	// With4thrExpr set 4th plane threshold (from 3e-05 to 0.5) (default 0.02).
	With4thrExpr(val4thr expr.Expr) DebandBuilder
	// Range set range (from INT_MIN to INT_MAX) (default 16).
	Range(rng int) DebandBuilder
	// RangeExpr set range (from INT_MIN to INT_MAX) (default 16).
	RangeExpr(rng expr.Expr) DebandBuilder
	// R set range (from INT_MIN to INT_MAX) (default 16).
	R(r int) DebandBuilder
	// RExpr set range (from INT_MIN to INT_MAX) (default 16).
	RExpr(r expr.Expr) DebandBuilder
	// Direction set direction (from -6.28319 to 6.28319) (default 6.28319).
	Direction(direction float32) DebandBuilder
	// DirectionExpr set direction (from -6.28319 to 6.28319) (default 6.28319).
	DirectionExpr(direction expr.Expr) DebandBuilder
	// D set direction (from -6.28319 to 6.28319) (default 6.28319).
	D(d float32) DebandBuilder
	// DExpr set direction (from -6.28319 to 6.28319) (default 6.28319).
	DExpr(d expr.Expr) DebandBuilder
	// Blur set blur (default true).
	Blur(blur bool) DebandBuilder
	// BlurExpr set blur (default true).
	BlurExpr(blur expr.Expr) DebandBuilder
	// B set blur (default true).
	B(b bool) DebandBuilder
	// BExpr set blur (default true).
	BExpr(b expr.Expr) DebandBuilder
	// Coupling set plane coupling (default false).
	Coupling(coupling bool) DebandBuilder
	// CouplingExpr set plane coupling (default false).
	CouplingExpr(coupling expr.Expr) DebandBuilder
	// C set plane coupling (default false).
	C(c bool) DebandBuilder
	// CExpr set plane coupling (default false).
	CExpr(c expr.Expr) DebandBuilder
}

// Deband creates a new DebandBuilder to configure the "deband" filter.
func Deband(opts ...filter.Option) DebandBuilder {
	return &implDebandBuilder{
		f: filter.New("deband", 1, opts...),
	}
}

type implDebandBuilder struct {
	f filter.Filter
}

func (debandBuilder *implDebandBuilder) String() string {
	return debandBuilder.f.String()
}

func (debandBuilder *implDebandBuilder) Outputs() int {
	return debandBuilder.f.Outputs()
}

func (debandBuilder *implDebandBuilder) With(key string, value expr.Expr) filter.Filter {
	return debandBuilder.withOption(key, value)
}

func (debandBuilder *implDebandBuilder) withOption(key string, value expr.Expr) DebandBuilder {
	bCopy := *debandBuilder
	bCopy.f = debandBuilder.f.With(key, value)
	return &bCopy
}

func (debandBuilder *implDebandBuilder) With1thr(val1thr float32) DebandBuilder {
	return debandBuilder.withOption("1thr", expr.Float(val1thr))
}

func (debandBuilder *implDebandBuilder) With1thrExpr(val1thr expr.Expr) DebandBuilder {
	return debandBuilder.withOption("1thr", val1thr)
}

func (debandBuilder *implDebandBuilder) With2thr(val2thr float32) DebandBuilder {
	return debandBuilder.withOption("2thr", expr.Float(val2thr))
}

func (debandBuilder *implDebandBuilder) With2thrExpr(val2thr expr.Expr) DebandBuilder {
	return debandBuilder.withOption("2thr", val2thr)
}

func (debandBuilder *implDebandBuilder) With3thr(val3thr float32) DebandBuilder {
	return debandBuilder.withOption("3thr", expr.Float(val3thr))
}

func (debandBuilder *implDebandBuilder) With3thrExpr(val3thr expr.Expr) DebandBuilder {
	return debandBuilder.withOption("3thr", val3thr)
}

func (debandBuilder *implDebandBuilder) With4thr(val4thr float32) DebandBuilder {
	return debandBuilder.withOption("4thr", expr.Float(val4thr))
}

func (debandBuilder *implDebandBuilder) With4thrExpr(val4thr expr.Expr) DebandBuilder {
	return debandBuilder.withOption("4thr", val4thr)
}

func (debandBuilder *implDebandBuilder) Range(rng int) DebandBuilder {
	return debandBuilder.withOption("range", expr.Int(rng))
}

func (debandBuilder *implDebandBuilder) RangeExpr(rng expr.Expr) DebandBuilder {
	return debandBuilder.withOption("range", rng)
}

func (debandBuilder *implDebandBuilder) R(r int) DebandBuilder {
	return debandBuilder.withOption("r", expr.Int(r))
}

func (debandBuilder *implDebandBuilder) RExpr(r expr.Expr) DebandBuilder {
	return debandBuilder.withOption("r", r)
}

func (debandBuilder *implDebandBuilder) Direction(direction float32) DebandBuilder {
	return debandBuilder.withOption("direction", expr.Float(direction))
}

func (debandBuilder *implDebandBuilder) DirectionExpr(direction expr.Expr) DebandBuilder {
	return debandBuilder.withOption("direction", direction)
}

func (debandBuilder *implDebandBuilder) D(d float32) DebandBuilder {
	return debandBuilder.withOption("d", expr.Float(d))
}

func (debandBuilder *implDebandBuilder) DExpr(d expr.Expr) DebandBuilder {
	return debandBuilder.withOption("d", d)
}

func (debandBuilder *implDebandBuilder) Blur(blur bool) DebandBuilder {
	return debandBuilder.withOption("blur", expr.Bool(blur))
}

func (debandBuilder *implDebandBuilder) BlurExpr(blur expr.Expr) DebandBuilder {
	return debandBuilder.withOption("blur", blur)
}

func (debandBuilder *implDebandBuilder) B(b bool) DebandBuilder {
	return debandBuilder.withOption("b", expr.Bool(b))
}

func (debandBuilder *implDebandBuilder) BExpr(b expr.Expr) DebandBuilder {
	return debandBuilder.withOption("b", b)
}

func (debandBuilder *implDebandBuilder) Coupling(coupling bool) DebandBuilder {
	return debandBuilder.withOption("coupling", expr.Bool(coupling))
}

func (debandBuilder *implDebandBuilder) CouplingExpr(coupling expr.Expr) DebandBuilder {
	return debandBuilder.withOption("coupling", coupling)
}

func (debandBuilder *implDebandBuilder) C(c bool) DebandBuilder {
	return debandBuilder.withOption("c", expr.Bool(c))
}

func (debandBuilder *implDebandBuilder) CExpr(c expr.Expr) DebandBuilder {
	return debandBuilder.withOption("c", c)
}
