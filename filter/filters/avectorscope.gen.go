// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// AvectorscopeBuilder Convert input audio to vectorscope video output.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#avectorscope
type AvectorscopeBuilder interface {
	filter.Filter
	// Mode set mode (from 0 to 2) (default lissajous).
	Mode(mode int) AvectorscopeBuilder
	// ModeExpr set mode (from 0 to 2) (default lissajous).
	ModeExpr(mode expr.Expr) AvectorscopeBuilder
	// M set mode (from 0 to 2) (default lissajous).
	M(m int) AvectorscopeBuilder
	// MExpr set mode (from 0 to 2) (default lissajous).
	MExpr(m expr.Expr) AvectorscopeBuilder
	// Rate set video rate (default "25").
	Rate(rate expr.Rational) AvectorscopeBuilder
	// R set video rate (default "25").
	R(r expr.Rational) AvectorscopeBuilder
	// Size set video size (default "400x400").
	Size(size expr.Size) AvectorscopeBuilder
	// S set video size (default "400x400").
	S(s expr.Size) AvectorscopeBuilder
	// Rc set red contrast (from 0 to 255) (default 40).
	Rc(rc int) AvectorscopeBuilder
	// RcExpr set red contrast (from 0 to 255) (default 40).
	RcExpr(rc expr.Expr) AvectorscopeBuilder
	// Gc set green contrast (from 0 to 255) (default 160).
	Gc(gc int) AvectorscopeBuilder
	// GcExpr set green contrast (from 0 to 255) (default 160).
	GcExpr(gc expr.Expr) AvectorscopeBuilder
	// Bc set blue contrast (from 0 to 255) (default 80).
	Bc(bc int) AvectorscopeBuilder
	// BcExpr set blue contrast (from 0 to 255) (default 80).
	BcExpr(bc expr.Expr) AvectorscopeBuilder
	// Ac set alpha contrast (from 0 to 255) (default 255).
	Ac(ac int) AvectorscopeBuilder
	// AcExpr set alpha contrast (from 0 to 255) (default 255).
	AcExpr(ac expr.Expr) AvectorscopeBuilder
	// Rf set red fade (from 0 to 255) (default 15).
	Rf(rf int) AvectorscopeBuilder
	// RfExpr set red fade (from 0 to 255) (default 15).
	RfExpr(rf expr.Expr) AvectorscopeBuilder
	// Gf set green fade (from 0 to 255) (default 10).
	Gf(gf int) AvectorscopeBuilder
	// GfExpr set green fade (from 0 to 255) (default 10).
	GfExpr(gf expr.Expr) AvectorscopeBuilder
	// Bf set blue fade (from 0 to 255) (default 5).
	Bf(bf int) AvectorscopeBuilder
	// BfExpr set blue fade (from 0 to 255) (default 5).
	BfExpr(bf expr.Expr) AvectorscopeBuilder
	// Af set alpha fade (from 0 to 255) (default 5).
	Af(af int) AvectorscopeBuilder
	// AfExpr set alpha fade (from 0 to 255) (default 5).
	AfExpr(af expr.Expr) AvectorscopeBuilder
	// Zoom set zoom factor (from 0 to 10) (default 1).
	Zoom(zoom float64) AvectorscopeBuilder
	// ZoomExpr set zoom factor (from 0 to 10) (default 1).
	ZoomExpr(zoom expr.Expr) AvectorscopeBuilder
	// Draw set draw mode (from 0 to 2) (default dot).
	Draw(draw int) AvectorscopeBuilder
	// DrawExpr set draw mode (from 0 to 2) (default dot).
	DrawExpr(draw expr.Expr) AvectorscopeBuilder
	// Scale set amplitude scale mode (from 0 to 3) (default lin).
	Scale(scale int) AvectorscopeBuilder
	// ScaleExpr set amplitude scale mode (from 0 to 3) (default lin).
	ScaleExpr(scale expr.Expr) AvectorscopeBuilder
	// Swap swap x axis with y axis (default true).
	Swap(swap bool) AvectorscopeBuilder
	// SwapExpr swap x axis with y axis (default true).
	SwapExpr(swap expr.Expr) AvectorscopeBuilder
	// Mirror mirror axis (from 0 to 3) (default none).
	Mirror(mirror int) AvectorscopeBuilder
	// MirrorExpr mirror axis (from 0 to 3) (default none).
	MirrorExpr(mirror expr.Expr) AvectorscopeBuilder
}

// Avectorscope creates a new AvectorscopeBuilder to configure the "avectorscope" filter.
func Avectorscope(opts ...filter.Option) AvectorscopeBuilder {
	return &implAvectorscopeBuilder{
		f: filter.New("avectorscope", 1, opts...),
	}
}

type implAvectorscopeBuilder struct {
	f filter.Filter
}

func (avectorscopeBuilder *implAvectorscopeBuilder) String() string {
	return avectorscopeBuilder.f.String()
}

func (avectorscopeBuilder *implAvectorscopeBuilder) Outputs() int {
	return avectorscopeBuilder.f.Outputs()
}

func (avectorscopeBuilder *implAvectorscopeBuilder) With(key string, value expr.Expr) filter.Filter {
	return avectorscopeBuilder.withOption(key, value)
}

func (avectorscopeBuilder *implAvectorscopeBuilder) withOption(key string, value expr.Expr) AvectorscopeBuilder {
	bCopy := *avectorscopeBuilder
	bCopy.f = avectorscopeBuilder.f.With(key, value)
	return &bCopy
}

func (avectorscopeBuilder *implAvectorscopeBuilder) Mode(mode int) AvectorscopeBuilder {
	return avectorscopeBuilder.withOption("mode", expr.Int(mode))
}

func (avectorscopeBuilder *implAvectorscopeBuilder) ModeExpr(mode expr.Expr) AvectorscopeBuilder {
	return avectorscopeBuilder.withOption("mode", mode)
}

func (avectorscopeBuilder *implAvectorscopeBuilder) M(m int) AvectorscopeBuilder {
	return avectorscopeBuilder.withOption("m", expr.Int(m))
}

func (avectorscopeBuilder *implAvectorscopeBuilder) MExpr(m expr.Expr) AvectorscopeBuilder {
	return avectorscopeBuilder.withOption("m", m)
}

func (avectorscopeBuilder *implAvectorscopeBuilder) Rate(rate expr.Rational) AvectorscopeBuilder {
	return avectorscopeBuilder.withOption("rate", rate)
}

func (avectorscopeBuilder *implAvectorscopeBuilder) R(r expr.Rational) AvectorscopeBuilder {
	return avectorscopeBuilder.withOption("r", r)
}

func (avectorscopeBuilder *implAvectorscopeBuilder) Size(size expr.Size) AvectorscopeBuilder {
	return avectorscopeBuilder.withOption("size", size)
}

func (avectorscopeBuilder *implAvectorscopeBuilder) S(s expr.Size) AvectorscopeBuilder {
	return avectorscopeBuilder.withOption("s", s)
}

func (avectorscopeBuilder *implAvectorscopeBuilder) Rc(rc int) AvectorscopeBuilder {
	return avectorscopeBuilder.withOption("rc", expr.Int(rc))
}

func (avectorscopeBuilder *implAvectorscopeBuilder) RcExpr(rc expr.Expr) AvectorscopeBuilder {
	return avectorscopeBuilder.withOption("rc", rc)
}

func (avectorscopeBuilder *implAvectorscopeBuilder) Gc(gc int) AvectorscopeBuilder {
	return avectorscopeBuilder.withOption("gc", expr.Int(gc))
}

func (avectorscopeBuilder *implAvectorscopeBuilder) GcExpr(gc expr.Expr) AvectorscopeBuilder {
	return avectorscopeBuilder.withOption("gc", gc)
}

func (avectorscopeBuilder *implAvectorscopeBuilder) Bc(bc int) AvectorscopeBuilder {
	return avectorscopeBuilder.withOption("bc", expr.Int(bc))
}

func (avectorscopeBuilder *implAvectorscopeBuilder) BcExpr(bc expr.Expr) AvectorscopeBuilder {
	return avectorscopeBuilder.withOption("bc", bc)
}

func (avectorscopeBuilder *implAvectorscopeBuilder) Ac(ac int) AvectorscopeBuilder {
	return avectorscopeBuilder.withOption("ac", expr.Int(ac))
}

func (avectorscopeBuilder *implAvectorscopeBuilder) AcExpr(ac expr.Expr) AvectorscopeBuilder {
	return avectorscopeBuilder.withOption("ac", ac)
}

func (avectorscopeBuilder *implAvectorscopeBuilder) Rf(rf int) AvectorscopeBuilder {
	return avectorscopeBuilder.withOption("rf", expr.Int(rf))
}

func (avectorscopeBuilder *implAvectorscopeBuilder) RfExpr(rf expr.Expr) AvectorscopeBuilder {
	return avectorscopeBuilder.withOption("rf", rf)
}

func (avectorscopeBuilder *implAvectorscopeBuilder) Gf(gf int) AvectorscopeBuilder {
	return avectorscopeBuilder.withOption("gf", expr.Int(gf))
}

func (avectorscopeBuilder *implAvectorscopeBuilder) GfExpr(gf expr.Expr) AvectorscopeBuilder {
	return avectorscopeBuilder.withOption("gf", gf)
}

func (avectorscopeBuilder *implAvectorscopeBuilder) Bf(bf int) AvectorscopeBuilder {
	return avectorscopeBuilder.withOption("bf", expr.Int(bf))
}

func (avectorscopeBuilder *implAvectorscopeBuilder) BfExpr(bf expr.Expr) AvectorscopeBuilder {
	return avectorscopeBuilder.withOption("bf", bf)
}

func (avectorscopeBuilder *implAvectorscopeBuilder) Af(af int) AvectorscopeBuilder {
	return avectorscopeBuilder.withOption("af", expr.Int(af))
}

func (avectorscopeBuilder *implAvectorscopeBuilder) AfExpr(af expr.Expr) AvectorscopeBuilder {
	return avectorscopeBuilder.withOption("af", af)
}

func (avectorscopeBuilder *implAvectorscopeBuilder) Zoom(zoom float64) AvectorscopeBuilder {
	return avectorscopeBuilder.withOption("zoom", expr.Double(zoom))
}

func (avectorscopeBuilder *implAvectorscopeBuilder) ZoomExpr(zoom expr.Expr) AvectorscopeBuilder {
	return avectorscopeBuilder.withOption("zoom", zoom)
}

func (avectorscopeBuilder *implAvectorscopeBuilder) Draw(draw int) AvectorscopeBuilder {
	return avectorscopeBuilder.withOption("draw", expr.Int(draw))
}

func (avectorscopeBuilder *implAvectorscopeBuilder) DrawExpr(draw expr.Expr) AvectorscopeBuilder {
	return avectorscopeBuilder.withOption("draw", draw)
}

func (avectorscopeBuilder *implAvectorscopeBuilder) Scale(scale int) AvectorscopeBuilder {
	return avectorscopeBuilder.withOption("scale", expr.Int(scale))
}

func (avectorscopeBuilder *implAvectorscopeBuilder) ScaleExpr(scale expr.Expr) AvectorscopeBuilder {
	return avectorscopeBuilder.withOption("scale", scale)
}

func (avectorscopeBuilder *implAvectorscopeBuilder) Swap(swap bool) AvectorscopeBuilder {
	return avectorscopeBuilder.withOption("swap", expr.Bool(swap))
}

func (avectorscopeBuilder *implAvectorscopeBuilder) SwapExpr(swap expr.Expr) AvectorscopeBuilder {
	return avectorscopeBuilder.withOption("swap", swap)
}

func (avectorscopeBuilder *implAvectorscopeBuilder) Mirror(mirror int) AvectorscopeBuilder {
	return avectorscopeBuilder.withOption("mirror", expr.Int(mirror))
}

func (avectorscopeBuilder *implAvectorscopeBuilder) MirrorExpr(mirror expr.Expr) AvectorscopeBuilder {
	return avectorscopeBuilder.withOption("mirror", mirror)
}
