// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"time"

	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// AnoisesrcBuilder Generate a noise audio signal.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#anoisesrc
type AnoisesrcBuilder interface {
	filter.Filter
	// SampleRate set sample rate (from 15 to INT_MAX) (default 48000).
	SampleRate(sampleRate int) AnoisesrcBuilder
	// R set sample rate (from 15 to INT_MAX) (default 48000).
	R(r int) AnoisesrcBuilder
	// Amplitude set amplitude (from 0 to 1) (default 1).
	Amplitude(amplitude float64) AnoisesrcBuilder
	// A set amplitude (from 0 to 1) (default 1).
	A(a float64) AnoisesrcBuilder
	// Duration set duration (default 0).
	Duration(duration time.Duration) AnoisesrcBuilder
	// D set duration (default 0).
	D(d time.Duration) AnoisesrcBuilder
	// Color set noise color (from 0 to 5) (default white).
	Color(color int) AnoisesrcBuilder
	// Colour set noise color (from 0 to 5) (default white).
	Colour(colour int) AnoisesrcBuilder
	// C set noise color (from 0 to 5) (default white).
	C(c int) AnoisesrcBuilder
	// Seed set random seed (from -1 to UINT32_MAX) (default -1).
	Seed(seed int64) AnoisesrcBuilder
	// S set random seed (from -1 to UINT32_MAX) (default -1).
	S(s int64) AnoisesrcBuilder
	// NbSamples set the number of samples per requested frame (from 1 to INT_MAX) (default 1024).
	NbSamples(nbSamples int) AnoisesrcBuilder
	// N set the number of samples per requested frame (from 1 to INT_MAX) (default 1024).
	N(n int) AnoisesrcBuilder
	// Density set density (from 0 to 1) (default 0.05).
	Density(density float64) AnoisesrcBuilder
}

// Anoisesrc creates a new AnoisesrcBuilder to configure the "anoisesrc" filter.
func Anoisesrc(opts ...filter.Option) AnoisesrcBuilder {
	return &implAnoisesrcBuilder{
		f: filter.New("anoisesrc", 1, opts...),
	}
}

type implAnoisesrcBuilder struct {
	f filter.Filter
}

func (anoisesrcBuilder *implAnoisesrcBuilder) String() string {
	return anoisesrcBuilder.f.String()
}

func (anoisesrcBuilder *implAnoisesrcBuilder) Outputs() int {
	return anoisesrcBuilder.f.Outputs()
}

func (anoisesrcBuilder *implAnoisesrcBuilder) With(key string, value expr.Expr) filter.Filter {
	return anoisesrcBuilder.withOption(key, value)
}

func (anoisesrcBuilder *implAnoisesrcBuilder) withOption(key string, value expr.Expr) AnoisesrcBuilder {
	bCopy := *anoisesrcBuilder
	bCopy.f = anoisesrcBuilder.f.With(key, value)
	return &bCopy
}

func (anoisesrcBuilder *implAnoisesrcBuilder) SampleRate(sampleRate int) AnoisesrcBuilder {
	return anoisesrcBuilder.withOption("sample_rate", expr.Int(sampleRate))
}

func (anoisesrcBuilder *implAnoisesrcBuilder) R(r int) AnoisesrcBuilder {
	return anoisesrcBuilder.withOption("r", expr.Int(r))
}

func (anoisesrcBuilder *implAnoisesrcBuilder) Amplitude(amplitude float64) AnoisesrcBuilder {
	return anoisesrcBuilder.withOption("amplitude", expr.Double(amplitude))
}

func (anoisesrcBuilder *implAnoisesrcBuilder) A(a float64) AnoisesrcBuilder {
	return anoisesrcBuilder.withOption("a", expr.Double(a))
}

func (anoisesrcBuilder *implAnoisesrcBuilder) Duration(duration time.Duration) AnoisesrcBuilder {
	return anoisesrcBuilder.withOption("duration", expr.Duration(duration))
}

func (anoisesrcBuilder *implAnoisesrcBuilder) D(d time.Duration) AnoisesrcBuilder {
	return anoisesrcBuilder.withOption("d", expr.Duration(d))
}

func (anoisesrcBuilder *implAnoisesrcBuilder) Color(color int) AnoisesrcBuilder {
	return anoisesrcBuilder.withOption("color", expr.Int(color))
}

func (anoisesrcBuilder *implAnoisesrcBuilder) Colour(colour int) AnoisesrcBuilder {
	return anoisesrcBuilder.withOption("colour", expr.Int(colour))
}

func (anoisesrcBuilder *implAnoisesrcBuilder) C(c int) AnoisesrcBuilder {
	return anoisesrcBuilder.withOption("c", expr.Int(c))
}

func (anoisesrcBuilder *implAnoisesrcBuilder) Seed(seed int64) AnoisesrcBuilder {
	return anoisesrcBuilder.withOption("seed", expr.Int64(seed))
}

func (anoisesrcBuilder *implAnoisesrcBuilder) S(s int64) AnoisesrcBuilder {
	return anoisesrcBuilder.withOption("s", expr.Int64(s))
}

func (anoisesrcBuilder *implAnoisesrcBuilder) NbSamples(nbSamples int) AnoisesrcBuilder {
	return anoisesrcBuilder.withOption("nb_samples", expr.Int(nbSamples))
}

func (anoisesrcBuilder *implAnoisesrcBuilder) N(n int) AnoisesrcBuilder {
	return anoisesrcBuilder.withOption("n", expr.Int(n))
}

func (anoisesrcBuilder *implAnoisesrcBuilder) Density(density float64) AnoisesrcBuilder {
	return anoisesrcBuilder.withOption("density", expr.Double(density))
}
