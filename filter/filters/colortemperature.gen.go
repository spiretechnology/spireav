// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// ColortemperatureBuilder Adjust color temperature of video.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#colortemperature
type ColortemperatureBuilder interface {
	filter.Filter
	// Temperature set the temperature in Kelvin (from 1000 to 40000) (default 6500).
	Temperature(temperature float32) ColortemperatureBuilder
	// TemperatureExpr set the temperature in Kelvin (from 1000 to 40000) (default 6500).
	TemperatureExpr(temperature expr.Expr) ColortemperatureBuilder
	// Mix set the mix with filtered output (from 0 to 1) (default 1).
	Mix(mix float32) ColortemperatureBuilder
	// MixExpr set the mix with filtered output (from 0 to 1) (default 1).
	MixExpr(mix expr.Expr) ColortemperatureBuilder
	// Pl set the amount of preserving lightness (from 0 to 1) (default 0).
	Pl(pl float32) ColortemperatureBuilder
	// PlExpr set the amount of preserving lightness (from 0 to 1) (default 0).
	PlExpr(pl expr.Expr) ColortemperatureBuilder
	// Enable expression to enable or disable the filter.
	Enable(enable expr.Expr) ColortemperatureBuilder
}

// Colortemperature creates a new ColortemperatureBuilder to configure the "colortemperature" filter.
func Colortemperature(opts ...filter.Option) ColortemperatureBuilder {
	return &implColortemperatureBuilder{
		f: filter.New("colortemperature", 1, opts...),
	}
}

type implColortemperatureBuilder struct {
	f filter.Filter
}

func (colortemperatureBuilder *implColortemperatureBuilder) String() string {
	return colortemperatureBuilder.f.String()
}

func (colortemperatureBuilder *implColortemperatureBuilder) Outputs() int {
	return colortemperatureBuilder.f.Outputs()
}

func (colortemperatureBuilder *implColortemperatureBuilder) With(key string, value expr.Expr) filter.Filter {
	return colortemperatureBuilder.withOption(key, value)
}

func (colortemperatureBuilder *implColortemperatureBuilder) withOption(key string, value expr.Expr) ColortemperatureBuilder {
	bCopy := *colortemperatureBuilder
	bCopy.f = colortemperatureBuilder.f.With(key, value)
	return &bCopy
}

func (colortemperatureBuilder *implColortemperatureBuilder) Temperature(temperature float32) ColortemperatureBuilder {
	return colortemperatureBuilder.withOption("temperature", expr.Float(temperature))
}

func (colortemperatureBuilder *implColortemperatureBuilder) TemperatureExpr(temperature expr.Expr) ColortemperatureBuilder {
	return colortemperatureBuilder.withOption("temperature", temperature)
}

func (colortemperatureBuilder *implColortemperatureBuilder) Mix(mix float32) ColortemperatureBuilder {
	return colortemperatureBuilder.withOption("mix", expr.Float(mix))
}

func (colortemperatureBuilder *implColortemperatureBuilder) MixExpr(mix expr.Expr) ColortemperatureBuilder {
	return colortemperatureBuilder.withOption("mix", mix)
}

func (colortemperatureBuilder *implColortemperatureBuilder) Pl(pl float32) ColortemperatureBuilder {
	return colortemperatureBuilder.withOption("pl", expr.Float(pl))
}

func (colortemperatureBuilder *implColortemperatureBuilder) PlExpr(pl expr.Expr) ColortemperatureBuilder {
	return colortemperatureBuilder.withOption("pl", pl)
}

func (colortemperatureBuilder *implColortemperatureBuilder) Enable(enable expr.Expr) ColortemperatureBuilder {
	return colortemperatureBuilder.withOption("enable", enable)
}
