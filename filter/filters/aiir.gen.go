// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// AiirBuilder Apply Infinite Impulse Response filter with supplied coefficients.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#aiir
type AiirBuilder interface {
	filter.Filter
	// Zeros set B/numerator/zeros/reflection coefficients (default "1+0i 1-0i").
	Zeros(zeros string) AiirBuilder
	// Z set B/numerator/zeros/reflection coefficients (default "1+0i 1-0i").
	Z(z string) AiirBuilder
	// Poles set A/denominator/poles/ladder coefficients (default "1+0i 1-0i").
	Poles(poles string) AiirBuilder
	// P set A/denominator/poles/ladder coefficients (default "1+0i 1-0i").
	P(p string) AiirBuilder
	// Gains set channels gains (default "1|1").
	Gains(gains string) AiirBuilder
	// K set channels gains (default "1|1").
	K(k string) AiirBuilder
	// Dry set dry gain (from 0 to 1) (default 1).
	Dry(dry float64) AiirBuilder
	// Wet set wet gain (from 0 to 1) (default 1).
	Wet(wet float64) AiirBuilder
	// Format set coefficients format (from -2 to 4) (default zp).
	Format(format int) AiirBuilder
	// F set coefficients format (from -2 to 4) (default zp).
	F(f int) AiirBuilder
	// Process set kind of processing (from 0 to 2) (default s).
	Process(process int) AiirBuilder
	// R set kind of processing (from 0 to 2) (default s).
	R(r int) AiirBuilder
	// Precision set filtering precision (from 0 to 3) (default dbl).
	Precision(precision int) AiirBuilder
	// E set precision (from 0 to 3) (default dbl).
	E(e int) AiirBuilder
	// Normalize normalize coefficients (default true).
	Normalize(normalize bool) AiirBuilder
	// N normalize coefficients (default true).
	N(n bool) AiirBuilder
	// Mix set mix (from 0 to 1) (default 1).
	Mix(mix float64) AiirBuilder
	// Response show IR frequency response (default false).
	Response(response bool) AiirBuilder
	// Channel set IR channel to display frequency response (from 0 to 1024) (default 0).
	Channel(channel int) AiirBuilder
	// Size set video size (default "hd720").
	Size(size expr.Size) AiirBuilder
	// Rate set video rate (default "25").
	Rate(rate expr.Rational) AiirBuilder
}

// Aiir creates a new AiirBuilder to configure the "aiir" filter.
func Aiir(outputs int, opts ...filter.Option) AiirBuilder {
	f := filter.New("aiir", outputs, opts...)
	f = f.With("outputs", expr.Int(outputs))
	return &implAiirBuilder{f: f}
}

type implAiirBuilder struct {
	f filter.Filter
}

func (aiirBuilder *implAiirBuilder) String() string {
	return aiirBuilder.f.String()
}

func (aiirBuilder *implAiirBuilder) Outputs() int {
	return aiirBuilder.f.Outputs()
}

func (aiirBuilder *implAiirBuilder) With(key string, value expr.Expr) filter.Filter {
	return aiirBuilder.withOption(key, value)
}

func (aiirBuilder *implAiirBuilder) withOption(key string, value expr.Expr) AiirBuilder {
	bCopy := *aiirBuilder
	bCopy.f = aiirBuilder.f.With(key, value)
	return &bCopy
}

func (aiirBuilder *implAiirBuilder) Zeros(zeros string) AiirBuilder {
	return aiirBuilder.withOption("zeros", expr.String(zeros))
}

func (aiirBuilder *implAiirBuilder) Z(z string) AiirBuilder {
	return aiirBuilder.withOption("z", expr.String(z))
}

func (aiirBuilder *implAiirBuilder) Poles(poles string) AiirBuilder {
	return aiirBuilder.withOption("poles", expr.String(poles))
}

func (aiirBuilder *implAiirBuilder) P(p string) AiirBuilder {
	return aiirBuilder.withOption("p", expr.String(p))
}

func (aiirBuilder *implAiirBuilder) Gains(gains string) AiirBuilder {
	return aiirBuilder.withOption("gains", expr.String(gains))
}

func (aiirBuilder *implAiirBuilder) K(k string) AiirBuilder {
	return aiirBuilder.withOption("k", expr.String(k))
}

func (aiirBuilder *implAiirBuilder) Dry(dry float64) AiirBuilder {
	return aiirBuilder.withOption("dry", expr.Double(dry))
}

func (aiirBuilder *implAiirBuilder) Wet(wet float64) AiirBuilder {
	return aiirBuilder.withOption("wet", expr.Double(wet))
}

func (aiirBuilder *implAiirBuilder) Format(format int) AiirBuilder {
	return aiirBuilder.withOption("format", expr.Int(format))
}

func (aiirBuilder *implAiirBuilder) F(f int) AiirBuilder {
	return aiirBuilder.withOption("f", expr.Int(f))
}

func (aiirBuilder *implAiirBuilder) Process(process int) AiirBuilder {
	return aiirBuilder.withOption("process", expr.Int(process))
}

func (aiirBuilder *implAiirBuilder) R(r int) AiirBuilder {
	return aiirBuilder.withOption("r", expr.Int(r))
}

func (aiirBuilder *implAiirBuilder) Precision(precision int) AiirBuilder {
	return aiirBuilder.withOption("precision", expr.Int(precision))
}

func (aiirBuilder *implAiirBuilder) E(e int) AiirBuilder {
	return aiirBuilder.withOption("e", expr.Int(e))
}

func (aiirBuilder *implAiirBuilder) Normalize(normalize bool) AiirBuilder {
	return aiirBuilder.withOption("normalize", expr.Bool(normalize))
}

func (aiirBuilder *implAiirBuilder) N(n bool) AiirBuilder {
	return aiirBuilder.withOption("n", expr.Bool(n))
}

func (aiirBuilder *implAiirBuilder) Mix(mix float64) AiirBuilder {
	return aiirBuilder.withOption("mix", expr.Double(mix))
}

func (aiirBuilder *implAiirBuilder) Response(response bool) AiirBuilder {
	return aiirBuilder.withOption("response", expr.Bool(response))
}

func (aiirBuilder *implAiirBuilder) Channel(channel int) AiirBuilder {
	return aiirBuilder.withOption("channel", expr.Int(channel))
}

func (aiirBuilder *implAiirBuilder) Size(size expr.Size) AiirBuilder {
	return aiirBuilder.withOption("size", size)
}

func (aiirBuilder *implAiirBuilder) Rate(rate expr.Rational) AiirBuilder {
	return aiirBuilder.withOption("rate", rate)
}
