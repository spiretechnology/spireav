// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// DrawboxBuilder Draw a colored box on the input video.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#drawbox
type DrawboxBuilder interface {
	filter.Filter
	// X set horizontal position of the left box edge (default "0").
	X(x string) DrawboxBuilder
	// XExpr set horizontal position of the left box edge (default "0").
	XExpr(x expr.Expr) DrawboxBuilder
	// Y set vertical position of the top box edge (default "0").
	Y(y string) DrawboxBuilder
	// YExpr set vertical position of the top box edge (default "0").
	YExpr(y expr.Expr) DrawboxBuilder
	// Width set width of the box (default "0").
	Width(width string) DrawboxBuilder
	// WidthExpr set width of the box (default "0").
	WidthExpr(width expr.Expr) DrawboxBuilder
	// W set width of the box (default "0").
	W(w string) DrawboxBuilder
	// WExpr set width of the box (default "0").
	WExpr(w expr.Expr) DrawboxBuilder
	// Height set height of the box (default "0").
	Height(height string) DrawboxBuilder
	// HeightExpr set height of the box (default "0").
	HeightExpr(height expr.Expr) DrawboxBuilder
	// H set height of the box (default "0").
	H(h string) DrawboxBuilder
	// HExpr set height of the box (default "0").
	HExpr(h expr.Expr) DrawboxBuilder
	// Color set color of the box (default "black").
	Color(color string) DrawboxBuilder
	// ColorExpr set color of the box (default "black").
	ColorExpr(color expr.Expr) DrawboxBuilder
	// C set color of the box (default "black").
	C(c string) DrawboxBuilder
	// CExpr set color of the box (default "black").
	CExpr(c expr.Expr) DrawboxBuilder
	// Thickness set the box thickness (default "3").
	Thickness(thickness string) DrawboxBuilder
	// ThicknessExpr set the box thickness (default "3").
	ThicknessExpr(thickness expr.Expr) DrawboxBuilder
	// T set the box thickness (default "3").
	T(t string) DrawboxBuilder
	// TExpr set the box thickness (default "3").
	TExpr(t expr.Expr) DrawboxBuilder
	// Replace replace color & alpha (default false).
	Replace(replace bool) DrawboxBuilder
	// ReplaceExpr replace color & alpha (default false).
	ReplaceExpr(replace expr.Expr) DrawboxBuilder
	// BoxSource use datas from bounding box in side data.
	BoxSource(boxSource string) DrawboxBuilder
	// BoxSourceExpr use datas from bounding box in side data.
	BoxSourceExpr(boxSource expr.Expr) DrawboxBuilder
	// Enable expression to enable or disable the filter.
	Enable(enable expr.Expr) DrawboxBuilder
}

// Drawbox creates a new DrawboxBuilder to configure the "drawbox" filter.
func Drawbox(opts ...filter.Option) DrawboxBuilder {
	return &implDrawboxBuilder{
		f: filter.New("drawbox", 1, opts...),
	}
}

type implDrawboxBuilder struct {
	f filter.Filter
}

func (drawboxBuilder *implDrawboxBuilder) String() string {
	return drawboxBuilder.f.String()
}

func (drawboxBuilder *implDrawboxBuilder) Outputs() int {
	return drawboxBuilder.f.Outputs()
}

func (drawboxBuilder *implDrawboxBuilder) With(key string, value expr.Expr) filter.Filter {
	return drawboxBuilder.withOption(key, value)
}

func (drawboxBuilder *implDrawboxBuilder) withOption(key string, value expr.Expr) DrawboxBuilder {
	bCopy := *drawboxBuilder
	bCopy.f = drawboxBuilder.f.With(key, value)
	return &bCopy
}

func (drawboxBuilder *implDrawboxBuilder) X(x string) DrawboxBuilder {
	return drawboxBuilder.withOption("x", expr.String(x))
}

func (drawboxBuilder *implDrawboxBuilder) XExpr(x expr.Expr) DrawboxBuilder {
	return drawboxBuilder.withOption("x", x)
}

func (drawboxBuilder *implDrawboxBuilder) Y(y string) DrawboxBuilder {
	return drawboxBuilder.withOption("y", expr.String(y))
}

func (drawboxBuilder *implDrawboxBuilder) YExpr(y expr.Expr) DrawboxBuilder {
	return drawboxBuilder.withOption("y", y)
}

func (drawboxBuilder *implDrawboxBuilder) Width(width string) DrawboxBuilder {
	return drawboxBuilder.withOption("width", expr.String(width))
}

func (drawboxBuilder *implDrawboxBuilder) WidthExpr(width expr.Expr) DrawboxBuilder {
	return drawboxBuilder.withOption("width", width)
}

func (drawboxBuilder *implDrawboxBuilder) W(w string) DrawboxBuilder {
	return drawboxBuilder.withOption("w", expr.String(w))
}

func (drawboxBuilder *implDrawboxBuilder) WExpr(w expr.Expr) DrawboxBuilder {
	return drawboxBuilder.withOption("w", w)
}

func (drawboxBuilder *implDrawboxBuilder) Height(height string) DrawboxBuilder {
	return drawboxBuilder.withOption("height", expr.String(height))
}

func (drawboxBuilder *implDrawboxBuilder) HeightExpr(height expr.Expr) DrawboxBuilder {
	return drawboxBuilder.withOption("height", height)
}

func (drawboxBuilder *implDrawboxBuilder) H(h string) DrawboxBuilder {
	return drawboxBuilder.withOption("h", expr.String(h))
}

func (drawboxBuilder *implDrawboxBuilder) HExpr(h expr.Expr) DrawboxBuilder {
	return drawboxBuilder.withOption("h", h)
}

func (drawboxBuilder *implDrawboxBuilder) Color(color string) DrawboxBuilder {
	return drawboxBuilder.withOption("color", expr.String(color))
}

func (drawboxBuilder *implDrawboxBuilder) ColorExpr(color expr.Expr) DrawboxBuilder {
	return drawboxBuilder.withOption("color", color)
}

func (drawboxBuilder *implDrawboxBuilder) C(c string) DrawboxBuilder {
	return drawboxBuilder.withOption("c", expr.String(c))
}

func (drawboxBuilder *implDrawboxBuilder) CExpr(c expr.Expr) DrawboxBuilder {
	return drawboxBuilder.withOption("c", c)
}

func (drawboxBuilder *implDrawboxBuilder) Thickness(thickness string) DrawboxBuilder {
	return drawboxBuilder.withOption("thickness", expr.String(thickness))
}

func (drawboxBuilder *implDrawboxBuilder) ThicknessExpr(thickness expr.Expr) DrawboxBuilder {
	return drawboxBuilder.withOption("thickness", thickness)
}

func (drawboxBuilder *implDrawboxBuilder) T(t string) DrawboxBuilder {
	return drawboxBuilder.withOption("t", expr.String(t))
}

func (drawboxBuilder *implDrawboxBuilder) TExpr(t expr.Expr) DrawboxBuilder {
	return drawboxBuilder.withOption("t", t)
}

func (drawboxBuilder *implDrawboxBuilder) Replace(replace bool) DrawboxBuilder {
	return drawboxBuilder.withOption("replace", expr.Bool(replace))
}

func (drawboxBuilder *implDrawboxBuilder) ReplaceExpr(replace expr.Expr) DrawboxBuilder {
	return drawboxBuilder.withOption("replace", replace)
}

func (drawboxBuilder *implDrawboxBuilder) BoxSource(boxSource string) DrawboxBuilder {
	return drawboxBuilder.withOption("box_source", expr.String(boxSource))
}

func (drawboxBuilder *implDrawboxBuilder) BoxSourceExpr(boxSource expr.Expr) DrawboxBuilder {
	return drawboxBuilder.withOption("box_source", boxSource)
}

func (drawboxBuilder *implDrawboxBuilder) Enable(enable expr.Expr) DrawboxBuilder {
	return drawboxBuilder.withOption("enable", enable)
}
