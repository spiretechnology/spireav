// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// ChromakeyBuilder Turns a certain color into transparency. Operates on YUV colors.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#chromakey
type ChromakeyBuilder interface {
	filter.Filter
	// Color set the chromakey key color (default "black").
	Color(color expr.Color) ChromakeyBuilder
	// ColorExpr set the chromakey key color (default "black").
	ColorExpr(color expr.Expr) ChromakeyBuilder
	// Similarity set the chromakey similarity value (from 1e-05 to 1) (default 0.01).
	Similarity(similarity float32) ChromakeyBuilder
	// SimilarityExpr set the chromakey similarity value (from 1e-05 to 1) (default 0.01).
	SimilarityExpr(similarity expr.Expr) ChromakeyBuilder
	// Blend set the chromakey key blend value (from 0 to 1) (default 0).
	Blend(blend float32) ChromakeyBuilder
	// BlendExpr set the chromakey key blend value (from 0 to 1) (default 0).
	BlendExpr(blend expr.Expr) ChromakeyBuilder
	// Yuv color parameter is in yuv instead of rgb (default false).
	Yuv(yuv bool) ChromakeyBuilder
	// YuvExpr color parameter is in yuv instead of rgb (default false).
	YuvExpr(yuv expr.Expr) ChromakeyBuilder
}

// Chromakey creates a new ChromakeyBuilder to configure the "chromakey" filter.
func Chromakey(opts ...filter.Option) ChromakeyBuilder {
	return &implChromakeyBuilder{
		f: filter.New("chromakey", 1, opts...),
	}
}

type implChromakeyBuilder struct {
	f filter.Filter
}

func (chromakeyBuilder *implChromakeyBuilder) String() string {
	return chromakeyBuilder.f.String()
}

func (chromakeyBuilder *implChromakeyBuilder) Outputs() int {
	return chromakeyBuilder.f.Outputs()
}

func (chromakeyBuilder *implChromakeyBuilder) With(key string, value expr.Expr) filter.Filter {
	return chromakeyBuilder.withOption(key, value)
}

func (chromakeyBuilder *implChromakeyBuilder) withOption(key string, value expr.Expr) ChromakeyBuilder {
	bCopy := *chromakeyBuilder
	bCopy.f = chromakeyBuilder.f.With(key, value)
	return &bCopy
}

func (chromakeyBuilder *implChromakeyBuilder) Color(color expr.Color) ChromakeyBuilder {
	return chromakeyBuilder.withOption("color", color)
}

func (chromakeyBuilder *implChromakeyBuilder) ColorExpr(color expr.Expr) ChromakeyBuilder {
	return chromakeyBuilder.withOption("color", color)
}

func (chromakeyBuilder *implChromakeyBuilder) Similarity(similarity float32) ChromakeyBuilder {
	return chromakeyBuilder.withOption("similarity", expr.Float(similarity))
}

func (chromakeyBuilder *implChromakeyBuilder) SimilarityExpr(similarity expr.Expr) ChromakeyBuilder {
	return chromakeyBuilder.withOption("similarity", similarity)
}

func (chromakeyBuilder *implChromakeyBuilder) Blend(blend float32) ChromakeyBuilder {
	return chromakeyBuilder.withOption("blend", expr.Float(blend))
}

func (chromakeyBuilder *implChromakeyBuilder) BlendExpr(blend expr.Expr) ChromakeyBuilder {
	return chromakeyBuilder.withOption("blend", blend)
}

func (chromakeyBuilder *implChromakeyBuilder) Yuv(yuv bool) ChromakeyBuilder {
	return chromakeyBuilder.withOption("yuv", expr.Bool(yuv))
}

func (chromakeyBuilder *implChromakeyBuilder) YuvExpr(yuv expr.Expr) ChromakeyBuilder {
	return chromakeyBuilder.withOption("yuv", yuv)
}
