// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// HstackBuilder Stack video inputs horizontally.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#hstack
type HstackBuilder interface {
	filter.Filter
	// Inputs set number of inputs (from 2 to INT_MAX) (default 2).
	Inputs(inputs int) HstackBuilder
	// Shortest force termination when the shortest input terminates (default false).
	Shortest(shortest bool) HstackBuilder
}

// Hstack creates a new HstackBuilder to configure the "hstack" filter.
func Hstack(opts ...filter.Option) HstackBuilder {
	return &implHstackBuilder{
		f: filter.New("hstack", 1, opts...),
	}
}

type implHstackBuilder struct {
	f filter.Filter
}

func (hstackBuilder *implHstackBuilder) String() string {
	return hstackBuilder.f.String()
}

func (hstackBuilder *implHstackBuilder) Outputs() int {
	return hstackBuilder.f.Outputs()
}

func (hstackBuilder *implHstackBuilder) With(key string, value expr.Expr) filter.Filter {
	return hstackBuilder.withOption(key, value)
}

func (hstackBuilder *implHstackBuilder) withOption(key string, value expr.Expr) HstackBuilder {
	bCopy := *hstackBuilder
	bCopy.f = hstackBuilder.f.With(key, value)
	return &bCopy
}

func (hstackBuilder *implHstackBuilder) Inputs(inputs int) HstackBuilder {
	return hstackBuilder.withOption("inputs", expr.Int(inputs))
}

func (hstackBuilder *implHstackBuilder) Shortest(shortest bool) HstackBuilder {
	return hstackBuilder.withOption("shortest", expr.Bool(shortest))
}
