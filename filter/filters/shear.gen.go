// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// ShearBuilder Shear transform the input image.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#shear
type ShearBuilder interface {
	filter.Filter
	// Shx set x shear factor (from -2 to 2) (default 0).
	Shx(shx float32) ShearBuilder
	// ShxExpr set x shear factor (from -2 to 2) (default 0).
	ShxExpr(shx expr.Expr) ShearBuilder
	// Shy set y shear factor (from -2 to 2) (default 0).
	Shy(shy float32) ShearBuilder
	// ShyExpr set y shear factor (from -2 to 2) (default 0).
	ShyExpr(shy expr.Expr) ShearBuilder
	// Fillcolor set background fill color (default "black").
	Fillcolor(fillcolor string) ShearBuilder
	// FillcolorExpr set background fill color (default "black").
	FillcolorExpr(fillcolor expr.Expr) ShearBuilder
	// C set background fill color (default "black").
	C(c string) ShearBuilder
	// CExpr set background fill color (default "black").
	CExpr(c expr.Expr) ShearBuilder
	// Interp set interpolation (from 0 to 1) (default bilinear).
	Interp(interp int) ShearBuilder
	// InterpExpr set interpolation (from 0 to 1) (default bilinear).
	InterpExpr(interp expr.Expr) ShearBuilder
}

// Shear creates a new ShearBuilder to configure the "shear" filter.
func Shear(opts ...filter.Option) ShearBuilder {
	return &implShearBuilder{
		f: filter.New("shear", 1, opts...),
	}
}

type implShearBuilder struct {
	f filter.Filter
}

func (shearBuilder *implShearBuilder) String() string {
	return shearBuilder.f.String()
}

func (shearBuilder *implShearBuilder) Outputs() int {
	return shearBuilder.f.Outputs()
}

func (shearBuilder *implShearBuilder) With(key string, value expr.Expr) filter.Filter {
	return shearBuilder.withOption(key, value)
}

func (shearBuilder *implShearBuilder) withOption(key string, value expr.Expr) ShearBuilder {
	bCopy := *shearBuilder
	bCopy.f = shearBuilder.f.With(key, value)
	return &bCopy
}

func (shearBuilder *implShearBuilder) Shx(shx float32) ShearBuilder {
	return shearBuilder.withOption("shx", expr.Float(shx))
}

func (shearBuilder *implShearBuilder) ShxExpr(shx expr.Expr) ShearBuilder {
	return shearBuilder.withOption("shx", shx)
}

func (shearBuilder *implShearBuilder) Shy(shy float32) ShearBuilder {
	return shearBuilder.withOption("shy", expr.Float(shy))
}

func (shearBuilder *implShearBuilder) ShyExpr(shy expr.Expr) ShearBuilder {
	return shearBuilder.withOption("shy", shy)
}

func (shearBuilder *implShearBuilder) Fillcolor(fillcolor string) ShearBuilder {
	return shearBuilder.withOption("fillcolor", expr.String(fillcolor))
}

func (shearBuilder *implShearBuilder) FillcolorExpr(fillcolor expr.Expr) ShearBuilder {
	return shearBuilder.withOption("fillcolor", fillcolor)
}

func (shearBuilder *implShearBuilder) C(c string) ShearBuilder {
	return shearBuilder.withOption("c", expr.String(c))
}

func (shearBuilder *implShearBuilder) CExpr(c expr.Expr) ShearBuilder {
	return shearBuilder.withOption("c", c)
}

func (shearBuilder *implShearBuilder) Interp(interp int) ShearBuilder {
	return shearBuilder.withOption("interp", expr.Int(interp))
}

func (shearBuilder *implShearBuilder) InterpExpr(interp expr.Expr) ShearBuilder {
	return shearBuilder.withOption("interp", interp)
}
