// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// MaskedminBuilder Apply filtering with minimum difference of two streams.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#maskedmin
type MaskedminBuilder interface {
	filter.Filter
	// Planes set planes (from 0 to 15) (default 15).
	Planes(planes int) MaskedminBuilder
	// PlanesExpr set planes (from 0 to 15) (default 15).
	PlanesExpr(planes expr.Expr) MaskedminBuilder
}

// Maskedmin creates a new MaskedminBuilder to configure the "maskedmin" filter.
func Maskedmin(opts ...filter.Option) MaskedminBuilder {
	return &implMaskedminBuilder{
		f: filter.New("maskedmin", 1, opts...),
	}
}

type implMaskedminBuilder struct {
	f filter.Filter
}

func (maskedminBuilder *implMaskedminBuilder) String() string {
	return maskedminBuilder.f.String()
}

func (maskedminBuilder *implMaskedminBuilder) Outputs() int {
	return maskedminBuilder.f.Outputs()
}

func (maskedminBuilder *implMaskedminBuilder) With(key string, value expr.Expr) filter.Filter {
	return maskedminBuilder.withOption(key, value)
}

func (maskedminBuilder *implMaskedminBuilder) withOption(key string, value expr.Expr) MaskedminBuilder {
	bCopy := *maskedminBuilder
	bCopy.f = maskedminBuilder.f.With(key, value)
	return &bCopy
}

func (maskedminBuilder *implMaskedminBuilder) Planes(planes int) MaskedminBuilder {
	return maskedminBuilder.withOption("planes", expr.Int(planes))
}

func (maskedminBuilder *implMaskedminBuilder) PlanesExpr(planes expr.Expr) MaskedminBuilder {
	return maskedminBuilder.withOption("planes", planes)
}
