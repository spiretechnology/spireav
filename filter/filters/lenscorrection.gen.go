// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// LenscorrectionBuilder Rectify the image by correcting for lens distortion.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#lenscorrection
type LenscorrectionBuilder interface {
	filter.Filter
	// Cx set relative center x (from 0 to 1) (default 0.5).
	Cx(cx float64) LenscorrectionBuilder
	// CxExpr set relative center x (from 0 to 1) (default 0.5).
	CxExpr(cx expr.Expr) LenscorrectionBuilder
	// Cy set relative center y (from 0 to 1) (default 0.5).
	Cy(cy float64) LenscorrectionBuilder
	// CyExpr set relative center y (from 0 to 1) (default 0.5).
	CyExpr(cy expr.Expr) LenscorrectionBuilder
	// K1 set quadratic distortion factor (from -1 to 1) (default 0).
	K1(k1 float64) LenscorrectionBuilder
	// K1Expr set quadratic distortion factor (from -1 to 1) (default 0).
	K1Expr(k1 expr.Expr) LenscorrectionBuilder
	// K2 set double quadratic distortion factor (from -1 to 1) (default 0).
	K2(k2 float64) LenscorrectionBuilder
	// K2Expr set double quadratic distortion factor (from -1 to 1) (default 0).
	K2Expr(k2 expr.Expr) LenscorrectionBuilder
	// I set interpolation type (from 0 to 64) (default nearest).
	I(i int) LenscorrectionBuilder
	// IExpr set interpolation type (from 0 to 64) (default nearest).
	IExpr(i expr.Expr) LenscorrectionBuilder
	// Fc set the color of the unmapped pixels (default "black@0").
	Fc(fc expr.Color) LenscorrectionBuilder
	// FcExpr set the color of the unmapped pixels (default "black@0").
	FcExpr(fc expr.Expr) LenscorrectionBuilder
}

// Lenscorrection creates a new LenscorrectionBuilder to configure the "lenscorrection" filter.
func Lenscorrection(opts ...filter.Option) LenscorrectionBuilder {
	return &implLenscorrectionBuilder{
		f: filter.New("lenscorrection", 1, opts...),
	}
}

type implLenscorrectionBuilder struct {
	f filter.Filter
}

func (lenscorrectionBuilder *implLenscorrectionBuilder) String() string {
	return lenscorrectionBuilder.f.String()
}

func (lenscorrectionBuilder *implLenscorrectionBuilder) Outputs() int {
	return lenscorrectionBuilder.f.Outputs()
}

func (lenscorrectionBuilder *implLenscorrectionBuilder) With(key string, value expr.Expr) filter.Filter {
	return lenscorrectionBuilder.withOption(key, value)
}

func (lenscorrectionBuilder *implLenscorrectionBuilder) withOption(key string, value expr.Expr) LenscorrectionBuilder {
	bCopy := *lenscorrectionBuilder
	bCopy.f = lenscorrectionBuilder.f.With(key, value)
	return &bCopy
}

func (lenscorrectionBuilder *implLenscorrectionBuilder) Cx(cx float64) LenscorrectionBuilder {
	return lenscorrectionBuilder.withOption("cx", expr.Double(cx))
}

func (lenscorrectionBuilder *implLenscorrectionBuilder) CxExpr(cx expr.Expr) LenscorrectionBuilder {
	return lenscorrectionBuilder.withOption("cx", cx)
}

func (lenscorrectionBuilder *implLenscorrectionBuilder) Cy(cy float64) LenscorrectionBuilder {
	return lenscorrectionBuilder.withOption("cy", expr.Double(cy))
}

func (lenscorrectionBuilder *implLenscorrectionBuilder) CyExpr(cy expr.Expr) LenscorrectionBuilder {
	return lenscorrectionBuilder.withOption("cy", cy)
}

func (lenscorrectionBuilder *implLenscorrectionBuilder) K1(k1 float64) LenscorrectionBuilder {
	return lenscorrectionBuilder.withOption("k1", expr.Double(k1))
}

func (lenscorrectionBuilder *implLenscorrectionBuilder) K1Expr(k1 expr.Expr) LenscorrectionBuilder {
	return lenscorrectionBuilder.withOption("k1", k1)
}

func (lenscorrectionBuilder *implLenscorrectionBuilder) K2(k2 float64) LenscorrectionBuilder {
	return lenscorrectionBuilder.withOption("k2", expr.Double(k2))
}

func (lenscorrectionBuilder *implLenscorrectionBuilder) K2Expr(k2 expr.Expr) LenscorrectionBuilder {
	return lenscorrectionBuilder.withOption("k2", k2)
}

func (lenscorrectionBuilder *implLenscorrectionBuilder) I(i int) LenscorrectionBuilder {
	return lenscorrectionBuilder.withOption("i", expr.Int(i))
}

func (lenscorrectionBuilder *implLenscorrectionBuilder) IExpr(i expr.Expr) LenscorrectionBuilder {
	return lenscorrectionBuilder.withOption("i", i)
}

func (lenscorrectionBuilder *implLenscorrectionBuilder) Fc(fc expr.Color) LenscorrectionBuilder {
	return lenscorrectionBuilder.withOption("fc", fc)
}

func (lenscorrectionBuilder *implLenscorrectionBuilder) FcExpr(fc expr.Expr) LenscorrectionBuilder {
	return lenscorrectionBuilder.withOption("fc", fc)
}
