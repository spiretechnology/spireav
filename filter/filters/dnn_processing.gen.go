// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// DnnProcessingBuilder Apply DNN processing filter to the input.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#dnn_processing
type DnnProcessingBuilder interface {
	filter.Filter
	// DnnBackend DNN backend (from INT_MIN to INT_MAX) (default 1).
	DnnBackend(dnnBackend int) DnnProcessingBuilder
	// Model path to model file.
	Model(model string) DnnProcessingBuilder
	// Input input name of the model.
	Input(input string) DnnProcessingBuilder
	// Output output name of the model.
	Output(output string) DnnProcessingBuilder
	// BackendConfigs backend configs.
	BackendConfigs(backendConfigs string) DnnProcessingBuilder
	// Options backend configs (deprecated, use backend_configs).
	Options(options string) DnnProcessingBuilder
	// Async use DNN async inference (ignored, use backend_configs='async=1') (default true).
	Async(async bool) DnnProcessingBuilder
}

// DnnProcessing creates a new DnnProcessingBuilder to configure the "dnn_processing" filter.
func DnnProcessing(opts ...filter.Option) DnnProcessingBuilder {
	return &implDnnProcessingBuilder{
		f: filter.New("dnn_processing", 1, opts...),
	}
}

type implDnnProcessingBuilder struct {
	f filter.Filter
}

func (dnn_processingBuilder *implDnnProcessingBuilder) String() string {
	return dnn_processingBuilder.f.String()
}

func (dnn_processingBuilder *implDnnProcessingBuilder) Outputs() int {
	return dnn_processingBuilder.f.Outputs()
}

func (dnn_processingBuilder *implDnnProcessingBuilder) With(key string, value expr.Expr) filter.Filter {
	return dnn_processingBuilder.withOption(key, value)
}

func (dnn_processingBuilder *implDnnProcessingBuilder) withOption(key string, value expr.Expr) DnnProcessingBuilder {
	bCopy := *dnn_processingBuilder
	bCopy.f = dnn_processingBuilder.f.With(key, value)
	return &bCopy
}

func (dnn_processingBuilder *implDnnProcessingBuilder) DnnBackend(dnnBackend int) DnnProcessingBuilder {
	return dnn_processingBuilder.withOption("dnn_backend", expr.Int(dnnBackend))
}

func (dnn_processingBuilder *implDnnProcessingBuilder) Model(model string) DnnProcessingBuilder {
	return dnn_processingBuilder.withOption("model", expr.String(model))
}

func (dnn_processingBuilder *implDnnProcessingBuilder) Input(input string) DnnProcessingBuilder {
	return dnn_processingBuilder.withOption("input", expr.String(input))
}

func (dnn_processingBuilder *implDnnProcessingBuilder) Output(output string) DnnProcessingBuilder {
	return dnn_processingBuilder.withOption("output", expr.String(output))
}

func (dnn_processingBuilder *implDnnProcessingBuilder) BackendConfigs(backendConfigs string) DnnProcessingBuilder {
	return dnn_processingBuilder.withOption("backend_configs", expr.String(backendConfigs))
}

func (dnn_processingBuilder *implDnnProcessingBuilder) Options(options string) DnnProcessingBuilder {
	return dnn_processingBuilder.withOption("options", expr.String(options))
}

func (dnn_processingBuilder *implDnnProcessingBuilder) Async(async bool) DnnProcessingBuilder {
	return dnn_processingBuilder.withOption("async", expr.Bool(async))
}
