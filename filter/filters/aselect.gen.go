// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// AselectBuilder Select audio frames to pass in output.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#aselect
type AselectBuilder interface {
	filter.Filter
	// Expr set an expression to use for selecting frames (default "1").
	Expr(expression string) AselectBuilder
	// E set an expression to use for selecting frames (default "1").
	E(e string) AselectBuilder
	// N set the number of outputs (from 1 to INT_MAX) (default 1).
	N(n int) AselectBuilder
}

// Aselect creates a new AselectBuilder to configure the "aselect" filter.
func Aselect(outputs int, opts ...filter.Option) AselectBuilder {
	f := filter.New("aselect", outputs, opts...)
	f = f.With("outputs", expr.Int(outputs))
	return &implAselectBuilder{f: f}
}

type implAselectBuilder struct {
	f filter.Filter
}

func (aselectBuilder *implAselectBuilder) String() string {
	return aselectBuilder.f.String()
}

func (aselectBuilder *implAselectBuilder) Outputs() int {
	return aselectBuilder.f.Outputs()
}

func (aselectBuilder *implAselectBuilder) With(key string, value expr.Expr) filter.Filter {
	return aselectBuilder.withOption(key, value)
}

func (aselectBuilder *implAselectBuilder) withOption(key string, value expr.Expr) AselectBuilder {
	bCopy := *aselectBuilder
	bCopy.f = aselectBuilder.f.With(key, value)
	return &bCopy
}

func (aselectBuilder *implAselectBuilder) Expr(expression string) AselectBuilder {
	return aselectBuilder.withOption("expr", expr.String(expression))
}

func (aselectBuilder *implAselectBuilder) E(e string) AselectBuilder {
	return aselectBuilder.withOption("e", expr.String(e))
}

func (aselectBuilder *implAselectBuilder) N(n int) AselectBuilder {
	return aselectBuilder.withOption("n", expr.Int(n))
}
