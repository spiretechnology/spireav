// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// MaskedclampBuilder Clamp first stream with second stream and third stream.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#maskedclamp
type MaskedclampBuilder interface {
	filter.Filter
	// Undershoot set undershoot (from 0 to 65535) (default 0).
	Undershoot(undershoot int) MaskedclampBuilder
	// UndershootExpr set undershoot (from 0 to 65535) (default 0).
	UndershootExpr(undershoot expr.Expr) MaskedclampBuilder
	// Overshoot set overshoot (from 0 to 65535) (default 0).
	Overshoot(overshoot int) MaskedclampBuilder
	// OvershootExpr set overshoot (from 0 to 65535) (default 0).
	OvershootExpr(overshoot expr.Expr) MaskedclampBuilder
	// Planes set planes (from 0 to 15) (default 15).
	Planes(planes int) MaskedclampBuilder
	// PlanesExpr set planes (from 0 to 15) (default 15).
	PlanesExpr(planes expr.Expr) MaskedclampBuilder
}

// Maskedclamp creates a new MaskedclampBuilder to configure the "maskedclamp" filter.
func Maskedclamp(opts ...filter.Option) MaskedclampBuilder {
	return &implMaskedclampBuilder{
		f: filter.New("maskedclamp", 1, opts...),
	}
}

type implMaskedclampBuilder struct {
	f filter.Filter
}

func (maskedclampBuilder *implMaskedclampBuilder) String() string {
	return maskedclampBuilder.f.String()
}

func (maskedclampBuilder *implMaskedclampBuilder) Outputs() int {
	return maskedclampBuilder.f.Outputs()
}

func (maskedclampBuilder *implMaskedclampBuilder) With(key string, value expr.Expr) filter.Filter {
	return maskedclampBuilder.withOption(key, value)
}

func (maskedclampBuilder *implMaskedclampBuilder) withOption(key string, value expr.Expr) MaskedclampBuilder {
	bCopy := *maskedclampBuilder
	bCopy.f = maskedclampBuilder.f.With(key, value)
	return &bCopy
}

func (maskedclampBuilder *implMaskedclampBuilder) Undershoot(undershoot int) MaskedclampBuilder {
	return maskedclampBuilder.withOption("undershoot", expr.Int(undershoot))
}

func (maskedclampBuilder *implMaskedclampBuilder) UndershootExpr(undershoot expr.Expr) MaskedclampBuilder {
	return maskedclampBuilder.withOption("undershoot", undershoot)
}

func (maskedclampBuilder *implMaskedclampBuilder) Overshoot(overshoot int) MaskedclampBuilder {
	return maskedclampBuilder.withOption("overshoot", expr.Int(overshoot))
}

func (maskedclampBuilder *implMaskedclampBuilder) OvershootExpr(overshoot expr.Expr) MaskedclampBuilder {
	return maskedclampBuilder.withOption("overshoot", overshoot)
}

func (maskedclampBuilder *implMaskedclampBuilder) Planes(planes int) MaskedclampBuilder {
	return maskedclampBuilder.withOption("planes", expr.Int(planes))
}

func (maskedclampBuilder *implMaskedclampBuilder) PlanesExpr(planes expr.Expr) MaskedclampBuilder {
	return maskedclampBuilder.withOption("planes", planes)
}
