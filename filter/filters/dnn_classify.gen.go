// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// DnnClassifyBuilder Apply DNN classify filter to the input.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#dnn_classify
type DnnClassifyBuilder interface {
	filter.Filter
	// DnnBackend DNN backend (from INT_MIN to INT_MAX) (default 2).
	DnnBackend(dnnBackend int) DnnClassifyBuilder
	// Model path to model file.
	Model(model string) DnnClassifyBuilder
	// Input input name of the model.
	Input(input string) DnnClassifyBuilder
	// Output output name of the model.
	Output(output string) DnnClassifyBuilder
	// BackendConfigs backend configs.
	BackendConfigs(backendConfigs string) DnnClassifyBuilder
	// Options backend configs (deprecated, use backend_configs).
	Options(options string) DnnClassifyBuilder
	// Async use DNN async inference (ignored, use backend_configs='async=1') (default true).
	Async(async bool) DnnClassifyBuilder
	// Confidence threshold of confidence (from 0 to 1) (default 0.5).
	Confidence(confidence float32) DnnClassifyBuilder
	// Labels path to labels file.
	Labels(labels string) DnnClassifyBuilder
	// Target which one to be classified.
	Target(target string) DnnClassifyBuilder
}

// DnnClassify creates a new DnnClassifyBuilder to configure the "dnn_classify" filter.
func DnnClassify(opts ...filter.Option) DnnClassifyBuilder {
	return &implDnnClassifyBuilder{
		f: filter.New("dnn_classify", 1, opts...),
	}
}

type implDnnClassifyBuilder struct {
	f filter.Filter
}

func (dnn_classifyBuilder *implDnnClassifyBuilder) String() string {
	return dnn_classifyBuilder.f.String()
}

func (dnn_classifyBuilder *implDnnClassifyBuilder) Outputs() int {
	return dnn_classifyBuilder.f.Outputs()
}

func (dnn_classifyBuilder *implDnnClassifyBuilder) With(key string, value expr.Expr) filter.Filter {
	return dnn_classifyBuilder.withOption(key, value)
}

func (dnn_classifyBuilder *implDnnClassifyBuilder) withOption(key string, value expr.Expr) DnnClassifyBuilder {
	bCopy := *dnn_classifyBuilder
	bCopy.f = dnn_classifyBuilder.f.With(key, value)
	return &bCopy
}

func (dnn_classifyBuilder *implDnnClassifyBuilder) DnnBackend(dnnBackend int) DnnClassifyBuilder {
	return dnn_classifyBuilder.withOption("dnn_backend", expr.Int(dnnBackend))
}

func (dnn_classifyBuilder *implDnnClassifyBuilder) Model(model string) DnnClassifyBuilder {
	return dnn_classifyBuilder.withOption("model", expr.String(model))
}

func (dnn_classifyBuilder *implDnnClassifyBuilder) Input(input string) DnnClassifyBuilder {
	return dnn_classifyBuilder.withOption("input", expr.String(input))
}

func (dnn_classifyBuilder *implDnnClassifyBuilder) Output(output string) DnnClassifyBuilder {
	return dnn_classifyBuilder.withOption("output", expr.String(output))
}

func (dnn_classifyBuilder *implDnnClassifyBuilder) BackendConfigs(backendConfigs string) DnnClassifyBuilder {
	return dnn_classifyBuilder.withOption("backend_configs", expr.String(backendConfigs))
}

func (dnn_classifyBuilder *implDnnClassifyBuilder) Options(options string) DnnClassifyBuilder {
	return dnn_classifyBuilder.withOption("options", expr.String(options))
}

func (dnn_classifyBuilder *implDnnClassifyBuilder) Async(async bool) DnnClassifyBuilder {
	return dnn_classifyBuilder.withOption("async", expr.Bool(async))
}

func (dnn_classifyBuilder *implDnnClassifyBuilder) Confidence(confidence float32) DnnClassifyBuilder {
	return dnn_classifyBuilder.withOption("confidence", expr.Float(confidence))
}

func (dnn_classifyBuilder *implDnnClassifyBuilder) Labels(labels string) DnnClassifyBuilder {
	return dnn_classifyBuilder.withOption("labels", expr.String(labels))
}

func (dnn_classifyBuilder *implDnnClassifyBuilder) Target(target string) DnnClassifyBuilder {
	return dnn_classifyBuilder.withOption("target", expr.String(target))
}
