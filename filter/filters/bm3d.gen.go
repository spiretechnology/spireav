// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// Bm3dBuilder Block-Matching 3D denoiser.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#bm3d
type Bm3dBuilder interface {
	filter.Filter
	// Sigma set denoising strength (from 0 to 99999.9) (default 1).
	Sigma(sigma float32) Bm3dBuilder
	// Block set size of local patch (from 8 to 64) (default 16).
	Block(block int) Bm3dBuilder
	// Bstep set sliding step for processing blocks (from 1 to 64) (default 4).
	Bstep(bstep int) Bm3dBuilder
	// Group set maximal number of similar blocks (from 1 to 256) (default 1).
	Group(group int) Bm3dBuilder
	// Range set block matching range (from 1 to INT_MAX) (default 9).
	Range(rng int) Bm3dBuilder
	// Mstep set step for block matching (from 1 to 64) (default 1).
	Mstep(mstep int) Bm3dBuilder
	// Thmse set threshold of mean square error for block matching (from 0 to INT_MAX) (default 0).
	Thmse(thmse float32) Bm3dBuilder
	// Hdthr set hard threshold for 3D transfer domain (from 0 to INT_MAX) (default 2.7).
	Hdthr(hdthr float32) Bm3dBuilder
	// Estim set filtering estimation mode (from 0 to 1) (default basic).
	Estim(estim int) Bm3dBuilder
	// Ref have reference stream (default false).
	Ref(ref bool) Bm3dBuilder
	// Planes set planes to filter (from 0 to 15) (default 7).
	Planes(planes int) Bm3dBuilder
	// Enable expression to enable or disable the filter.
	Enable(enable expr.Expr) Bm3dBuilder
}

// Bm3d creates a new Bm3dBuilder to configure the "bm3d" filter.
func Bm3d(opts ...filter.Option) Bm3dBuilder {
	return &implBm3dBuilder{
		f: filter.New("bm3d", 1, opts...),
	}
}

type implBm3dBuilder struct {
	f filter.Filter
}

func (bm3dBuilder *implBm3dBuilder) String() string {
	return bm3dBuilder.f.String()
}

func (bm3dBuilder *implBm3dBuilder) Outputs() int {
	return bm3dBuilder.f.Outputs()
}

func (bm3dBuilder *implBm3dBuilder) With(key string, value expr.Expr) filter.Filter {
	return bm3dBuilder.withOption(key, value)
}

func (bm3dBuilder *implBm3dBuilder) withOption(key string, value expr.Expr) Bm3dBuilder {
	bCopy := *bm3dBuilder
	bCopy.f = bm3dBuilder.f.With(key, value)
	return &bCopy
}

func (bm3dBuilder *implBm3dBuilder) Sigma(sigma float32) Bm3dBuilder {
	return bm3dBuilder.withOption("sigma", expr.Float(sigma))
}

func (bm3dBuilder *implBm3dBuilder) Block(block int) Bm3dBuilder {
	return bm3dBuilder.withOption("block", expr.Int(block))
}

func (bm3dBuilder *implBm3dBuilder) Bstep(bstep int) Bm3dBuilder {
	return bm3dBuilder.withOption("bstep", expr.Int(bstep))
}

func (bm3dBuilder *implBm3dBuilder) Group(group int) Bm3dBuilder {
	return bm3dBuilder.withOption("group", expr.Int(group))
}

func (bm3dBuilder *implBm3dBuilder) Range(rng int) Bm3dBuilder {
	return bm3dBuilder.withOption("range", expr.Int(rng))
}

func (bm3dBuilder *implBm3dBuilder) Mstep(mstep int) Bm3dBuilder {
	return bm3dBuilder.withOption("mstep", expr.Int(mstep))
}

func (bm3dBuilder *implBm3dBuilder) Thmse(thmse float32) Bm3dBuilder {
	return bm3dBuilder.withOption("thmse", expr.Float(thmse))
}

func (bm3dBuilder *implBm3dBuilder) Hdthr(hdthr float32) Bm3dBuilder {
	return bm3dBuilder.withOption("hdthr", expr.Float(hdthr))
}

func (bm3dBuilder *implBm3dBuilder) Estim(estim int) Bm3dBuilder {
	return bm3dBuilder.withOption("estim", expr.Int(estim))
}

func (bm3dBuilder *implBm3dBuilder) Ref(ref bool) Bm3dBuilder {
	return bm3dBuilder.withOption("ref", expr.Bool(ref))
}

func (bm3dBuilder *implBm3dBuilder) Planes(planes int) Bm3dBuilder {
	return bm3dBuilder.withOption("planes", expr.Int(planes))
}

func (bm3dBuilder *implBm3dBuilder) Enable(enable expr.Expr) Bm3dBuilder {
	return bm3dBuilder.withOption("enable", enable)
}
