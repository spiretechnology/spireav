// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// CompandBuilder Compress or expand audio dynamic range.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#compand
type CompandBuilder interface {
	filter.Filter
	// Attacks set time over which increase of volume is determined (default "0").
	Attacks(attacks string) CompandBuilder
	// Decays set time over which decrease of volume is determined (default "0.8").
	Decays(decays string) CompandBuilder
	// Points set points of transfer function (default "-70/-70|-60/-20|1/0").
	Points(points string) CompandBuilder
	// Gain set output gain (from -900 to 900) (default 0).
	Gain(gain float64) CompandBuilder
	// Volume set initial volume (from -900 to 0) (default 0).
	Volume(volume float64) CompandBuilder
	// Delay set delay for samples before sending them to volume adjuster (from 0 to 20) (default 0).
	Delay(delay float64) CompandBuilder
}

// Compand creates a new CompandBuilder to configure the "compand" filter.
func Compand(opts ...filter.Option) CompandBuilder {
	return &implCompandBuilder{
		f: filter.New("compand", 1, opts...),
	}
}

type implCompandBuilder struct {
	f filter.Filter
}

func (compandBuilder *implCompandBuilder) String() string {
	return compandBuilder.f.String()
}

func (compandBuilder *implCompandBuilder) Outputs() int {
	return compandBuilder.f.Outputs()
}

func (compandBuilder *implCompandBuilder) With(key string, value expr.Expr) filter.Filter {
	return compandBuilder.withOption(key, value)
}

func (compandBuilder *implCompandBuilder) withOption(key string, value expr.Expr) CompandBuilder {
	bCopy := *compandBuilder
	bCopy.f = compandBuilder.f.With(key, value)
	return &bCopy
}

func (compandBuilder *implCompandBuilder) Attacks(attacks string) CompandBuilder {
	return compandBuilder.withOption("attacks", expr.String(attacks))
}

func (compandBuilder *implCompandBuilder) Decays(decays string) CompandBuilder {
	return compandBuilder.withOption("decays", expr.String(decays))
}

func (compandBuilder *implCompandBuilder) Points(points string) CompandBuilder {
	return compandBuilder.withOption("points", expr.String(points))
}

func (compandBuilder *implCompandBuilder) Gain(gain float64) CompandBuilder {
	return compandBuilder.withOption("gain", expr.Double(gain))
}

func (compandBuilder *implCompandBuilder) Volume(volume float64) CompandBuilder {
	return compandBuilder.withOption("volume", expr.Double(volume))
}

func (compandBuilder *implCompandBuilder) Delay(delay float64) CompandBuilder {
	return compandBuilder.withOption("delay", expr.Double(delay))
}
