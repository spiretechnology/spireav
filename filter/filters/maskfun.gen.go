// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// MaskfunBuilder Create Mask.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#maskfun
type MaskfunBuilder interface {
	filter.Filter
	// Low set low threshold (from 0 to 65535) (default 10).
	Low(low int) MaskfunBuilder
	// LowExpr set low threshold (from 0 to 65535) (default 10).
	LowExpr(low expr.Expr) MaskfunBuilder
	// High set high threshold (from 0 to 65535) (default 10).
	High(high int) MaskfunBuilder
	// HighExpr set high threshold (from 0 to 65535) (default 10).
	HighExpr(high expr.Expr) MaskfunBuilder
	// Planes set planes (from 0 to 15) (default 15).
	Planes(planes int) MaskfunBuilder
	// PlanesExpr set planes (from 0 to 15) (default 15).
	PlanesExpr(planes expr.Expr) MaskfunBuilder
	// Fill set fill value (from 0 to 65535) (default 0).
	Fill(fill int) MaskfunBuilder
	// FillExpr set fill value (from 0 to 65535) (default 0).
	FillExpr(fill expr.Expr) MaskfunBuilder
	// Sum set sum value (from 0 to 65535) (default 10).
	Sum(sum int) MaskfunBuilder
	// SumExpr set sum value (from 0 to 65535) (default 10).
	SumExpr(sum expr.Expr) MaskfunBuilder
}

// Maskfun creates a new MaskfunBuilder to configure the "maskfun" filter.
func Maskfun(opts ...filter.Option) MaskfunBuilder {
	return &implMaskfunBuilder{
		f: filter.New("maskfun", 1, opts...),
	}
}

type implMaskfunBuilder struct {
	f filter.Filter
}

func (maskfunBuilder *implMaskfunBuilder) String() string {
	return maskfunBuilder.f.String()
}

func (maskfunBuilder *implMaskfunBuilder) Outputs() int {
	return maskfunBuilder.f.Outputs()
}

func (maskfunBuilder *implMaskfunBuilder) With(key string, value expr.Expr) filter.Filter {
	return maskfunBuilder.withOption(key, value)
}

func (maskfunBuilder *implMaskfunBuilder) withOption(key string, value expr.Expr) MaskfunBuilder {
	bCopy := *maskfunBuilder
	bCopy.f = maskfunBuilder.f.With(key, value)
	return &bCopy
}

func (maskfunBuilder *implMaskfunBuilder) Low(low int) MaskfunBuilder {
	return maskfunBuilder.withOption("low", expr.Int(low))
}

func (maskfunBuilder *implMaskfunBuilder) LowExpr(low expr.Expr) MaskfunBuilder {
	return maskfunBuilder.withOption("low", low)
}

func (maskfunBuilder *implMaskfunBuilder) High(high int) MaskfunBuilder {
	return maskfunBuilder.withOption("high", expr.Int(high))
}

func (maskfunBuilder *implMaskfunBuilder) HighExpr(high expr.Expr) MaskfunBuilder {
	return maskfunBuilder.withOption("high", high)
}

func (maskfunBuilder *implMaskfunBuilder) Planes(planes int) MaskfunBuilder {
	return maskfunBuilder.withOption("planes", expr.Int(planes))
}

func (maskfunBuilder *implMaskfunBuilder) PlanesExpr(planes expr.Expr) MaskfunBuilder {
	return maskfunBuilder.withOption("planes", planes)
}

func (maskfunBuilder *implMaskfunBuilder) Fill(fill int) MaskfunBuilder {
	return maskfunBuilder.withOption("fill", expr.Int(fill))
}

func (maskfunBuilder *implMaskfunBuilder) FillExpr(fill expr.Expr) MaskfunBuilder {
	return maskfunBuilder.withOption("fill", fill)
}

func (maskfunBuilder *implMaskfunBuilder) Sum(sum int) MaskfunBuilder {
	return maskfunBuilder.withOption("sum", expr.Int(sum))
}

func (maskfunBuilder *implMaskfunBuilder) SumExpr(sum expr.Expr) MaskfunBuilder {
	return maskfunBuilder.withOption("sum", sum)
}
