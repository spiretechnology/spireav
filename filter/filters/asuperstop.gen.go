// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// AsuperstopBuilder Apply high order Butterworth band-stop filter.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#asuperstop
type AsuperstopBuilder interface {
	filter.Filter
	// Centerf set center frequency (from 2 to 999999) (default 1000).
	Centerf(centerf float64) AsuperstopBuilder
	// CenterfExpr set center frequency (from 2 to 999999) (default 1000).
	CenterfExpr(centerf expr.Expr) AsuperstopBuilder
	// Order set filter order (from 4 to 20) (default 4).
	Order(order int) AsuperstopBuilder
	// OrderExpr set filter order (from 4 to 20) (default 4).
	OrderExpr(order expr.Expr) AsuperstopBuilder
	// Qfactor set Q-factor (from 0.01 to 100) (default 1).
	Qfactor(qfactor float64) AsuperstopBuilder
	// QfactorExpr set Q-factor (from 0.01 to 100) (default 1).
	QfactorExpr(qfactor expr.Expr) AsuperstopBuilder
	// Level set input level (from 0 to 2) (default 1).
	Level(level float64) AsuperstopBuilder
	// LevelExpr set input level (from 0 to 2) (default 1).
	LevelExpr(level expr.Expr) AsuperstopBuilder
	// Enable expression to enable or disable the filter.
	Enable(enable expr.Expr) AsuperstopBuilder
}

// Asuperstop creates a new AsuperstopBuilder to configure the "asuperstop" filter.
func Asuperstop(opts ...filter.Option) AsuperstopBuilder {
	return &implAsuperstopBuilder{
		f: filter.New("asuperstop", 1, opts...),
	}
}

type implAsuperstopBuilder struct {
	f filter.Filter
}

func (asuperstopBuilder *implAsuperstopBuilder) String() string {
	return asuperstopBuilder.f.String()
}

func (asuperstopBuilder *implAsuperstopBuilder) Outputs() int {
	return asuperstopBuilder.f.Outputs()
}

func (asuperstopBuilder *implAsuperstopBuilder) With(key string, value expr.Expr) filter.Filter {
	return asuperstopBuilder.withOption(key, value)
}

func (asuperstopBuilder *implAsuperstopBuilder) withOption(key string, value expr.Expr) AsuperstopBuilder {
	bCopy := *asuperstopBuilder
	bCopy.f = asuperstopBuilder.f.With(key, value)
	return &bCopy
}

func (asuperstopBuilder *implAsuperstopBuilder) Centerf(centerf float64) AsuperstopBuilder {
	return asuperstopBuilder.withOption("centerf", expr.Double(centerf))
}

func (asuperstopBuilder *implAsuperstopBuilder) CenterfExpr(centerf expr.Expr) AsuperstopBuilder {
	return asuperstopBuilder.withOption("centerf", centerf)
}

func (asuperstopBuilder *implAsuperstopBuilder) Order(order int) AsuperstopBuilder {
	return asuperstopBuilder.withOption("order", expr.Int(order))
}

func (asuperstopBuilder *implAsuperstopBuilder) OrderExpr(order expr.Expr) AsuperstopBuilder {
	return asuperstopBuilder.withOption("order", order)
}

func (asuperstopBuilder *implAsuperstopBuilder) Qfactor(qfactor float64) AsuperstopBuilder {
	return asuperstopBuilder.withOption("qfactor", expr.Double(qfactor))
}

func (asuperstopBuilder *implAsuperstopBuilder) QfactorExpr(qfactor expr.Expr) AsuperstopBuilder {
	return asuperstopBuilder.withOption("qfactor", qfactor)
}

func (asuperstopBuilder *implAsuperstopBuilder) Level(level float64) AsuperstopBuilder {
	return asuperstopBuilder.withOption("level", expr.Double(level))
}

func (asuperstopBuilder *implAsuperstopBuilder) LevelExpr(level expr.Expr) AsuperstopBuilder {
	return asuperstopBuilder.withOption("level", level)
}

func (asuperstopBuilder *implAsuperstopBuilder) Enable(enable expr.Expr) AsuperstopBuilder {
	return asuperstopBuilder.withOption("enable", enable)
}
