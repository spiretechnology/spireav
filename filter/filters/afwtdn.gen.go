// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// AfwtdnBuilder Denoise audio stream using Wavelets.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#afwtdn
type AfwtdnBuilder interface {
	filter.Filter
	// Sigma set noise sigma (from 0 to 1) (default 0).
	Sigma(sigma float64) AfwtdnBuilder
	// SigmaExpr set noise sigma (from 0 to 1) (default 0).
	SigmaExpr(sigma expr.Expr) AfwtdnBuilder
	// Levels set number of wavelet levels (from 1 to 12) (default 10).
	Levels(levels int) AfwtdnBuilder
	// Wavet set wavelet type (from 0 to 6) (default sym10).
	Wavet(wavet int) AfwtdnBuilder
	// Percent set percent of full denoising (from 0 to 100) (default 85).
	Percent(percent float64) AfwtdnBuilder
	// PercentExpr set percent of full denoising (from 0 to 100) (default 85).
	PercentExpr(percent expr.Expr) AfwtdnBuilder
	// Profile profile noise (default false).
	Profile(profile bool) AfwtdnBuilder
	// ProfileExpr profile noise (default false).
	ProfileExpr(profile expr.Expr) AfwtdnBuilder
	// Adaptive adaptive profiling of noise (default false).
	Adaptive(adaptive bool) AfwtdnBuilder
	// AdaptiveExpr adaptive profiling of noise (default false).
	AdaptiveExpr(adaptive expr.Expr) AfwtdnBuilder
	// Samples set frame size in number of samples (from 512 to 65536) (default 8192).
	Samples(samples int) AfwtdnBuilder
	// Softness set thresholding softness (from 0 to 10) (default 1).
	Softness(softness float64) AfwtdnBuilder
	// SoftnessExpr set thresholding softness (from 0 to 10) (default 1).
	SoftnessExpr(softness expr.Expr) AfwtdnBuilder
}

// Afwtdn creates a new AfwtdnBuilder to configure the "afwtdn" filter.
func Afwtdn(opts ...filter.Option) AfwtdnBuilder {
	return &implAfwtdnBuilder{
		f: filter.New("afwtdn", 1, opts...),
	}
}

type implAfwtdnBuilder struct {
	f filter.Filter
}

func (afwtdnBuilder *implAfwtdnBuilder) String() string {
	return afwtdnBuilder.f.String()
}

func (afwtdnBuilder *implAfwtdnBuilder) Outputs() int {
	return afwtdnBuilder.f.Outputs()
}

func (afwtdnBuilder *implAfwtdnBuilder) With(key string, value expr.Expr) filter.Filter {
	return afwtdnBuilder.withOption(key, value)
}

func (afwtdnBuilder *implAfwtdnBuilder) withOption(key string, value expr.Expr) AfwtdnBuilder {
	bCopy := *afwtdnBuilder
	bCopy.f = afwtdnBuilder.f.With(key, value)
	return &bCopy
}

func (afwtdnBuilder *implAfwtdnBuilder) Sigma(sigma float64) AfwtdnBuilder {
	return afwtdnBuilder.withOption("sigma", expr.Double(sigma))
}

func (afwtdnBuilder *implAfwtdnBuilder) SigmaExpr(sigma expr.Expr) AfwtdnBuilder {
	return afwtdnBuilder.withOption("sigma", sigma)
}

func (afwtdnBuilder *implAfwtdnBuilder) Levels(levels int) AfwtdnBuilder {
	return afwtdnBuilder.withOption("levels", expr.Int(levels))
}

func (afwtdnBuilder *implAfwtdnBuilder) Wavet(wavet int) AfwtdnBuilder {
	return afwtdnBuilder.withOption("wavet", expr.Int(wavet))
}

func (afwtdnBuilder *implAfwtdnBuilder) Percent(percent float64) AfwtdnBuilder {
	return afwtdnBuilder.withOption("percent", expr.Double(percent))
}

func (afwtdnBuilder *implAfwtdnBuilder) PercentExpr(percent expr.Expr) AfwtdnBuilder {
	return afwtdnBuilder.withOption("percent", percent)
}

func (afwtdnBuilder *implAfwtdnBuilder) Profile(profile bool) AfwtdnBuilder {
	return afwtdnBuilder.withOption("profile", expr.Bool(profile))
}

func (afwtdnBuilder *implAfwtdnBuilder) ProfileExpr(profile expr.Expr) AfwtdnBuilder {
	return afwtdnBuilder.withOption("profile", profile)
}

func (afwtdnBuilder *implAfwtdnBuilder) Adaptive(adaptive bool) AfwtdnBuilder {
	return afwtdnBuilder.withOption("adaptive", expr.Bool(adaptive))
}

func (afwtdnBuilder *implAfwtdnBuilder) AdaptiveExpr(adaptive expr.Expr) AfwtdnBuilder {
	return afwtdnBuilder.withOption("adaptive", adaptive)
}

func (afwtdnBuilder *implAfwtdnBuilder) Samples(samples int) AfwtdnBuilder {
	return afwtdnBuilder.withOption("samples", expr.Int(samples))
}

func (afwtdnBuilder *implAfwtdnBuilder) Softness(softness float64) AfwtdnBuilder {
	return afwtdnBuilder.withOption("softness", expr.Double(softness))
}

func (afwtdnBuilder *implAfwtdnBuilder) SoftnessExpr(softness expr.Expr) AfwtdnBuilder {
	return afwtdnBuilder.withOption("softness", softness)
}
