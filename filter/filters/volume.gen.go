// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// VolumeBuilder Change input volume.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#volume
type VolumeBuilder interface {
	filter.Filter
	// Volume set volume adjustment expression (default "1.0").
	Volume(volume string) VolumeBuilder
	// VolumeExpr set volume adjustment expression (default "1.0").
	VolumeExpr(volume expr.Expr) VolumeBuilder
	// Precision select mathematical precision (from 0 to 2) (default float).
	Precision(precision int) VolumeBuilder
	// Eval specify when to evaluate expressions (from 0 to 1) (default once).
	Eval(eval int) VolumeBuilder
	// Replaygain Apply replaygain side data when present (from 0 to 3) (default drop).
	Replaygain(replaygain int) VolumeBuilder
	// ReplaygainPreamp Apply replaygain pre-amplification (from -15 to 15) (default 0).
	ReplaygainPreamp(replaygainPreamp float64) VolumeBuilder
	// ReplaygainNoclip Apply replaygain clipping prevention (default true).
	ReplaygainNoclip(replaygainNoclip bool) VolumeBuilder
}

// Volume creates a new VolumeBuilder to configure the "volume" filter.
func Volume(opts ...filter.Option) VolumeBuilder {
	return &implVolumeBuilder{
		f: filter.New("volume", 1, opts...),
	}
}

type implVolumeBuilder struct {
	f filter.Filter
}

func (volumeBuilder *implVolumeBuilder) String() string {
	return volumeBuilder.f.String()
}

func (volumeBuilder *implVolumeBuilder) Outputs() int {
	return volumeBuilder.f.Outputs()
}

func (volumeBuilder *implVolumeBuilder) With(key string, value expr.Expr) filter.Filter {
	return volumeBuilder.withOption(key, value)
}

func (volumeBuilder *implVolumeBuilder) withOption(key string, value expr.Expr) VolumeBuilder {
	bCopy := *volumeBuilder
	bCopy.f = volumeBuilder.f.With(key, value)
	return &bCopy
}

func (volumeBuilder *implVolumeBuilder) Volume(volume string) VolumeBuilder {
	return volumeBuilder.withOption("volume", expr.String(volume))
}

func (volumeBuilder *implVolumeBuilder) VolumeExpr(volume expr.Expr) VolumeBuilder {
	return volumeBuilder.withOption("volume", volume)
}

func (volumeBuilder *implVolumeBuilder) Precision(precision int) VolumeBuilder {
	return volumeBuilder.withOption("precision", expr.Int(precision))
}

func (volumeBuilder *implVolumeBuilder) Eval(eval int) VolumeBuilder {
	return volumeBuilder.withOption("eval", expr.Int(eval))
}

func (volumeBuilder *implVolumeBuilder) Replaygain(replaygain int) VolumeBuilder {
	return volumeBuilder.withOption("replaygain", expr.Int(replaygain))
}

func (volumeBuilder *implVolumeBuilder) ReplaygainPreamp(replaygainPreamp float64) VolumeBuilder {
	return volumeBuilder.withOption("replaygain_preamp", expr.Double(replaygainPreamp))
}

func (volumeBuilder *implVolumeBuilder) ReplaygainNoclip(replaygainNoclip bool) VolumeBuilder {
	return volumeBuilder.withOption("replaygain_noclip", expr.Bool(replaygainNoclip))
}
