// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// ScharrBuilder Apply scharr operator.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#scharr
type ScharrBuilder interface {
	filter.Filter
	// Planes set planes to filter (from 0 to 15) (default 15).
	Planes(planes int) ScharrBuilder
	// PlanesExpr set planes to filter (from 0 to 15) (default 15).
	PlanesExpr(planes expr.Expr) ScharrBuilder
	// Scale set scale (from 0 to 65535) (default 1).
	Scale(scale float32) ScharrBuilder
	// ScaleExpr set scale (from 0 to 65535) (default 1).
	ScaleExpr(scale expr.Expr) ScharrBuilder
	// Delta set delta (from -65535 to 65535) (default 0).
	Delta(delta float32) ScharrBuilder
	// DeltaExpr set delta (from -65535 to 65535) (default 0).
	DeltaExpr(delta expr.Expr) ScharrBuilder
}

// Scharr creates a new ScharrBuilder to configure the "scharr" filter.
func Scharr(opts ...filter.Option) ScharrBuilder {
	return &implScharrBuilder{
		f: filter.New("scharr", 1, opts...),
	}
}

type implScharrBuilder struct {
	f filter.Filter
}

func (scharrBuilder *implScharrBuilder) String() string {
	return scharrBuilder.f.String()
}

func (scharrBuilder *implScharrBuilder) Outputs() int {
	return scharrBuilder.f.Outputs()
}

func (scharrBuilder *implScharrBuilder) With(key string, value expr.Expr) filter.Filter {
	return scharrBuilder.withOption(key, value)
}

func (scharrBuilder *implScharrBuilder) withOption(key string, value expr.Expr) ScharrBuilder {
	bCopy := *scharrBuilder
	bCopy.f = scharrBuilder.f.With(key, value)
	return &bCopy
}

func (scharrBuilder *implScharrBuilder) Planes(planes int) ScharrBuilder {
	return scharrBuilder.withOption("planes", expr.Int(planes))
}

func (scharrBuilder *implScharrBuilder) PlanesExpr(planes expr.Expr) ScharrBuilder {
	return scharrBuilder.withOption("planes", planes)
}

func (scharrBuilder *implScharrBuilder) Scale(scale float32) ScharrBuilder {
	return scharrBuilder.withOption("scale", expr.Float(scale))
}

func (scharrBuilder *implScharrBuilder) ScaleExpr(scale expr.Expr) ScharrBuilder {
	return scharrBuilder.withOption("scale", scale)
}

func (scharrBuilder *implScharrBuilder) Delta(delta float32) ScharrBuilder {
	return scharrBuilder.withOption("delta", expr.Float(delta))
}

func (scharrBuilder *implScharrBuilder) DeltaExpr(delta expr.Expr) ScharrBuilder {
	return scharrBuilder.withOption("delta", delta)
}
