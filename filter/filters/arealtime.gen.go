// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"time"

	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// ArealtimeBuilder Slow down filtering to match realtime.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#arealtime
type ArealtimeBuilder interface {
	filter.Filter
	// Limit sleep time limit (default 2).
	Limit(limit time.Duration) ArealtimeBuilder
	// LimitExpr sleep time limit (default 2).
	LimitExpr(limit expr.Expr) ArealtimeBuilder
	// Speed speed factor (from DBL_MIN to DBL_MAX) (default 1).
	Speed(speed float64) ArealtimeBuilder
	// SpeedExpr speed factor (from DBL_MIN to DBL_MAX) (default 1).
	SpeedExpr(speed expr.Expr) ArealtimeBuilder
}

// Arealtime creates a new ArealtimeBuilder to configure the "arealtime" filter.
func Arealtime(opts ...filter.Option) ArealtimeBuilder {
	return &implArealtimeBuilder{
		f: filter.New("arealtime", 1, opts...),
	}
}

type implArealtimeBuilder struct {
	f filter.Filter
}

func (arealtimeBuilder *implArealtimeBuilder) String() string {
	return arealtimeBuilder.f.String()
}

func (arealtimeBuilder *implArealtimeBuilder) Outputs() int {
	return arealtimeBuilder.f.Outputs()
}

func (arealtimeBuilder *implArealtimeBuilder) With(key string, value expr.Expr) filter.Filter {
	return arealtimeBuilder.withOption(key, value)
}

func (arealtimeBuilder *implArealtimeBuilder) withOption(key string, value expr.Expr) ArealtimeBuilder {
	bCopy := *arealtimeBuilder
	bCopy.f = arealtimeBuilder.f.With(key, value)
	return &bCopy
}

func (arealtimeBuilder *implArealtimeBuilder) Limit(limit time.Duration) ArealtimeBuilder {
	return arealtimeBuilder.withOption("limit", expr.Duration(limit))
}

func (arealtimeBuilder *implArealtimeBuilder) LimitExpr(limit expr.Expr) ArealtimeBuilder {
	return arealtimeBuilder.withOption("limit", limit)
}

func (arealtimeBuilder *implArealtimeBuilder) Speed(speed float64) ArealtimeBuilder {
	return arealtimeBuilder.withOption("speed", expr.Double(speed))
}

func (arealtimeBuilder *implArealtimeBuilder) SpeedExpr(speed expr.Expr) ArealtimeBuilder {
	return arealtimeBuilder.withOption("speed", speed)
}
