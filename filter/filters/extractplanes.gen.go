// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// ExtractplanesBuilder Extract planes as grayscale frames.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#extractplanes
type ExtractplanesBuilder interface {
	filter.Filter
	// Planes set planes (default r).
	Planes(planes string) ExtractplanesBuilder
}

// Extractplanes creates a new ExtractplanesBuilder to configure the "extractplanes" filter.
func Extractplanes(outputs int, opts ...filter.Option) ExtractplanesBuilder {
	f := filter.New("extractplanes", outputs, opts...)
	f = f.With("outputs", expr.Int(outputs))
	return &implExtractplanesBuilder{f: f}
}

type implExtractplanesBuilder struct {
	f filter.Filter
}

func (extractplanesBuilder *implExtractplanesBuilder) String() string {
	return extractplanesBuilder.f.String()
}

func (extractplanesBuilder *implExtractplanesBuilder) Outputs() int {
	return extractplanesBuilder.f.Outputs()
}

func (extractplanesBuilder *implExtractplanesBuilder) With(key string, value expr.Expr) filter.Filter {
	return extractplanesBuilder.withOption(key, value)
}

func (extractplanesBuilder *implExtractplanesBuilder) withOption(key string, value expr.Expr) ExtractplanesBuilder {
	bCopy := *extractplanesBuilder
	bCopy.f = extractplanesBuilder.f.With(key, value)
	return &bCopy
}

func (extractplanesBuilder *implExtractplanesBuilder) Planes(planes string) ExtractplanesBuilder {
	return extractplanesBuilder.withOption("planes", expr.String(planes))
}
