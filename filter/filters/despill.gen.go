// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// DespillBuilder Despill video.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#despill
type DespillBuilder interface {
	filter.Filter
	// Type set the screen type (from 0 to 1) (default green).
	Type(typ int) DespillBuilder
	// TypeExpr set the screen type (from 0 to 1) (default green).
	TypeExpr(typ expr.Expr) DespillBuilder
	// Mix set the spillmap mix (from 0 to 1) (default 0.5).
	Mix(mix float32) DespillBuilder
	// MixExpr set the spillmap mix (from 0 to 1) (default 0.5).
	MixExpr(mix expr.Expr) DespillBuilder
	// Expand set the spillmap expand (from 0 to 1) (default 0).
	Expand(expand float32) DespillBuilder
	// ExpandExpr set the spillmap expand (from 0 to 1) (default 0).
	ExpandExpr(expand expr.Expr) DespillBuilder
	// Red set red scale (from -100 to 100) (default 0).
	Red(red float32) DespillBuilder
	// RedExpr set red scale (from -100 to 100) (default 0).
	RedExpr(red expr.Expr) DespillBuilder
	// Green set green scale (from -100 to 100) (default -1).
	Green(green float32) DespillBuilder
	// GreenExpr set green scale (from -100 to 100) (default -1).
	GreenExpr(green expr.Expr) DespillBuilder
	// Blue set blue scale (from -100 to 100) (default 0).
	Blue(blue float32) DespillBuilder
	// BlueExpr set blue scale (from -100 to 100) (default 0).
	BlueExpr(blue expr.Expr) DespillBuilder
	// Brightness set brightness (from -10 to 10) (default 0).
	Brightness(brightness float32) DespillBuilder
	// BrightnessExpr set brightness (from -10 to 10) (default 0).
	BrightnessExpr(brightness expr.Expr) DespillBuilder
	// Alpha change alpha component (default false).
	Alpha(alpha bool) DespillBuilder
	// AlphaExpr change alpha component (default false).
	AlphaExpr(alpha expr.Expr) DespillBuilder
	// Enable expression to enable or disable the filter.
	Enable(enable expr.Expr) DespillBuilder
}

// Despill creates a new DespillBuilder to configure the "despill" filter.
func Despill(opts ...filter.Option) DespillBuilder {
	return &implDespillBuilder{
		f: filter.New("despill", 1, opts...),
	}
}

type implDespillBuilder struct {
	f filter.Filter
}

func (despillBuilder *implDespillBuilder) String() string {
	return despillBuilder.f.String()
}

func (despillBuilder *implDespillBuilder) Outputs() int {
	return despillBuilder.f.Outputs()
}

func (despillBuilder *implDespillBuilder) With(key string, value expr.Expr) filter.Filter {
	return despillBuilder.withOption(key, value)
}

func (despillBuilder *implDespillBuilder) withOption(key string, value expr.Expr) DespillBuilder {
	bCopy := *despillBuilder
	bCopy.f = despillBuilder.f.With(key, value)
	return &bCopy
}

func (despillBuilder *implDespillBuilder) Type(typ int) DespillBuilder {
	return despillBuilder.withOption("type", expr.Int(typ))
}

func (despillBuilder *implDespillBuilder) TypeExpr(typ expr.Expr) DespillBuilder {
	return despillBuilder.withOption("type", typ)
}

func (despillBuilder *implDespillBuilder) Mix(mix float32) DespillBuilder {
	return despillBuilder.withOption("mix", expr.Float(mix))
}

func (despillBuilder *implDespillBuilder) MixExpr(mix expr.Expr) DespillBuilder {
	return despillBuilder.withOption("mix", mix)
}

func (despillBuilder *implDespillBuilder) Expand(expand float32) DespillBuilder {
	return despillBuilder.withOption("expand", expr.Float(expand))
}

func (despillBuilder *implDespillBuilder) ExpandExpr(expand expr.Expr) DespillBuilder {
	return despillBuilder.withOption("expand", expand)
}

func (despillBuilder *implDespillBuilder) Red(red float32) DespillBuilder {
	return despillBuilder.withOption("red", expr.Float(red))
}

func (despillBuilder *implDespillBuilder) RedExpr(red expr.Expr) DespillBuilder {
	return despillBuilder.withOption("red", red)
}

func (despillBuilder *implDespillBuilder) Green(green float32) DespillBuilder {
	return despillBuilder.withOption("green", expr.Float(green))
}

func (despillBuilder *implDespillBuilder) GreenExpr(green expr.Expr) DespillBuilder {
	return despillBuilder.withOption("green", green)
}

func (despillBuilder *implDespillBuilder) Blue(blue float32) DespillBuilder {
	return despillBuilder.withOption("blue", expr.Float(blue))
}

func (despillBuilder *implDespillBuilder) BlueExpr(blue expr.Expr) DespillBuilder {
	return despillBuilder.withOption("blue", blue)
}

func (despillBuilder *implDespillBuilder) Brightness(brightness float32) DespillBuilder {
	return despillBuilder.withOption("brightness", expr.Float(brightness))
}

func (despillBuilder *implDespillBuilder) BrightnessExpr(brightness expr.Expr) DespillBuilder {
	return despillBuilder.withOption("brightness", brightness)
}

func (despillBuilder *implDespillBuilder) Alpha(alpha bool) DespillBuilder {
	return despillBuilder.withOption("alpha", expr.Bool(alpha))
}

func (despillBuilder *implDespillBuilder) AlphaExpr(alpha expr.Expr) DespillBuilder {
	return despillBuilder.withOption("alpha", alpha)
}

func (despillBuilder *implDespillBuilder) Enable(enable expr.Expr) DespillBuilder {
	return despillBuilder.withOption("enable", enable)
}
