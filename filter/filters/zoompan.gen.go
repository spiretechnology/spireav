// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// ZoompanBuilder Apply Zoom & Pan effect.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#zoompan
type ZoompanBuilder interface {
	filter.Filter
	// Zoom set the zoom expression (default "1").
	Zoom(zoom int) ZoompanBuilder
	// ZoomExpr set the zoom expression (default "1").
	ZoomExpr(zoom expr.Expr) ZoompanBuilder
	// Z set the zoom expression (default "1").
	Z(z int) ZoompanBuilder
	// ZExpr set the zoom expression (default "1").
	ZExpr(z expr.Expr) ZoompanBuilder
	// X set the x expression (default "0").
	X(x int) ZoompanBuilder
	// XExpr set the x expression (default "0").
	XExpr(x expr.Expr) ZoompanBuilder
	// Y set the y expression (default "0").
	Y(y int) ZoompanBuilder
	// YExpr set the y expression (default "0").
	YExpr(y expr.Expr) ZoompanBuilder
	// D set the duration expression (default "90").
	D(d int) ZoompanBuilder
	// DExpr set the duration expression (default "90").
	DExpr(d expr.Expr) ZoompanBuilder
	// S set the output image size (default "hd720").
	S(s expr.Size) ZoompanBuilder
	// Fps set the output framerate (default "25").
	Fps(fps expr.Rational) ZoompanBuilder
}

// Zoompan creates a new ZoompanBuilder to configure the "zoompan" filter.
func Zoompan(opts ...filter.Option) ZoompanBuilder {
	return &implZoompanBuilder{
		f: filter.New("zoompan", 1, opts...),
	}
}

type implZoompanBuilder struct {
	f filter.Filter
}

func (zoompanBuilder *implZoompanBuilder) String() string {
	return zoompanBuilder.f.String()
}

func (zoompanBuilder *implZoompanBuilder) Outputs() int {
	return zoompanBuilder.f.Outputs()
}

func (zoompanBuilder *implZoompanBuilder) With(key string, value expr.Expr) filter.Filter {
	return zoompanBuilder.withOption(key, value)
}

func (zoompanBuilder *implZoompanBuilder) withOption(key string, value expr.Expr) ZoompanBuilder {
	bCopy := *zoompanBuilder
	bCopy.f = zoompanBuilder.f.With(key, value)
	return &bCopy
}

func (zoompanBuilder *implZoompanBuilder) Zoom(zoom int) ZoompanBuilder {
	return zoompanBuilder.withOption("zoom", expr.Int(zoom))
}

func (zoompanBuilder *implZoompanBuilder) ZoomExpr(zoom expr.Expr) ZoompanBuilder {
	return zoompanBuilder.withOption("zoom", zoom)
}

func (zoompanBuilder *implZoompanBuilder) Z(z int) ZoompanBuilder {
	return zoompanBuilder.withOption("z", expr.Int(z))
}

func (zoompanBuilder *implZoompanBuilder) ZExpr(z expr.Expr) ZoompanBuilder {
	return zoompanBuilder.withOption("z", z)
}

func (zoompanBuilder *implZoompanBuilder) X(x int) ZoompanBuilder {
	return zoompanBuilder.withOption("x", expr.Int(x))
}

func (zoompanBuilder *implZoompanBuilder) XExpr(x expr.Expr) ZoompanBuilder {
	return zoompanBuilder.withOption("x", x)
}

func (zoompanBuilder *implZoompanBuilder) Y(y int) ZoompanBuilder {
	return zoompanBuilder.withOption("y", expr.Int(y))
}

func (zoompanBuilder *implZoompanBuilder) YExpr(y expr.Expr) ZoompanBuilder {
	return zoompanBuilder.withOption("y", y)
}

func (zoompanBuilder *implZoompanBuilder) D(d int) ZoompanBuilder {
	return zoompanBuilder.withOption("d", expr.Int(d))
}

func (zoompanBuilder *implZoompanBuilder) DExpr(d expr.Expr) ZoompanBuilder {
	return zoompanBuilder.withOption("d", d)
}

func (zoompanBuilder *implZoompanBuilder) S(s expr.Size) ZoompanBuilder {
	return zoompanBuilder.withOption("s", s)
}

func (zoompanBuilder *implZoompanBuilder) Fps(fps expr.Rational) ZoompanBuilder {
	return zoompanBuilder.withOption("fps", fps)
}
