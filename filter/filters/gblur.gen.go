// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// GblurBuilder Apply Gaussian Blur filter.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#gblur
type GblurBuilder interface {
	filter.Filter
	// Sigma set sigma (from 0 to 1024) (default 0.5).
	Sigma(sigma float32) GblurBuilder
	// SigmaExpr set sigma (from 0 to 1024) (default 0.5).
	SigmaExpr(sigma expr.Expr) GblurBuilder
	// Steps set number of steps (from 1 to 6) (default 1).
	Steps(steps int) GblurBuilder
	// StepsExpr set number of steps (from 1 to 6) (default 1).
	StepsExpr(steps expr.Expr) GblurBuilder
	// Planes set planes to filter (from 0 to 15) (default 15).
	Planes(planes int) GblurBuilder
	// PlanesExpr set planes to filter (from 0 to 15) (default 15).
	PlanesExpr(planes expr.Expr) GblurBuilder
	// SigmaV set vertical sigma (from -1 to 1024) (default -1).
	SigmaV(sigmaV float32) GblurBuilder
	// SigmaVExpr set vertical sigma (from -1 to 1024) (default -1).
	SigmaVExpr(sigmaV expr.Expr) GblurBuilder
	// Enable expression to enable or disable the filter.
	Enable(enable expr.Expr) GblurBuilder
}

// Gblur creates a new GblurBuilder to configure the "gblur" filter.
func Gblur(opts ...filter.Option) GblurBuilder {
	return &implGblurBuilder{
		f: filter.New("gblur", 1, opts...),
	}
}

type implGblurBuilder struct {
	f filter.Filter
}

func (gblurBuilder *implGblurBuilder) String() string {
	return gblurBuilder.f.String()
}

func (gblurBuilder *implGblurBuilder) Outputs() int {
	return gblurBuilder.f.Outputs()
}

func (gblurBuilder *implGblurBuilder) With(key string, value expr.Expr) filter.Filter {
	return gblurBuilder.withOption(key, value)
}

func (gblurBuilder *implGblurBuilder) withOption(key string, value expr.Expr) GblurBuilder {
	bCopy := *gblurBuilder
	bCopy.f = gblurBuilder.f.With(key, value)
	return &bCopy
}

func (gblurBuilder *implGblurBuilder) Sigma(sigma float32) GblurBuilder {
	return gblurBuilder.withOption("sigma", expr.Float(sigma))
}

func (gblurBuilder *implGblurBuilder) SigmaExpr(sigma expr.Expr) GblurBuilder {
	return gblurBuilder.withOption("sigma", sigma)
}

func (gblurBuilder *implGblurBuilder) Steps(steps int) GblurBuilder {
	return gblurBuilder.withOption("steps", expr.Int(steps))
}

func (gblurBuilder *implGblurBuilder) StepsExpr(steps expr.Expr) GblurBuilder {
	return gblurBuilder.withOption("steps", steps)
}

func (gblurBuilder *implGblurBuilder) Planes(planes int) GblurBuilder {
	return gblurBuilder.withOption("planes", expr.Int(planes))
}

func (gblurBuilder *implGblurBuilder) PlanesExpr(planes expr.Expr) GblurBuilder {
	return gblurBuilder.withOption("planes", planes)
}

func (gblurBuilder *implGblurBuilder) SigmaV(sigmaV float32) GblurBuilder {
	return gblurBuilder.withOption("sigmaV", expr.Float(sigmaV))
}

func (gblurBuilder *implGblurBuilder) SigmaVExpr(sigmaV expr.Expr) GblurBuilder {
	return gblurBuilder.withOption("sigmaV", sigmaV)
}

func (gblurBuilder *implGblurBuilder) Enable(enable expr.Expr) GblurBuilder {
	return gblurBuilder.withOption("enable", enable)
}
