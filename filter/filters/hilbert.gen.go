// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// HilbertBuilder Generate a Hilbert transform FIR coefficients.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#hilbert
type HilbertBuilder interface {
	filter.Filter
	// SampleRate set sample rate (from 1 to INT_MAX) (default 44100).
	SampleRate(sampleRate int) HilbertBuilder
	// R set sample rate (from 1 to INT_MAX) (default 44100).
	R(r int) HilbertBuilder
	// Taps set number of taps (from 11 to 65535) (default 22051).
	Taps(taps int) HilbertBuilder
	// T set number of taps (from 11 to 65535) (default 22051).
	T(t int) HilbertBuilder
	// NbSamples set the number of samples per requested frame (from 1 to INT_MAX) (default 1024).
	NbSamples(nbSamples int) HilbertBuilder
	// N set the number of samples per requested frame (from 1 to INT_MAX) (default 1024).
	N(n int) HilbertBuilder
	// WinFunc set window function (from 0 to 20) (default blackman).
	WinFunc(winFunc int) HilbertBuilder
	// W set window function (from 0 to 20) (default blackman).
	W(w int) HilbertBuilder
}

// Hilbert creates a new HilbertBuilder to configure the "hilbert" filter.
func Hilbert(opts ...filter.Option) HilbertBuilder {
	return &implHilbertBuilder{
		f: filter.New("hilbert", 1, opts...),
	}
}

type implHilbertBuilder struct {
	f filter.Filter
}

func (hilbertBuilder *implHilbertBuilder) String() string {
	return hilbertBuilder.f.String()
}

func (hilbertBuilder *implHilbertBuilder) Outputs() int {
	return hilbertBuilder.f.Outputs()
}

func (hilbertBuilder *implHilbertBuilder) With(key string, value expr.Expr) filter.Filter {
	return hilbertBuilder.withOption(key, value)
}

func (hilbertBuilder *implHilbertBuilder) withOption(key string, value expr.Expr) HilbertBuilder {
	bCopy := *hilbertBuilder
	bCopy.f = hilbertBuilder.f.With(key, value)
	return &bCopy
}

func (hilbertBuilder *implHilbertBuilder) SampleRate(sampleRate int) HilbertBuilder {
	return hilbertBuilder.withOption("sample_rate", expr.Int(sampleRate))
}

func (hilbertBuilder *implHilbertBuilder) R(r int) HilbertBuilder {
	return hilbertBuilder.withOption("r", expr.Int(r))
}

func (hilbertBuilder *implHilbertBuilder) Taps(taps int) HilbertBuilder {
	return hilbertBuilder.withOption("taps", expr.Int(taps))
}

func (hilbertBuilder *implHilbertBuilder) T(t int) HilbertBuilder {
	return hilbertBuilder.withOption("t", expr.Int(t))
}

func (hilbertBuilder *implHilbertBuilder) NbSamples(nbSamples int) HilbertBuilder {
	return hilbertBuilder.withOption("nb_samples", expr.Int(nbSamples))
}

func (hilbertBuilder *implHilbertBuilder) N(n int) HilbertBuilder {
	return hilbertBuilder.withOption("n", expr.Int(n))
}

func (hilbertBuilder *implHilbertBuilder) WinFunc(winFunc int) HilbertBuilder {
	return hilbertBuilder.withOption("win_func", expr.Int(winFunc))
}

func (hilbertBuilder *implHilbertBuilder) W(w int) HilbertBuilder {
	return hilbertBuilder.withOption("w", expr.Int(w))
}
