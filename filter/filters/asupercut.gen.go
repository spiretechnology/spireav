// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// AsupercutBuilder Cut super frequencies.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#asupercut
type AsupercutBuilder interface {
	filter.Filter
	// Cutoff set cutoff frequency (from 20000 to 192000) (default 20000).
	Cutoff(cutoff float64) AsupercutBuilder
	// CutoffExpr set cutoff frequency (from 20000 to 192000) (default 20000).
	CutoffExpr(cutoff expr.Expr) AsupercutBuilder
	// Order set filter order (from 3 to 20) (default 10).
	Order(order int) AsupercutBuilder
	// OrderExpr set filter order (from 3 to 20) (default 10).
	OrderExpr(order expr.Expr) AsupercutBuilder
	// Level set input level (from 0 to 1) (default 1).
	Level(level float64) AsupercutBuilder
	// LevelExpr set input level (from 0 to 1) (default 1).
	LevelExpr(level expr.Expr) AsupercutBuilder
}

// Asupercut creates a new AsupercutBuilder to configure the "asupercut" filter.
func Asupercut(opts ...filter.Option) AsupercutBuilder {
	return &implAsupercutBuilder{
		f: filter.New("asupercut", 1, opts...),
	}
}

type implAsupercutBuilder struct {
	f filter.Filter
}

func (asupercutBuilder *implAsupercutBuilder) String() string {
	return asupercutBuilder.f.String()
}

func (asupercutBuilder *implAsupercutBuilder) Outputs() int {
	return asupercutBuilder.f.Outputs()
}

func (asupercutBuilder *implAsupercutBuilder) With(key string, value expr.Expr) filter.Filter {
	return asupercutBuilder.withOption(key, value)
}

func (asupercutBuilder *implAsupercutBuilder) withOption(key string, value expr.Expr) AsupercutBuilder {
	bCopy := *asupercutBuilder
	bCopy.f = asupercutBuilder.f.With(key, value)
	return &bCopy
}

func (asupercutBuilder *implAsupercutBuilder) Cutoff(cutoff float64) AsupercutBuilder {
	return asupercutBuilder.withOption("cutoff", expr.Double(cutoff))
}

func (asupercutBuilder *implAsupercutBuilder) CutoffExpr(cutoff expr.Expr) AsupercutBuilder {
	return asupercutBuilder.withOption("cutoff", cutoff)
}

func (asupercutBuilder *implAsupercutBuilder) Order(order int) AsupercutBuilder {
	return asupercutBuilder.withOption("order", expr.Int(order))
}

func (asupercutBuilder *implAsupercutBuilder) OrderExpr(order expr.Expr) AsupercutBuilder {
	return asupercutBuilder.withOption("order", order)
}

func (asupercutBuilder *implAsupercutBuilder) Level(level float64) AsupercutBuilder {
	return asupercutBuilder.withOption("level", expr.Double(level))
}

func (asupercutBuilder *implAsupercutBuilder) LevelExpr(level expr.Expr) AsupercutBuilder {
	return asupercutBuilder.withOption("level", level)
}
