// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// AxcorrelateBuilder Cross-correlate two audio streams.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#axcorrelate
type AxcorrelateBuilder interface {
	filter.Filter
	// Size set the segment size (from 2 to 131072) (default 256).
	Size(size int) AxcorrelateBuilder
	// Algo set the algorithm (from 0 to 2) (default best).
	Algo(algo int) AxcorrelateBuilder
}

// Axcorrelate creates a new AxcorrelateBuilder to configure the "axcorrelate" filter.
func Axcorrelate(opts ...filter.Option) AxcorrelateBuilder {
	return &implAxcorrelateBuilder{
		f: filter.New("axcorrelate", 1, opts...),
	}
}

type implAxcorrelateBuilder struct {
	f filter.Filter
}

func (axcorrelateBuilder *implAxcorrelateBuilder) String() string {
	return axcorrelateBuilder.f.String()
}

func (axcorrelateBuilder *implAxcorrelateBuilder) Outputs() int {
	return axcorrelateBuilder.f.Outputs()
}

func (axcorrelateBuilder *implAxcorrelateBuilder) With(key string, value expr.Expr) filter.Filter {
	return axcorrelateBuilder.withOption(key, value)
}

func (axcorrelateBuilder *implAxcorrelateBuilder) withOption(key string, value expr.Expr) AxcorrelateBuilder {
	bCopy := *axcorrelateBuilder
	bCopy.f = axcorrelateBuilder.f.With(key, value)
	return &bCopy
}

func (axcorrelateBuilder *implAxcorrelateBuilder) Size(size int) AxcorrelateBuilder {
	return axcorrelateBuilder.withOption("size", expr.Int(size))
}

func (axcorrelateBuilder *implAxcorrelateBuilder) Algo(algo int) AxcorrelateBuilder {
	return axcorrelateBuilder.withOption("algo", expr.Int(algo))
}
