// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// FramestepBuilder Select one frame every N frames.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#framestep
type FramestepBuilder interface {
	filter.Filter
	// Step set frame step (from 1 to INT_MAX) (default 1).
	Step(step int) FramestepBuilder
	// Enable expression to enable or disable the filter.
	Enable(enable expr.Expr) FramestepBuilder
}

// Framestep creates a new FramestepBuilder to configure the "framestep" filter.
func Framestep(opts ...filter.Option) FramestepBuilder {
	return &implFramestepBuilder{
		f: filter.New("framestep", 1, opts...),
	}
}

type implFramestepBuilder struct {
	f filter.Filter
}

func (framestepBuilder *implFramestepBuilder) String() string {
	return framestepBuilder.f.String()
}

func (framestepBuilder *implFramestepBuilder) Outputs() int {
	return framestepBuilder.f.Outputs()
}

func (framestepBuilder *implFramestepBuilder) With(key string, value expr.Expr) filter.Filter {
	return framestepBuilder.withOption(key, value)
}

func (framestepBuilder *implFramestepBuilder) withOption(key string, value expr.Expr) FramestepBuilder {
	bCopy := *framestepBuilder
	bCopy.f = framestepBuilder.f.With(key, value)
	return &bCopy
}

func (framestepBuilder *implFramestepBuilder) Step(step int) FramestepBuilder {
	return framestepBuilder.withOption("step", expr.Int(step))
}

func (framestepBuilder *implFramestepBuilder) Enable(enable expr.Expr) FramestepBuilder {
	return framestepBuilder.withOption("enable", enable)
}
