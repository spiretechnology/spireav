// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// ArlsBuilder Apply Recursive Least Squares algorithm to first audio stream.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#arls
type ArlsBuilder interface {
	filter.Filter
	// Order set the filter order (from 1 to 32767) (default 16).
	Order(order int) ArlsBuilder
	// Lambda set the filter lambda (from 0 to 1) (default 1).
	Lambda(lambda float32) ArlsBuilder
	// LambdaExpr set the filter lambda (from 0 to 1) (default 1).
	LambdaExpr(lambda expr.Expr) ArlsBuilder
	// Delta set the filter delta (from 0 to 32767) (default 2).
	Delta(delta float32) ArlsBuilder
	// OutMode set output mode (from 0 to 4) (default o).
	OutMode(outMode int) ArlsBuilder
	// OutModeExpr set output mode (from 0 to 4) (default o).
	OutModeExpr(outMode expr.Expr) ArlsBuilder
	// Precision set processing precision (from 0 to 2) (default auto).
	Precision(precision int) ArlsBuilder
	// Enable expression to enable or disable the filter.
	Enable(enable expr.Expr) ArlsBuilder
}

// Arls creates a new ArlsBuilder to configure the "arls" filter.
func Arls(opts ...filter.Option) ArlsBuilder {
	return &implArlsBuilder{
		f: filter.New("arls", 1, opts...),
	}
}

type implArlsBuilder struct {
	f filter.Filter
}

func (arlsBuilder *implArlsBuilder) String() string {
	return arlsBuilder.f.String()
}

func (arlsBuilder *implArlsBuilder) Outputs() int {
	return arlsBuilder.f.Outputs()
}

func (arlsBuilder *implArlsBuilder) With(key string, value expr.Expr) filter.Filter {
	return arlsBuilder.withOption(key, value)
}

func (arlsBuilder *implArlsBuilder) withOption(key string, value expr.Expr) ArlsBuilder {
	bCopy := *arlsBuilder
	bCopy.f = arlsBuilder.f.With(key, value)
	return &bCopy
}

func (arlsBuilder *implArlsBuilder) Order(order int) ArlsBuilder {
	return arlsBuilder.withOption("order", expr.Int(order))
}

func (arlsBuilder *implArlsBuilder) Lambda(lambda float32) ArlsBuilder {
	return arlsBuilder.withOption("lambda", expr.Float(lambda))
}

func (arlsBuilder *implArlsBuilder) LambdaExpr(lambda expr.Expr) ArlsBuilder {
	return arlsBuilder.withOption("lambda", lambda)
}

func (arlsBuilder *implArlsBuilder) Delta(delta float32) ArlsBuilder {
	return arlsBuilder.withOption("delta", expr.Float(delta))
}

func (arlsBuilder *implArlsBuilder) OutMode(outMode int) ArlsBuilder {
	return arlsBuilder.withOption("out_mode", expr.Int(outMode))
}

func (arlsBuilder *implArlsBuilder) OutModeExpr(outMode expr.Expr) ArlsBuilder {
	return arlsBuilder.withOption("out_mode", outMode)
}

func (arlsBuilder *implArlsBuilder) Precision(precision int) ArlsBuilder {
	return arlsBuilder.withOption("precision", expr.Int(precision))
}

func (arlsBuilder *implArlsBuilder) Enable(enable expr.Expr) ArlsBuilder {
	return arlsBuilder.withOption("enable", enable)
}
