// Code generated by cmd/filtergen. DO NOT EDIT.

package filters

import (
	"github.com/spiretechnology/spireav/filter"
	"github.com/spiretechnology/spireav/filter/expr"
)

// MpdecimateBuilder Remove near-duplicate frames.
// Documentation: https://ffmpeg.org/ffmpeg-filters.html#mpdecimate
type MpdecimateBuilder interface {
	filter.Filter
	// Max set the maximum number of consecutive dropped frames (positive), or the minimum interval between dropped frames (negative) (from INT_MIN to INT_MAX) (default 0).
	Max(max int) MpdecimateBuilder
	// Keep set the number of similar consecutive frames to be kept before starting to drop similar frames (from 0 to INT_MAX) (default 0).
	Keep(keep int) MpdecimateBuilder
	// Hi set high dropping threshold (from INT_MIN to INT_MAX) (default 768).
	Hi(hi int) MpdecimateBuilder
	// Lo set low dropping threshold (from INT_MIN to INT_MAX) (default 320).
	Lo(lo int) MpdecimateBuilder
	// Frac set fraction dropping threshold (from 0 to 1) (default 0.33).
	Frac(frac float32) MpdecimateBuilder
}

// Mpdecimate creates a new MpdecimateBuilder to configure the "mpdecimate" filter.
func Mpdecimate(opts ...filter.Option) MpdecimateBuilder {
	return &implMpdecimateBuilder{
		f: filter.New("mpdecimate", 1, opts...),
	}
}

type implMpdecimateBuilder struct {
	f filter.Filter
}

func (mpdecimateBuilder *implMpdecimateBuilder) String() string {
	return mpdecimateBuilder.f.String()
}

func (mpdecimateBuilder *implMpdecimateBuilder) Outputs() int {
	return mpdecimateBuilder.f.Outputs()
}

func (mpdecimateBuilder *implMpdecimateBuilder) With(key string, value expr.Expr) filter.Filter {
	return mpdecimateBuilder.withOption(key, value)
}

func (mpdecimateBuilder *implMpdecimateBuilder) withOption(key string, value expr.Expr) MpdecimateBuilder {
	bCopy := *mpdecimateBuilder
	bCopy.f = mpdecimateBuilder.f.With(key, value)
	return &bCopy
}

func (mpdecimateBuilder *implMpdecimateBuilder) Max(max int) MpdecimateBuilder {
	return mpdecimateBuilder.withOption("max", expr.Int(max))
}

func (mpdecimateBuilder *implMpdecimateBuilder) Keep(keep int) MpdecimateBuilder {
	return mpdecimateBuilder.withOption("keep", expr.Int(keep))
}

func (mpdecimateBuilder *implMpdecimateBuilder) Hi(hi int) MpdecimateBuilder {
	return mpdecimateBuilder.withOption("hi", expr.Int(hi))
}

func (mpdecimateBuilder *implMpdecimateBuilder) Lo(lo int) MpdecimateBuilder {
	return mpdecimateBuilder.withOption("lo", expr.Int(lo))
}

func (mpdecimateBuilder *implMpdecimateBuilder) Frac(frac float32) MpdecimateBuilder {
	return mpdecimateBuilder.withOption("frac", expr.Float(frac))
}
